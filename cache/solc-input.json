{
  "language": "Solidity",
  "sources": {
    "contracts/HiveTemplate.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"@aragon/apps-shared-minime/contracts/MiniMeToken.sol\";\nimport \"@aragon/templates-shared/contracts/BaseTemplate.sol\";\nimport \"./tps/AddressBook.sol\";\nimport \"./tps/Allocations.sol\";\nimport \"./tps/Rewards.sol\";\nimport { DotVoting } from \"./tps/DotVoting.sol\";\n\n// breakout\n\n\n\ncontract HiveTemplate is BaseTemplate {\n    string constant private ERROR_MISSING_CACHE = \"TEMPLATE_MISSING_CACHE\";\n    string constant private ERROR_MINIME_FACTORY_NOT_PROVIDED = \"TEMPLATE_MINIME_FAC_NOT_PROVIDED\";\n\n    string constant private ERROR_EMPTY_HOLDERS = \"EMPTY_HOLDERS\";\n    string constant private ERROR_BAD_HOLDERS_STAKES_LEN = \"BAD_HOLDERS_STAKES_LEN\";\n    string constant private ERROR_BAD_VOTE_SETTINGS = \"BAD_VOTE_SETTINGS\";\n\n    uint64 constant PCT64 = 10 ** 16;\n    address constant ANY_ENTITY = address(-1);\n\n    struct Cache {\n        address owner;\n        Kernel dao;\n        TokenManager mbrManager;\n        TokenManager mrtManager;\n        Voting mbrVoting;\n        Voting mrtVoting;\n    }\n\n    Cache cache;\n\n    constructor(DAOFactory _daoFactory, ENS _ens, MiniMeTokenFactory _miniMeFactory, IFIFSResolvingRegistrar _aragonID)\n        BaseTemplate(_daoFactory, _ens, _miniMeFactory, _aragonID)\n        public\n    {\n        _ensureAragonIdIsValid(_aragonID);\n        _ensureMiniMeFactoryIsValid(_miniMeFactory);\n    }\n\n    function createTokenAndInstance() external {\n        prepareInstance(\n            \"MBRtoken\",\n            \"MBR\",\n            \"MRTtoken\",\n            \"MRT\",\n            [500000000000000000,50000000000000000,604800],\n            [500000000000000000,50000000000000000,604800]\n            );\n\n        uint256[] memory balance;\n        balance[0] = (uint256(100000000000000000000));\n\n        address[] memory addresses;\n\n        addresses[0] = msg.sender;\n        finalizeInstance(\n            \"TestOrg1029\",\n            addresses,\n            balance,\n            [500000000000000000,50000000000000000,604800]\n        );\n    }\n\n    /**\n    * @dev Create two new MiniMe token and cache them for the user\n    * @param _mbrName String with the name for the token used by members in the organization\n    * @param _mbrSymbol String with the symbol for the token used by members in the organization\n    * @param _mbrName String with the name for the token used for merit in the organization\n    * @param _mbrSymbol String with the symbol for the token used for metit in the organization\n    * @param _mbrVotingSettings Array of [supportRequired, minAcceptanceQuorum, voteDuration] to set up the member voting app of the organization\n    * @param _mrtVotingSettings Array of [supportRequired, minAcceptanceQuorum, voteDuration] to set up the merit voting app of the organization\n    */\n    function prepareInstance(\n        string _mbrName,\n        string _mbrSymbol,\n        string _mrtName,\n        string _mrtSymbol,\n        uint64[3] _mbrVotingSettings,\n        uint64[3] _mrtVotingSettings\n    )\n    public\n    {\n        _ensureVotingSettings(_mbrVotingSettings, _mrtVotingSettings);\n\n        MiniMeToken mbrToken = _createNonTransferableToken(_mbrName, _mbrSymbol);\n        MiniMeToken mrtToken = _createTransferableToken(_mrtName, _mrtSymbol);\n\n        (Kernel dao, ) = _createDAO();\n\n        // used array to get around the stack limit\n        TokenManager[2] memory tokenManagers = [\n            _installTokenManagerApp(dao, mbrToken, false, uint256(1)),\n            _installTokenManagerApp(dao, mrtToken, true, uint256(0))\n        ];\n\n        // used array to get around the stack limit\n        Voting[2] memory votingApps = [\n            _installVotingApp(dao, mbrToken, _mbrVotingSettings),\n            _installVotingApp(dao, mrtToken, _mrtVotingSettings)\n        ];\n        // cast the ACL to get around the stack limit\n        _createEvmScriptsRegistryPermissions(ACL(dao.acl()), votingApps[0], votingApps[1]);\n\n        _cache(dao, tokenManagers[0], tokenManagers[1], votingApps[0], votingApps[1], msg.sender);\n    }\n\n    /**\n    * @dev Deploy a 1Hive DAO using previously cached MiniMe tokens\n    * @param _id String with the name for org, will assign `[id].aragonid.eth`\n    * @param _holders Array of MRT token holder addresses\n    * @param _stakes Array of merit token stakes for holders (token has 18 decimals, multiply token amount `* 10^18`)\n    * @param _dotVotingSettings Array of [_minQuorum, _candidateSupportPct, _voteTime] to set up the dot voting app of the organization\n    */\n\n    function finalizeInstance(\n        string memory _id,\n        address[] memory _holders,\n        uint256[] memory _stakes,\n        uint64[3] _dotVotingSettings\n    )\n        public\n    {\n        _ensureHolderSettings(_holders, _stakes);\n        _ensureDotVotingSettings(_dotVotingSettings);\n\n        (\n            Kernel dao,\n            TokenManager mbrTokenManager,\n            TokenManager mrtTokenManager,\n            Voting mbrVoting,\n            Voting mrtVoting\n        ) = _popCache(msg.sender);\n\n        // cast the ACL to get around the stack limit\n        Vault vault = _setupApps(dao, ACL(dao.acl()), mbrVoting, mrtVoting, mbrTokenManager, mrtTokenManager, _holders, _stakes);\n\n        // cast the ACL to get around the stack limit\n        _setupTps(dao, ACL(dao.acl()), mrtTokenManager.token(), vault, _dotVotingSettings,  mbrVoting,  mrtVoting);\n        _transferRootPermissionsFromTemplateAndFinalizeDAO(dao, mbrVoting);\n        _registerID(_id, dao);\n    }\n\n    // --------------------------- Internal Functions ---------------------------\n    function _cache(\n        Kernel _dao,\n        TokenManager _mbrTokenManager,\n        TokenManager _mrtTokenManager,\n        Voting _mbrVoting,\n        Voting _mrtVoting,\n        address _owner\n    )\n    internal\n    {\n        cache = Cache(_owner, _dao, _mbrTokenManager, _mrtTokenManager, _mbrVoting, _mrtVoting);\n    }\n\n    function _popCache(address _owner) internal returns (Kernel, TokenManager, TokenManager, Voting, Voting) {\n        require(cache.owner != address(0), ERROR_MISSING_CACHE);\n\n        Kernel dao = cache.dao;\n        TokenManager mbrTokenManager = cache.mbrManager;\n        TokenManager mrtTokenManager = cache.mrtManager;\n        Voting mbrVoting = cache.mbrVoting;\n        Voting mrtVoting = cache.mrtVoting;\n\n        delete cache.mbrManager;\n        delete cache.mrtManager;\n        delete cache.owner;\n        delete cache.mbrVoting;\n        delete cache.mrtVoting;\n\n        return (dao, mbrTokenManager, mrtTokenManager, mbrVoting, mrtVoting);\n    }\n\n    // ***** i didn't use createToken from basetemplate because i coudnt set transferability *****\n    function _createTransferableToken(string memory _name, string memory _symbol) internal returns (MiniMeToken) {\n        require(address(miniMeFactory) != address(0), ERROR_MINIME_FACTORY_NOT_PROVIDED);\n        MiniMeToken token = miniMeFactory.createCloneToken(MiniMeToken(address(0)), 0, _name, 18, _symbol, true);\n        emit DeployToken(address(token));\n        return token;\n    }\n\n    // ***** i didn't use createToken from basetemplate because i coudnt set transferability *****\n    function _createNonTransferableToken(string memory _name, string memory _symbol) internal returns (MiniMeToken) {\n        require(address(miniMeFactory) != address(0), ERROR_MINIME_FACTORY_NOT_PROVIDED);\n        MiniMeToken token = miniMeFactory.createCloneToken(MiniMeToken(address(0)), 0, _name, 0, _symbol, false);\n        emit DeployToken(address(token));\n        return token;\n    }\n\n    function _setupApps(\n        Kernel _dao,\n        ACL _acl,\n        Voting _mbrVoting,\n        Voting _mrtVoting,\n        TokenManager _mbrTokenManager,\n        TokenManager _mrtTokenManager,\n        address[] memory _holders,\n        uint256[] memory _stakes\n    )\n        internal\n        returns (Vault)\n    {\n        Vault vault = _installVaultApp(_dao);\n\n        _mintTokens(_acl, _mbrTokenManager, _holders, _stakes);\n        _mintTokens(_acl, _mrtTokenManager, _holders, _stakes);\n\n        _setupPermissions(_acl, vault, _mbrVoting, _mrtVoting, _mbrTokenManager, _mrtTokenManager);\n\n        return (vault);\n    }\n\n    function _setupTps(\n        Kernel _dao,\n        ACL _acl,\n        MiniMeToken _mrtToken,\n        Vault _vault,\n        uint64[3] _dotVotingSettings,\n        Voting _mbrVoting,\n        Voting _mrtVoting\n    )\n        internal\n    {\n        AddressBook addressBook = _installAddressBook(_dao);\n        DotVoting dotVoting = _installDotVoting(_dao, _mrtToken, _dotVotingSettings);\n        Allocations allocations = _installAllocations(_dao, addressBook, _vault);\n        Rewards rewards = _installRewards(_dao, _vault);\n\n        _setupTpsPermissions(_acl, addressBook, dotVoting, allocations, rewards, _mbrVoting, _mrtVoting);\n    }\n\n    function _installDotVoting (\n        Kernel _dao,\n        MiniMeToken _mrtToken,\n        uint64[3] _dotVotingSettings\n    ) internal returns (DotVoting)\n    {\n        bytes32 dotVotingAppId = keccak256(abi.encodePacked(apmNamehash(\"open\"), keccak256(\"dot-voting-preview\")));\n\n        DotVoting dotVoting = DotVoting(\n            _dao.newAppInstance(dotVotingAppId, _latestVersionAppBase(dotVotingAppId))\n        );\n\n        dotVoting.initialize(_mrtToken, _dotVotingSettings[0], _dotVotingSettings[1], _dotVotingSettings[2]);\n        return dotVoting;\n    }\n\n    function _installAddressBook (Kernel _dao) internal returns (AddressBook) {\n        bytes32 addressBookAppId = keccak256(abi.encodePacked(apmNamehash(\"open\"), keccak256(\"address-book-preview\")));\n\n        AddressBook addressBook = AddressBook(\n            _dao.newAppInstance(addressBookAppId, _latestVersionAppBase(addressBookAppId))\n        );\n\n        addressBook.initialize();\n        return addressBook;\n    }\n\n    function _installAllocations (Kernel _dao, AddressBook _addressBook, Vault _vault ) internal returns (Allocations) {\n        bytes32 allocationsAppId = keccak256(abi.encodePacked(apmNamehash(\"open\"), keccak256(\"allocations-preview\")));\n\n        Allocations allocations = Allocations(\n            _dao.newAppInstance(allocationsAppId, _latestVersionAppBase(allocationsAppId))\n        );\n\n        allocations.initialize(_addressBook, _vault);\n        return allocations;\n    }\n\n    function _installRewards(Kernel _dao, Vault _vault) internal returns (Rewards) {\n        bytes32 rewardsAppId = keccak256(abi.encodePacked(apmNamehash(\"open\"), keccak256(\"rewards-preview\")));\n\n        Rewards rewards = Rewards(\n            _dao.newAppInstance(rewardsAppId, _latestVersionAppBase(rewardsAppId))\n        );\n\n        rewards.initialize(_vault);\n        return rewards;\n    }\n\n    function _setupTpsPermissions(\n        ACL acl,\n        AddressBook addressBook,\n        DotVoting dotVoting,\n        Allocations allocations,\n        Rewards rewards,\n        Voting mbrVoting,\n        Voting mrtVoting\n    )\n        internal\n    {\n        acl.createPermission(mbrVoting, addressBook, addressBook.ADD_ENTRY_ROLE(), mbrVoting);\n        acl.createPermission(mbrVoting, addressBook, addressBook.REMOVE_ENTRY_ROLE(), mbrVoting);\n        emit InstalledApp(addressBook, keccak256(abi.encodePacked(apmNamehash(\"open\"), keccak256(\"address-book-preview\"))));\n\n\n        /**  Projects permissions: <-- add these after i include projects app\n        acl.createPermission(voting, projects, projects.FUND_ISSUES_ROLE(), voting);\n        acl.createPermission(voting, projects, projects.ADD_REPO_ROLE(), voting);\n        acl.createPermission(voting, projects, projects.CHANGE_SETTINGS_ROLE(), voting);\n        acl.createPermission(dotVoting, projects, projects.CURATE_ISSUES_ROLE(), voting);\n        acl.createPermission(voting, projects, projects.REMOVE_REPO_ROLE(), voting);\n        acl.createPermission(voting, projects, projects.REVIEW_APPLICATION_ROLE(), voting);\n        acl.createPermission(voting, projects, projects.WORK_REVIEW_ROLE(), voting);\n        emit InstalledApp(projects, planningAppIds[uint8(PlanningApps.Projects)]);\n        */\n\n        // Dot-voting permissions\n        acl.createPermission(ANY_ENTITY, dotVoting, dotVoting.ROLE_CREATE_VOTES(), mbrVoting);\n        acl.createPermission(ANY_ENTITY, dotVoting, dotVoting.ROLE_ADD_CANDIDATES(), mbrVoting);\n        emit InstalledApp(dotVoting, keccak256(abi.encodePacked(apmNamehash(\"open\"), keccak256(\"dot-voting-preview\"))));\n\n        // Allocations permissions:\n        acl.createPermission(mbrVoting, allocations, allocations.CREATE_ACCOUNT_ROLE(), mbrVoting);\n        acl.createPermission(dotVoting, allocations, allocations.CREATE_ALLOCATION_ROLE(), mbrVoting);\n        acl.createPermission(ANY_ENTITY, allocations, allocations.EXECUTE_ALLOCATION_ROLE(), mbrVoting);\n        emit InstalledApp(allocations, keccak256(abi.encodePacked(apmNamehash(\"open\"), keccak256(\"allocations-preview\"))));\n\n        // Rewards permissions:\n        acl.createPermission(mbrVoting, rewards, rewards.ADD_REWARD_ROLE(), mbrVoting);\n        emit InstalledApp(rewards, keccak256(abi.encodePacked(apmNamehash(\"open\"), keccak256(\"rewards-preview\"))));\n    }\n\n    function _setupPermissions(\n        ACL _acl,\n        Vault _vault,\n        Voting _mbrVoting,\n        Voting _mrtVoting,\n        TokenManager _mbrTokenManager,\n        TokenManager _mrtTokenManager\n    )\n        internal\n    {\n\n        _createVaultPermissions(_acl, _vault, _mbrVoting, _mbrVoting);\n        _createVotingPermissions(_acl, _mbrVoting, _mbrVoting, _mbrTokenManager, _mbrVoting);\n        _createVotingPermissions(_acl, _mrtVoting, _mrtVoting, _mrtTokenManager, _mbrVoting);\n        _createEvmScriptsRegistryPermissions(_acl, _mbrVoting, _mbrVoting);\n        _createTokenManagerPermissions(_acl, _mbrTokenManager, _mbrVoting, _mbrVoting);\n        _createTokenManagerPermissions(_acl, _mrtTokenManager, _mrtVoting, _mbrVoting);\n    }\n\n    function _ensureHolderSettings(\n        address[] memory _holders,\n        uint256[] memory _stakes\n    ) private pure\n    {\n        require(_holders.length > 0, ERROR_EMPTY_HOLDERS);\n        require(_holders.length == _stakes.length, ERROR_BAD_HOLDERS_STAKES_LEN);\n    }\n\n    function _ensureVotingSettings(\n        uint64[3] memory _mbrVotingSettings,\n        uint64[3] memory _mrtVotingSettings\n    ) private pure\n    {\n        require(_mbrVotingSettings.length == 3, ERROR_BAD_VOTE_SETTINGS);\n        require(_mrtVotingSettings.length == 3, ERROR_BAD_VOTE_SETTINGS);\n    }\n\n    function _ensureDotVotingSettings(\n        uint64[3] memory _dotVotingSettings\n    ) private pure\n    {\n        require(_dotVotingSettings.length == 3, ERROR_BAD_VOTE_SETTINGS);\n    }\n}"
    },
    "@aragon/apps-shared-minime/contracts/MiniMeToken.sol": {
      "content": "pragma solidity ^0.4.24;\n\n/*\n    Copyright 2016, Jordi Baylina\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/// @title MiniMeToken Contract\n/// @author Jordi Baylina\n/// @dev This token contract's goal is to make it easy for anyone to clone this\n///  token using the token distribution at a given block, this will allow DAO's\n///  and DApps to upgrade their features in a decentralized manner without\n///  affecting the original token\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\n\nimport \"./ITokenController.sol\";\n\ncontract Controlled {\n    /// @notice The address of the controller is the only address that can call\n    ///  a function with this modifier\n    modifier onlyController {\n        require(msg.sender == controller);\n        _;\n    }\n\n    address public controller;\n\n    function Controlled()  public { controller = msg.sender;}\n\n    /// @notice Changes the controller of the contract\n    /// @param _newController The new controller of the contract\n    function changeController(address _newController) onlyController  public {\n        controller = _newController;\n    }\n}\n\ncontract ApproveAndCallFallBack {\n    function receiveApproval(\n        address from,\n        uint256 _amount,\n        address _token,\n        bytes _data\n    ) public;\n}\n\n/// @dev The actual token contract, the default controller is the msg.sender\n///  that deploys the contract, so usually this token will be deployed by a\n///  token controller contract, which Giveth will call a \"Campaign\"\ncontract MiniMeToken is Controlled {\n\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\n    uint8 public decimals;             //Number of decimals of the smallest unit\n    string public symbol;              //An identifier: e.g. REP\n    string public version = \"MMT_0.1\"; //An arbitrary versioning scheme\n\n\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\n    ///  given value, the block number attached is the one that last changed the\n    ///  value\n    struct Checkpoint {\n\n        // `fromBlock` is the block number that the value was generated from\n        uint128 fromBlock;\n\n        // `value` is the amount of tokens at a specific block number\n        uint128 value;\n    }\n\n    // `parentToken` is the Token address that was cloned to produce this token;\n    //  it will be 0x0 for a token that was not cloned\n    MiniMeToken public parentToken;\n\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\n    //  used to determine the initial distribution of the Clone Token\n    uint public parentSnapShotBlock;\n\n    // `creationBlock` is the block number that the Clone Token was created\n    uint public creationBlock;\n\n    // `balances` is the map that tracks the balance of each address, in this\n    //  contract when the balance changes the block number that the change\n    //  occurred is also included in the map\n    mapping (address => Checkpoint[]) balances;\n\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n    mapping (address => mapping (address => uint256)) allowed;\n\n    // Tracks the history of the `totalSupply` of the token\n    Checkpoint[] totalSupplyHistory;\n\n    // Flag that determines if the token is transferable or not.\n    bool public transfersEnabled;\n\n    // The factory used to create new clone tokens\n    MiniMeTokenFactory public tokenFactory;\n\n////////////////\n// Constructor\n////////////////\n\n    /// @notice Constructor to create a MiniMeToken\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n    ///  will create the Clone token contracts, the token factory needs to be\n    ///  deployed first\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n    ///  new token\n    /// @param _parentSnapShotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token, set to 0 if it\n    ///  is a new token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    function MiniMeToken(\n        MiniMeTokenFactory _tokenFactory,\n        MiniMeToken _parentToken,\n        uint _parentSnapShotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    )  public\n    {\n        tokenFactory = _tokenFactory;\n        name = _tokenName;                                 // Set the name\n        decimals = _decimalUnits;                          // Set the decimals\n        symbol = _tokenSymbol;                             // Set the symbol\n        parentToken = _parentToken;\n        parentSnapShotBlock = _parentSnapShotBlock;\n        transfersEnabled = _transfersEnabled;\n        creationBlock = block.number;\n    }\n\n\n///////////////////\n// ERC20 Methods\n///////////////////\n\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\n        require(transfersEnabled);\n        return doTransfer(msg.sender, _to, _amount);\n    }\n\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n    ///  is approved by `_from`\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n\n        // The controller of this contract can move tokens around at will,\n        //  this is important to recognize! Confirm that you trust the\n        //  controller of this contract, which in most situations should be\n        //  another open source smart contract or 0x0\n        if (msg.sender != controller) {\n            require(transfersEnabled);\n\n            // The standard ERC 20 transferFrom functionality\n            if (allowed[_from][msg.sender] < _amount)\n                return false;\n            allowed[_from][msg.sender] -= _amount;\n        }\n        return doTransfer(_from, _to, _amount);\n    }\n\n    /// @dev This is the actual transfer function in the token contract, it can\n    ///  only be called by other functions in this contract.\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function doTransfer(address _from, address _to, uint _amount) internal returns(bool) {\n        if (_amount == 0) {\n            return true;\n        }\n        require(parentSnapShotBlock < block.number);\n        // Do not allow transfer to 0x0 or the token contract itself\n        require((_to != 0) && (_to != address(this)));\n        // If the amount being transfered is more than the balance of the\n        //  account the transfer returns false\n        var previousBalanceFrom = balanceOfAt(_from, block.number);\n        if (previousBalanceFrom < _amount) {\n            return false;\n        }\n        // Alerts the token controller of the transfer\n        if (isContract(controller)) {\n            // Adding the ` == true` makes the linter shut up so...\n            require(ITokenController(controller).onTransfer(_from, _to, _amount) == true);\n        }\n        // First update the balance array with the new value for the address\n        //  sending the tokens\n        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n        // Then update the balance array with the new value for the address\n        //  receiving the tokens\n        var previousBalanceTo = balanceOfAt(_to, block.number);\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n        // An event to make the transfer easy to find on the blockchain\n        Transfer(_from, _to, _amount);\n        return true;\n    }\n\n    /// @param _owner The address that's balance is being requested\n    /// @return The balance of `_owner` at the current block\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balanceOfAt(_owner, block.number);\n    }\n\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n    ///  its behalf. This is a modified version of the ERC20 approve function\n    ///  to be a little bit safer\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the approval was successful\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\n        require(transfersEnabled);\n\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n        // Alerts the token controller of the approve function call\n        if (isContract(controller)) {\n            // Adding the ` == true` makes the linter shut up so...\n            require(ITokenController(controller).onApprove(msg.sender, _spender, _amount) == true);\n        }\n\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    /// @dev This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n    ///  its behalf, and then a function is triggered in the contract that is\n    ///  being approved, `_spender`. This allows users to use their tokens to\n    ///  interact with contracts in one function call instead of two\n    /// @param _spender The address of the contract able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the function call was successful\n    function approveAndCall(ApproveAndCallFallBack _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\n        require(approve(_spender, _amount));\n\n        _spender.receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        );\n\n        return true;\n    }\n\n    /// @dev This function makes it easy to get the total number of tokens\n    /// @return The total number of tokens\n    function totalSupply() public constant returns (uint) {\n        return totalSupplyAt(block.number);\n    }\n\n\n////////////////\n// Query balance and totalSupply in History\n////////////////\n\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n    /// @param _owner The address from which the balance will be retrieved\n    /// @param _blockNumber The block number when the balance is queried\n    /// @return The balance at `_blockNumber`\n    function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint) {\n\n        // These next few lines are used when the balance of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.balanceOfAt` be queried at the\n        //  genesis block for that token as this contains initial balance of\n        //  this token\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != 0) {\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n            } else {\n                // Has no parent\n                return 0;\n            }\n\n        // This will return the expected balance during normal situations\n        } else {\n            return getValueAt(balances[_owner], _blockNumber);\n        }\n    }\n\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\n    /// @param _blockNumber The block number when the totalSupply is queried\n    /// @return The total amount of tokens at `_blockNumber`\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\n\n        // These next few lines are used when the totalSupply of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\n        //  genesis block for this token as that contains totalSupply of this\n        //  token at this block number.\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != 0) {\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n            } else {\n                return 0;\n            }\n\n        // This will return the expected totalSupply during normal situations\n        } else {\n            return getValueAt(totalSupplyHistory, _blockNumber);\n        }\n    }\n\n////////////////\n// Clone Token Method\n////////////////\n\n    /// @notice Creates a new clone token with the initial distribution being\n    ///  this token at `_snapshotBlock`\n    /// @param _cloneTokenName Name of the clone token\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n    /// @param _cloneTokenSymbol Symbol of the clone token\n    /// @param _snapshotBlock Block when the distribution of the parent token is\n    ///  copied to set the initial distribution of the new clone token;\n    ///  if the block is zero than the actual block, the current block is used\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    /// @return The address of the new MiniMeToken Contract\n    function createCloneToken(\n        string _cloneTokenName,\n        uint8 _cloneDecimalUnits,\n        string _cloneTokenSymbol,\n        uint _snapshotBlock,\n        bool _transfersEnabled\n    ) public returns(MiniMeToken)\n    {\n        uint256 snapshot = _snapshotBlock == 0 ? block.number - 1 : _snapshotBlock;\n\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n            this,\n            snapshot,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n        );\n\n        cloneToken.changeController(msg.sender);\n\n        // An event to make the token easy to find on the blockchain\n        NewCloneToken(address(cloneToken), snapshot);\n        return cloneToken;\n    }\n\n////////////////\n// Generate and destroy tokens\n////////////////\n\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n    /// @param _owner The address that will be assigned the new tokens\n    /// @param _amount The quantity of tokens generated\n    /// @return True if the tokens are generated correctly\n    function generateTokens(address _owner, uint _amount) onlyController public returns (bool) {\n        uint curTotalSupply = totalSupply();\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n        uint previousBalanceTo = balanceOf(_owner);\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n        Transfer(0, _owner, _amount);\n        return true;\n    }\n\n\n    /// @notice Burns `_amount` tokens from `_owner`\n    /// @param _owner The address that will lose the tokens\n    /// @param _amount The quantity of tokens to burn\n    /// @return True if the tokens are burned correctly\n    function destroyTokens(address _owner, uint _amount) onlyController public returns (bool) {\n        uint curTotalSupply = totalSupply();\n        require(curTotalSupply >= _amount);\n        uint previousBalanceFrom = balanceOf(_owner);\n        require(previousBalanceFrom >= _amount);\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n        Transfer(_owner, 0, _amount);\n        return true;\n    }\n\n////////////////\n// Enable tokens transfers\n////////////////\n\n\n    /// @notice Enables token holders to transfer their tokens freely if true\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    function enableTransfers(bool _transfersEnabled) onlyController public {\n        transfersEnabled = _transfersEnabled;\n    }\n\n////////////////\n// Internal helper functions to query and set a value in a snapshot array\n////////////////\n\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n    /// @param checkpoints The history of values being queried\n    /// @param _block The block number to retrieve the value at\n    /// @return The number of tokens being queried\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block) constant internal returns (uint) {\n        if (checkpoints.length == 0)\n            return 0;\n\n        // Shortcut for the actual value\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n            return checkpoints[checkpoints.length-1].value;\n        if (_block < checkpoints[0].fromBlock)\n            return 0;\n\n        // Binary search of the value in the array\n        uint min = 0;\n        uint max = checkpoints.length-1;\n        while (max > min) {\n            uint mid = (max + min + 1) / 2;\n            if (checkpoints[mid].fromBlock<=_block) {\n                min = mid;\n            } else {\n                max = mid-1;\n            }\n        }\n        return checkpoints[min].value;\n    }\n\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\n    ///  `totalSupplyHistory`\n    /// @param checkpoints The history of data being updated\n    /// @param _value The new number of tokens\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\n            newCheckPoint.fromBlock = uint128(block.number);\n            newCheckPoint.value = uint128(_value);\n        } else {\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\n            oldCheckPoint.value = uint128(_value);\n        }\n    }\n\n    /// @dev Internal function to determine if an address is a contract\n    /// @param _addr The address being queried\n    /// @return True if `_addr` is a contract\n    function isContract(address _addr) constant internal returns(bool) {\n        uint size;\n        if (_addr == 0)\n            return false;\n\n        assembly {\n            size := extcodesize(_addr)\n        }\n\n        return size>0;\n    }\n\n    /// @dev Helper function to return a min betwen the two uints\n    function min(uint a, uint b) pure internal returns (uint) {\n        return a < b ? a : b;\n    }\n\n    /// @notice The fallback function: If the contract's controller has not been\n    ///  set to 0, then the `proxyPayment` method is called which relays the\n    ///  ether and creates tokens as described in the token controller contract\n    function () external payable {\n        require(isContract(controller));\n        // Adding the ` == true` makes the linter shut up so...\n        require(ITokenController(controller).proxyPayment.value(msg.value)(msg.sender) == true);\n    }\n\n//////////\n// Safety Methods\n//////////\n\n    /// @notice This method can be used by the controller to extract mistakenly\n    ///  sent tokens to this contract.\n    /// @param _token The address of the token contract that you want to recover\n    ///  set to 0 in case you want to extract ether.\n    function claimTokens(address _token) onlyController public {\n        if (_token == 0x0) {\n            controller.transfer(this.balance);\n            return;\n        }\n\n        MiniMeToken token = MiniMeToken(_token);\n        uint balance = token.balanceOf(this);\n        token.transfer(controller, balance);\n        ClaimedTokens(_token, controller, balance);\n    }\n\n////////////////\n// Events\n////////////////\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _amount\n        );\n\n}\n\n\n////////////////\n// MiniMeTokenFactory\n////////////////\n\n/// @dev This contract is used to generate clone contracts from a contract.\n///  In solidity this is the way to create a contract from a contract of the\n///  same class\ncontract MiniMeTokenFactory {\n\n    /// @notice Update the DApp by creating a new token with new functionalities\n    ///  the msg.sender becomes the controller of this clone token\n    /// @param _parentToken Address of the token being cloned\n    /// @param _snapshotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    /// @return The address of the new token contract\n    function createCloneToken(\n        MiniMeToken _parentToken,\n        uint _snapshotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    ) public returns (MiniMeToken)\n    {\n        MiniMeToken newToken = new MiniMeToken(\n            this,\n            _parentToken,\n            _snapshotBlock,\n            _tokenName,\n            _decimalUnits,\n            _tokenSymbol,\n            _transfersEnabled\n        );\n\n        newToken.changeController(msg.sender);\n        return newToken;\n    }\n}"
    },
    "@aragon/apps-shared-minime/contracts/ITokenController.sol": {
      "content": "pragma solidity ^0.4.24;\n\n/// @dev The token controller contract must implement these functions\n\n\ninterface ITokenController {\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n    /// @param _owner The address that sent the ether to create tokens\n    /// @return True if the ether is accepted, false if it throws\n    function proxyPayment(address _owner) external payable returns(bool);\n\n    /// @notice Notifies the controller about a token transfer allowing the\n    ///  controller to react if desired\n    /// @param _from The origin of the transfer\n    /// @param _to The destination of the transfer\n    /// @param _amount The amount of the transfer\n    /// @return False if the controller does not authorize the transfer\n    function onTransfer(address _from, address _to, uint _amount) external returns(bool);\n\n    /// @notice Notifies the controller about an approval allowing the\n    ///  controller to react if desired\n    /// @param _owner The address that calls `approve()`\n    /// @param _spender The spender in the `approve()` call\n    /// @param _amount The amount in the `approve()` call\n    /// @return False if the controller does not authorize the approval\n    function onApprove(address _owner, address _spender, uint _amount) external returns(bool);\n}\n"
    },
    "@aragon/templates-shared/contracts/BaseTemplate.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"@aragon/apps-agent/contracts/Agent.sol\";\nimport \"@aragon/apps-vault/contracts/Vault.sol\";\nimport \"@aragon/apps-voting/contracts/Voting.sol\";\nimport \"@aragon/apps-payroll/contracts/Payroll.sol\";\nimport \"@aragon/apps-finance/contracts/Finance.sol\";\nimport \"@aragon/apps-token-manager/contracts/TokenManager.sol\";\nimport \"@aragon/apps-survey/contracts/Survey.sol\";\nimport \"@aragon/apps-shared-minime/contracts/MiniMeToken.sol\";\n\nimport \"@aragon/os/contracts/acl/ACL.sol\";\nimport \"@aragon/os/contracts/apm/Repo.sol\";\nimport \"@aragon/os/contracts/apm/APMNamehash.sol\";\nimport \"@aragon/os/contracts/kernel/Kernel.sol\";\nimport \"@aragon/os/contracts/lib/ens/ENS.sol\";\nimport \"@aragon/os/contracts/lib/ens/PublicResolver.sol\";\nimport \"@aragon/os/contracts/factory/DAOFactory.sol\";\nimport \"@aragon/os/contracts/common/IsContract.sol\";\nimport \"@aragon/os/contracts/common/Uint256Helpers.sol\";\nimport \"@aragon/id/contracts/IFIFSResolvingRegistrar.sol\";\n\n\ncontract BaseTemplate is APMNamehash, IsContract {\n    using Uint256Helpers for uint256;\n\n    /* Hardcoded constant to save gas\n    * bytes32 constant internal AGENT_APP_ID = apmNamehash(\"agent\");                  // agent.aragonpm.eth\n    * bytes32 constant internal VAULT_APP_ID = apmNamehash(\"vault\");                  // vault.aragonpm.eth\n    * bytes32 constant internal VOTING_APP_ID = apmNamehash(\"voting\");                // voting.aragonpm.eth\n    * bytes32 constant internal SURVEY_APP_ID = apmNamehash(\"survey\");                // survey.aragonpm.eth\n    * bytes32 constant internal PAYROLL_APP_ID = apmNamehash(\"payroll\");              // payroll.aragonpm.eth\n    * bytes32 constant internal FINANCE_APP_ID = apmNamehash(\"finance\");              // finance.aragonpm.eth\n    * bytes32 constant internal TOKEN_MANAGER_APP_ID = apmNamehash(\"token-manager\");  // token-manager.aragonpm.eth\n    */\n    bytes32 constant internal AGENT_APP_ID = 0x9ac98dc5f995bf0211ed589ef022719d1487e5cb2bab505676f0d084c07cf89a;\n    bytes32 constant internal VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\n    bytes32 constant internal VOTING_APP_ID = 0x9fa3927f639745e587912d4b0fea7ef9013bf93fb907d29faeab57417ba6e1d4;\n    bytes32 constant internal PAYROLL_APP_ID = 0x463f596a96d808cb28b5d080181e4a398bc793df2c222f6445189eb801001991;\n    bytes32 constant internal FINANCE_APP_ID = 0xbf8491150dafc5dcaee5b861414dca922de09ccffa344964ae167212e8c673ae;\n    bytes32 constant internal TOKEN_MANAGER_APP_ID = 0x6b20a3010614eeebf2138ccec99f028a61c811b3b1a3343b6ff635985c75c91f;\n    bytes32 constant internal SURVEY_APP_ID = 0x030b2ab880b88e228f2da5a3d19a2a31bc10dbf91fb1143776a6de489389471e;\n\n    string constant private ERROR_ENS_NOT_CONTRACT = \"TEMPLATE_ENS_NOT_CONTRACT\";\n    string constant private ERROR_DAO_FACTORY_NOT_CONTRACT = \"TEMPLATE_DAO_FAC_NOT_CONTRACT\";\n    string constant private ERROR_ARAGON_ID_NOT_PROVIDED = \"TEMPLATE_ARAGON_ID_NOT_PROVIDED\";\n    string constant private ERROR_ARAGON_ID_NOT_CONTRACT = \"TEMPLATE_ARAGON_ID_NOT_CONTRACT\";\n    string constant private ERROR_MINIME_FACTORY_NOT_PROVIDED = \"TEMPLATE_MINIME_FAC_NOT_PROVIDED\";\n    string constant private ERROR_MINIME_FACTORY_NOT_CONTRACT = \"TEMPLATE_MINIME_FAC_NOT_CONTRACT\";\n    string constant private ERROR_CANNOT_CAST_VALUE_TO_ADDRESS = \"TEMPLATE_CANNOT_CAST_VALUE_TO_ADDRESS\";\n    string constant private ERROR_INVALID_ID = \"TEMPLATE_INVALID_ID\";\n\n    ENS internal ens;\n    DAOFactory internal daoFactory;\n    MiniMeTokenFactory internal miniMeFactory;\n    IFIFSResolvingRegistrar internal aragonID;\n\n    event DeployDao(address dao);\n    event SetupDao(address dao);\n    event DeployToken(address token);\n    event InstalledApp(address appProxy, bytes32 appId);\n\n    constructor(DAOFactory _daoFactory, ENS _ens, MiniMeTokenFactory _miniMeFactory, IFIFSResolvingRegistrar _aragonID) public {\n        require(isContract(address(_ens)), ERROR_ENS_NOT_CONTRACT);\n        require(isContract(address(_daoFactory)), ERROR_DAO_FACTORY_NOT_CONTRACT);\n\n        ens = _ens;\n        aragonID = _aragonID;\n        daoFactory = _daoFactory;\n        miniMeFactory = _miniMeFactory;\n    }\n\n    /**\n    * @dev Create a DAO using the DAO Factory and grant the template root permissions so it has full\n    *      control during setup. Once the DAO setup has finished, it is recommended to call the\n    *      `_transferRootPermissionsFromTemplateAndFinalizeDAO()` helper to transfer the root\n    *      permissions to the end entity in control of the organization.\n    */\n    function _createDAO() internal returns (Kernel dao, ACL acl) {\n        dao = daoFactory.newDAO(this);\n        emit DeployDao(address(dao));\n        acl = ACL(dao.acl());\n        _createPermissionForTemplate(acl, dao, dao.APP_MANAGER_ROLE());\n    }\n\n    /* ACL */\n\n    function _createPermissions(ACL _acl, address[] memory _grantees, address _app, bytes32 _permission, address _manager) internal {\n        _acl.createPermission(_grantees[0], _app, _permission, address(this));\n        for (uint256 i = 1; i < _grantees.length; i++) {\n            _acl.grantPermission(_grantees[i], _app, _permission);\n        }\n        _acl.revokePermission(address(this), _app, _permission);\n        _acl.setPermissionManager(_manager, _app, _permission);\n    }\n\n    function _createPermissionForTemplate(ACL _acl, address _app, bytes32 _permission) internal {\n        _acl.createPermission(address(this), _app, _permission, address(this));\n    }\n\n    function _removePermissionFromTemplate(ACL _acl, address _app, bytes32 _permission) internal {\n        _acl.revokePermission(address(this), _app, _permission);\n        _acl.removePermissionManager(_app, _permission);\n    }\n\n    function _transferRootPermissionsFromTemplateAndFinalizeDAO(Kernel _dao, address _to) internal {\n        _transferRootPermissionsFromTemplateAndFinalizeDAO(_dao, _to, _to);\n    }\n\n    function _transferRootPermissionsFromTemplateAndFinalizeDAO(Kernel _dao, address _to, address _manager) internal {\n        ACL _acl = ACL(_dao.acl());\n        _transferPermissionFromTemplate(_acl, _dao, _to, _dao.APP_MANAGER_ROLE(), _manager);\n        _transferPermissionFromTemplate(_acl, _acl, _to, _acl.CREATE_PERMISSIONS_ROLE(), _manager);\n        emit SetupDao(_dao);\n    }\n\n    function _transferPermissionFromTemplate(ACL _acl, address _app, address _to, bytes32 _permission, address _manager) internal {\n        _acl.grantPermission(_to, _app, _permission);\n        _acl.revokePermission(address(this), _app, _permission);\n        _acl.setPermissionManager(_manager, _app, _permission);\n    }\n\n    /* AGENT */\n\n    function _installDefaultAgentApp(Kernel _dao) internal returns (Agent) {\n        bytes memory initializeData = abi.encodeWithSelector(Agent(0).initialize.selector);\n        Agent agent = Agent(_installDefaultApp(_dao, AGENT_APP_ID, initializeData));\n        // We assume that installing the Agent app as a default app means the DAO should have its\n        // Vault replaced by the Agent. Thus, we also set the DAO's recovery app to the Agent.\n        _dao.setRecoveryVaultAppId(AGENT_APP_ID);\n        return agent;\n    }\n\n    function _installNonDefaultAgentApp(Kernel _dao) internal returns (Agent) {\n        bytes memory initializeData = abi.encodeWithSelector(Agent(0).initialize.selector);\n        return Agent(_installNonDefaultApp(_dao, AGENT_APP_ID, initializeData));\n    }\n\n    function _createAgentPermissions(ACL _acl, Agent _agent, address _grantee, address _manager) internal {\n        _acl.createPermission(_grantee, _agent, _agent.EXECUTE_ROLE(), _manager);\n        _acl.createPermission(_grantee, _agent, _agent.RUN_SCRIPT_ROLE(), _manager);\n    }\n\n    /* VAULT */\n\n    function _installVaultApp(Kernel _dao) internal returns (Vault) {\n        bytes memory initializeData = abi.encodeWithSelector(Vault(0).initialize.selector);\n        return Vault(_installDefaultApp(_dao, VAULT_APP_ID, initializeData));\n    }\n\n    function _createVaultPermissions(ACL _acl, Vault _vault, address _grantee, address _manager) internal {\n        _acl.createPermission(_grantee, _vault, _vault.TRANSFER_ROLE(), _manager);\n    }\n\n    /* VOTING */\n\n    function _installVotingApp(Kernel _dao, MiniMeToken _token, uint64[3] memory _votingSettings) internal returns (Voting) {\n        return _installVotingApp(_dao, _token, _votingSettings[0], _votingSettings[1], _votingSettings[2]);\n    }\n\n    function _installVotingApp(\n        Kernel _dao,\n        MiniMeToken _token,\n        uint64 _support,\n        uint64 _acceptance,\n        uint64 _duration\n    )\n        internal returns (Voting)\n    {\n        bytes memory initializeData = abi.encodeWithSelector(Voting(0).initialize.selector, _token, _support, _acceptance, _duration);\n        return Voting(_installNonDefaultApp(_dao, VOTING_APP_ID, initializeData));\n    }\n\n    function _createVotingPermissions(\n        ACL _acl,\n        Voting _voting,\n        address _settingsGrantee,\n        address _createVotesGrantee,\n        address _manager\n    )\n        internal\n    {\n        _acl.createPermission(_settingsGrantee, _voting, _voting.MODIFY_QUORUM_ROLE(), _manager);\n        _acl.createPermission(_settingsGrantee, _voting, _voting.MODIFY_SUPPORT_ROLE(), _manager);\n        _acl.createPermission(_createVotesGrantee, _voting, _voting.CREATE_VOTES_ROLE(), _manager);\n    }\n\n    /* SURVEY */\n\n    function _installSurveyApp(Kernel _dao, MiniMeToken _token, uint64 _minParticipationPct, uint64 _surveyTime) internal returns (Survey) {\n        bytes memory initializeData = abi.encodeWithSelector(Survey(0).initialize.selector, _token, _minParticipationPct, _surveyTime);\n        return Survey(_installNonDefaultApp(_dao, SURVEY_APP_ID, initializeData));\n    }\n\n    function _createSurveyPermissions(ACL _acl, Survey _survey, address _grantee, address _manager) internal {\n        _acl.createPermission(_grantee, _survey, _survey.CREATE_SURVEYS_ROLE(), _manager);\n        _acl.createPermission(_grantee, _survey, _survey.MODIFY_PARTICIPATION_ROLE(), _manager);\n    }\n\n    /* PAYROLL */\n\n    function _installPayrollApp(\n        Kernel _dao,\n        Finance _finance,\n        address _denominationToken,\n        IFeed _priceFeed,\n        uint64 _rateExpiryTime\n    )\n        internal returns (Payroll)\n    {\n        bytes memory initializeData = abi.encodeWithSelector(\n            Payroll(0).initialize.selector,\n            _finance,\n            _denominationToken,\n            _priceFeed,\n            _rateExpiryTime\n        );\n        return Payroll(_installNonDefaultApp(_dao, PAYROLL_APP_ID, initializeData));\n    }\n\n    /**\n    * @dev Internal function to configure payroll permissions. Note that we allow defining different managers for\n    *      payroll since it may be useful to have one control the payroll settings (rate expiration, price feed,\n    *      and allowed tokens), and another one to control the employee functionality (bonuses, salaries,\n    *      reimbursements, employees, etc).\n    * @param _acl ACL instance being configured\n    * @param _acl Payroll app being configured\n    * @param _employeeManager Address that will receive permissions to handle employee payroll functionality\n    * @param _settingsManager Address that will receive permissions to manage payroll settings\n    * @param _permissionsManager Address that will be the ACL manager for the payroll permissions\n    */\n    function _createPayrollPermissions(\n        ACL _acl,\n        Payroll _payroll,\n        address _employeeManager,\n        address _settingsManager,\n        address _permissionsManager\n    )\n        internal\n    {\n        _acl.createPermission(_employeeManager, _payroll, _payroll.ADD_BONUS_ROLE(), _permissionsManager);\n        _acl.createPermission(_employeeManager, _payroll, _payroll.ADD_EMPLOYEE_ROLE(), _permissionsManager);\n        _acl.createPermission(_employeeManager, _payroll, _payroll.ADD_REIMBURSEMENT_ROLE(), _permissionsManager);\n        _acl.createPermission(_employeeManager, _payroll, _payroll.TERMINATE_EMPLOYEE_ROLE(), _permissionsManager);\n        _acl.createPermission(_employeeManager, _payroll, _payroll.SET_EMPLOYEE_SALARY_ROLE(), _permissionsManager);\n\n        _acl.createPermission(_settingsManager, _payroll, _payroll.MODIFY_PRICE_FEED_ROLE(), _permissionsManager);\n        _acl.createPermission(_settingsManager, _payroll, _payroll.MODIFY_RATE_EXPIRY_ROLE(), _permissionsManager);\n        _acl.createPermission(_settingsManager, _payroll, _payroll.MANAGE_ALLOWED_TOKENS_ROLE(), _permissionsManager);\n    }\n\n    function _unwrapPayrollSettings(\n        uint256[4] memory _payrollSettings\n    )\n        internal pure returns (address denominationToken, IFeed priceFeed, uint64 rateExpiryTime, address employeeManager)\n    {\n        denominationToken = _toAddress(_payrollSettings[0]);\n        priceFeed = IFeed(_toAddress(_payrollSettings[1]));\n        rateExpiryTime = _payrollSettings[2].toUint64();\n        employeeManager = _toAddress(_payrollSettings[3]);\n    }\n\n    /* FINANCE */\n\n    function _installFinanceApp(Kernel _dao, Vault _vault, uint64 _periodDuration) internal returns (Finance) {\n        bytes memory initializeData = abi.encodeWithSelector(Finance(0).initialize.selector, _vault, _periodDuration);\n        return Finance(_installNonDefaultApp(_dao, FINANCE_APP_ID, initializeData));\n    }\n\n    function _createFinancePermissions(ACL _acl, Finance _finance, address _grantee, address _manager) internal {\n        _acl.createPermission(_grantee, _finance, _finance.EXECUTE_PAYMENTS_ROLE(), _manager);\n        _acl.createPermission(_grantee, _finance, _finance.MANAGE_PAYMENTS_ROLE(), _manager);\n    }\n\n    function _createFinanceCreatePaymentsPermission(ACL _acl, Finance _finance, address _grantee, address _manager) internal {\n        _acl.createPermission(_grantee, _finance, _finance.CREATE_PAYMENTS_ROLE(), _manager);\n    }\n\n    function _grantCreatePaymentPermission(ACL _acl, Finance _finance, address _to) internal {\n        _acl.grantPermission(_to, _finance, _finance.CREATE_PAYMENTS_ROLE());\n    }\n\n    function _transferCreatePaymentManagerFromTemplate(ACL _acl, Finance _finance, address _manager) internal {\n        _acl.setPermissionManager(_manager, _finance, _finance.CREATE_PAYMENTS_ROLE());\n    }\n\n    /* TOKEN MANAGER */\n\n    function _installTokenManagerApp(\n        Kernel _dao,\n        MiniMeToken _token,\n        bool _transferable,\n        uint256 _maxAccountTokens\n    )\n        internal returns (TokenManager)\n    {\n        TokenManager tokenManager = TokenManager(_installNonDefaultApp(_dao, TOKEN_MANAGER_APP_ID));\n        _token.changeController(tokenManager);\n        tokenManager.initialize(_token, _transferable, _maxAccountTokens);\n        return tokenManager;\n    }\n\n    function _createTokenManagerPermissions(ACL _acl, TokenManager _tokenManager, address _grantee, address _manager) internal {\n        _acl.createPermission(_grantee, _tokenManager, _tokenManager.MINT_ROLE(), _manager);\n        _acl.createPermission(_grantee, _tokenManager, _tokenManager.BURN_ROLE(), _manager);\n    }\n\n    function _mintTokens(ACL _acl, TokenManager _tokenManager, address[] memory _holders, uint256[] memory _stakes) internal {\n        _createPermissionForTemplate(_acl, _tokenManager, _tokenManager.MINT_ROLE());\n        for (uint256 i = 0; i < _holders.length; i++) {\n            _tokenManager.mint(_holders[i], _stakes[i]);\n        }\n        _removePermissionFromTemplate(_acl, _tokenManager, _tokenManager.MINT_ROLE());\n    }\n\n    function _mintTokens(ACL _acl, TokenManager _tokenManager, address[] memory _holders, uint256 _stake) internal {\n        _createPermissionForTemplate(_acl, _tokenManager, _tokenManager.MINT_ROLE());\n        for (uint256 i = 0; i < _holders.length; i++) {\n            _tokenManager.mint(_holders[i], _stake);\n        }\n        _removePermissionFromTemplate(_acl, _tokenManager, _tokenManager.MINT_ROLE());\n    }\n\n    function _mintTokens(ACL _acl, TokenManager _tokenManager, address _holder, uint256 _stake) internal {\n        _createPermissionForTemplate(_acl, _tokenManager, _tokenManager.MINT_ROLE());\n        _tokenManager.mint(_holder, _stake);\n        _removePermissionFromTemplate(_acl, _tokenManager, _tokenManager.MINT_ROLE());\n    }\n\n    /* EVM SCRIPTS */\n\n    function _createEvmScriptsRegistryPermissions(ACL _acl, address _grantee, address _manager) internal {\n        EVMScriptRegistry registry = EVMScriptRegistry(_acl.getEVMScriptRegistry());\n        _acl.createPermission(_grantee, registry, registry.REGISTRY_MANAGER_ROLE(), _manager);\n        _acl.createPermission(_grantee, registry, registry.REGISTRY_ADD_EXECUTOR_ROLE(), _manager);\n    }\n\n    /* APPS */\n\n    function _installNonDefaultApp(Kernel _dao, bytes32 _appId) internal returns (address) {\n        return _installNonDefaultApp(_dao, _appId, new bytes(0));\n    }\n\n    function _installNonDefaultApp(Kernel _dao, bytes32 _appId, bytes memory _initializeData) internal returns (address) {\n        return _installApp(_dao, _appId, _initializeData, false);\n    }\n\n    function _installDefaultApp(Kernel _dao, bytes32 _appId) internal returns (address) {\n        return _installDefaultApp(_dao, _appId, new bytes(0));\n    }\n\n    function _installDefaultApp(Kernel _dao, bytes32 _appId, bytes memory _initializeData) internal returns (address) {\n        return _installApp(_dao, _appId, _initializeData, true);\n    }\n\n    function _installApp(Kernel _dao, bytes32 _appId, bytes memory _initializeData, bool _setDefault) internal returns (address) {\n        address latestBaseAppAddress = _latestVersionAppBase(_appId);\n        address instance = address(_dao.newAppInstance(_appId, latestBaseAppAddress, _initializeData, _setDefault));\n        emit InstalledApp(instance, _appId);\n        return instance;\n    }\n\n    function _latestVersionAppBase(bytes32 _appId) internal view returns (address base) {\n        Repo repo = Repo(PublicResolver(ens.resolver(_appId)).addr(_appId));\n        (,base,) = repo.getLatest();\n    }\n\n    /* TOKEN */\n\n    function _createToken(string memory _name, string memory _symbol, uint8 _decimals) internal returns (MiniMeToken) {\n        require(address(miniMeFactory) != address(0), ERROR_MINIME_FACTORY_NOT_PROVIDED);\n        MiniMeToken token = miniMeFactory.createCloneToken(MiniMeToken(address(0)), 0, _name, _decimals, _symbol, true);\n        emit DeployToken(address(token));\n        return token;\n    }\n\n    function _ensureMiniMeFactoryIsValid(address _miniMeFactory) internal view {\n        require(isContract(address(_miniMeFactory)), ERROR_MINIME_FACTORY_NOT_CONTRACT);\n    }\n\n    /* IDS */\n\n    function _validateId(string memory _id) internal pure {\n        require(bytes(_id).length > 0, ERROR_INVALID_ID);\n    }\n\n    function _registerID(string memory _name, address _owner) internal {\n        require(address(aragonID) != address(0), ERROR_ARAGON_ID_NOT_PROVIDED);\n        aragonID.register(keccak256(abi.encodePacked(_name)), _owner);\n    }\n\n    function _ensureAragonIdIsValid(address _aragonID) internal view {\n        require(isContract(address(_aragonID)), ERROR_ARAGON_ID_NOT_CONTRACT);\n    }\n\n    /* HELPERS */\n\n    function _toAddress(uint256 _value) private pure returns (address) {\n        require(_value <= uint160(-1), ERROR_CANNOT_CAST_VALUE_TO_ADDRESS);\n        return address(_value);\n    }\n}\n"
    },
    "@aragon/apps-agent/contracts/Agent.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    GPL-3.0-or-later\n */\n\npragma solidity 0.4.24;\n\nimport \"./SignatureValidator.sol\";\nimport \"./standards/IERC165.sol\";\nimport \"./standards/ERC1271.sol\";\n\nimport \"@aragon/apps-vault/contracts/Vault.sol\";\n\nimport \"@aragon/os/contracts/common/IForwarder.sol\";\n\n\ncontract Agent is IERC165, ERC1271Bytes, IForwarder, IsContract, Vault {\n    bytes32 public constant EXECUTE_ROLE = keccak256(\"EXECUTE_ROLE\");\n    bytes32 public constant RUN_SCRIPT_ROLE = keccak256(\"RUN_SCRIPT_ROLE\");\n    bytes32 public constant ADD_PRESIGNED_HASH_ROLE = keccak256(\"ADD_PRESIGNED_HASH_ROLE\");\n    bytes32 public constant DESIGNATE_SIGNER_ROLE = keccak256(\"DESIGNATE_SIGNER_ROLE\");\n\n    bytes4 private constant ERC165_INTERFACE_ID = 0x01ffc9a7;\n\n    string private constant ERROR_EXECUTE_ETH_NO_DATA = \"AGENT_EXEC_ETH_NO_DATA\";\n    string private constant ERROR_EXECUTE_TARGET_NOT_CONTRACT = \"AGENT_EXEC_TARGET_NO_CONTRACT\";\n    string private constant ERROR_DESIGNATED_TO_SELF = \"AGENT_DESIGNATED_TO_SELF\";\n\n    mapping (bytes32 => bool) public isPresigned;\n    address public designatedSigner;\n\n    event Execute(address indexed sender, address indexed target, uint256 ethValue, bytes data);\n    event PresignHash(address indexed sender, bytes32 indexed hash);\n    event SetDesignatedSigner(address indexed sender, address indexed oldSigner, address indexed newSigner);\n\n    /**\n    * @notice Execute '`@radspec(_target, _data)`' on `_target``_ethValue == 0 ? '' : ' (Sending' + @tokenAmount(_ethValue, 0x00) + ')'`\n    * @param _target Address where the action is being executed\n    * @param _ethValue Amount of ETH from the contract that is sent with the action\n    * @param _data Calldata for the action\n    * @return Exits call frame forwarding the return data of the executed call (either error or success data)\n    */\n    function execute(address _target, uint256 _ethValue, bytes _data)\n        external // This function MUST always be external as the function performs a low level return, exiting the Agent app execution context\n        authP(EXECUTE_ROLE, arr(_target, _ethValue, uint256(getSig(_data)))) // bytes4 casted as uint256 sets the bytes as the LSBs\n    {\n        bool result = _target.call.value(_ethValue)(_data);\n\n        if (result) {\n            emit Execute(msg.sender, _target, _ethValue, _data);\n        }\n\n        assembly {\n            let size := returndatasize\n            let ptr := mload(0x40)\n            returndatacopy(ptr, 0, size)\n\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\n            // if the call returned error data, forward it\n            switch result case 0 { revert(ptr, size) }\n            default { return(ptr, size) }\n        }\n    }\n\n    /**\n    * @notice Set `_designatedSigner` as the designated signer of the app, which will be able to sign messages on behalf of the app\n    * @param _designatedSigner Address that will be able to sign messages on behalf of the app\n    */\n    function setDesignatedSigner(address _designatedSigner)\n        external\n        authP(DESIGNATE_SIGNER_ROLE, arr(_designatedSigner))\n    {\n        // Prevent an infinite loop by setting the app itself as its designated signer.\n        // An undetectable loop can be created by setting a different contract as the\n        // designated signer which calls back into `isValidSignature`.\n        // Given that `isValidSignature` is always called with just 50k gas, the max\n        // damage of the loop is wasting 50k gas.\n        require(_designatedSigner != address(this), ERROR_DESIGNATED_TO_SELF);\n\n        address oldDesignatedSigner = designatedSigner;\n        designatedSigner = _designatedSigner;\n\n        emit SetDesignatedSigner(msg.sender, oldDesignatedSigner, _designatedSigner);\n    }\n\n    /**\n    * @notice Pre-sign hash `_hash`\n    * @param _hash Hash that will be considered signed regardless of the signature checked with 'isValidSignature()'\n    */\n    function presignHash(bytes32 _hash)\n        external\n        authP(ADD_PRESIGNED_HASH_ROLE, arr(_hash))\n    {\n        isPresigned[_hash] = true;\n\n        emit PresignHash(msg.sender, _hash);\n    }\n\n    function isForwarder() external pure returns (bool) {\n        return true;\n    }\n\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {\n        return\n            interfaceId == ERC1271_INTERFACE_ID ||\n            interfaceId == ERC165_INTERFACE_ID;\n    }\n\n    /**\n    * @notice Execute the script as the Agent app\n    * @dev IForwarder interface conformance. Forwards any token holder action.\n    * @param _evmScript Script being executed\n    */\n    function forward(bytes _evmScript)\n        public\n        authP(RUN_SCRIPT_ROLE, arr(getScriptACLParam(_evmScript)))\n    {\n        bytes memory input = \"\"; // no input\n        address[] memory blacklist = new address[](0); // no addr blacklist, can interact with anything\n        runScript(_evmScript, input, blacklist);\n        // We don't need to emit an event here as EVMScriptRunner will emit ScriptResult if successful\n    }\n\n    function isValidSignature(bytes32 hash, bytes signature) public view returns (bytes4) {\n        // Short-circuit in case the hash was presigned. Optimization as performing calls\n        // and ecrecover is more expensive than an SLOAD.\n        if (isPresigned[hash]) {\n            return returnIsValidSignatureMagicNumber(true);\n        }\n\n        bool isValid;\n        if (designatedSigner == address(0)) {\n            isValid = false;\n        } else {\n            isValid = SignatureValidator.isValidSignature(hash, designatedSigner, signature);\n        }\n\n        return returnIsValidSignatureMagicNumber(isValid);\n    }\n\n    function canForward(address sender, bytes evmScript) public view returns (bool) {\n        uint256[] memory params = new uint256[](1);\n        params[0] = getScriptACLParam(evmScript);\n        return canPerform(sender, RUN_SCRIPT_ROLE, params);\n    }\n\n    function getScriptACLParam(bytes evmScript) internal pure returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(evmScript)));\n    }\n\n    function getSig(bytes data) internal pure returns (bytes4 sig) {\n        if (data.length < 4) {\n            return;\n        }\n\n        assembly { sig := mload(add(data, 0x20)) }\n    }\n}\n"
    },
    "@aragon/apps-agent/contracts/SignatureValidator.sol": {
      "content": "pragma solidity 0.4.24;\n\n// Inspired in https://github.com/horizon-games/multi-token-standard/blob/master/contracts/utils/SignatureValidator.sol\n// This should probably be moved into aOS: https://github.com/aragon/aragonOS/pull/442\n\nimport \"./standards/ERC1271.sol\";\n\n\nlibrary SignatureValidator {\n    enum SignatureMode {\n        Invalid, // 0x00\n        EIP712,  // 0x01\n        EthSign, // 0x02\n        ERC1271, // 0x03\n        NMode    // 0x04, to check if mode is specified, leave at the end\n    }\n\n    // bytes4(keccak256(\"isValidSignature(bytes,bytes)\")\n    bytes4 public constant ERC1271_RETURN_VALID_SIGNATURE = 0x20c13b0b;\n    uint256 internal constant ERC1271_ISVALIDSIG_MAX_GAS = 250000;\n\n    string private constant ERROR_INVALID_LENGTH_POP_BYTE = \"SIGVAL_INVALID_LENGTH_POP_BYTE\";\n\n    /// @dev Validates that a hash was signed by a specified signer.\n    /// @param hash Hash which was signed.\n    /// @param signer Address of the signer.\n    /// @param signature ECDSA signature along with the mode (0 = Invalid, 1 = EIP712, 2 = EthSign, 3 = ERC1271) {mode}{r}{s}{v}.\n    /// @return Returns whether signature is from a specified user.\n    function isValidSignature(bytes32 hash, address signer, bytes signature) internal view returns (bool) {\n        if (signature.length == 0) {\n            return false;\n        }\n\n        uint8 modeByte = uint8(signature[0]);\n        if (modeByte >= uint8(SignatureMode.NMode)) {\n            return false;\n        }\n        SignatureMode mode = SignatureMode(modeByte);\n\n        if (mode == SignatureMode.EIP712) {\n            return ecVerify(hash, signer, signature);\n        } else if (mode == SignatureMode.EthSign) {\n            return ecVerify(\n                keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)),\n                signer,\n                signature\n            );\n        } else if (mode == SignatureMode.ERC1271) {\n            // Pop the mode byte before sending it down the validation chain\n            return safeIsValidSignature(signer, hash, popFirstByte(signature));\n        } else {\n            return false;\n        }\n    }\n\n    function ecVerify(bytes32 hash, address signer, bytes memory signature) private pure returns (bool) {\n        (bool badSig, bytes32 r, bytes32 s, uint8 v) = unpackEcSig(signature);\n\n        if (badSig) {\n            return false;\n        }\n\n        return signer == ecrecover(hash, v, r, s);\n    }\n\n    function unpackEcSig(bytes memory signature) private pure returns (bool badSig, bytes32 r, bytes32 s, uint8 v) {\n        if (signature.length != 66) {\n            badSig = true;\n            return;\n        }\n\n        v = uint8(signature[65]);\n        assembly {\n            r := mload(add(signature, 33))\n            s := mload(add(signature, 65))\n        }\n\n        // Allow signature version to be 0 or 1\n        if (v < 27) {\n            v += 27;\n        }\n\n        if (v != 27 && v != 28) {\n            badSig = true;\n        }\n    }\n\n    function popFirstByte(bytes memory input) private pure returns (bytes memory output) {\n        uint256 inputLength = input.length;\n        require(inputLength > 0, ERROR_INVALID_LENGTH_POP_BYTE);\n\n        output = new bytes(inputLength - 1);\n\n        if (output.length == 0) {\n            return output;\n        }\n\n        uint256 inputPointer;\n        uint256 outputPointer;\n        assembly {\n            inputPointer := add(input, 0x21)\n            outputPointer := add(output, 0x20)\n        }\n        memcpy(outputPointer, inputPointer, output.length);\n    }\n\n    function safeIsValidSignature(address validator, bytes32 hash, bytes memory signature) private view returns (bool) {\n        bytes memory data = abi.encodeWithSelector(ERC1271(validator).isValidSignature.selector, hash, signature);\n        bytes4 erc1271Return = safeBytes4StaticCall(validator, data, ERC1271_ISVALIDSIG_MAX_GAS);\n        return erc1271Return == ERC1271_RETURN_VALID_SIGNATURE;\n    }\n\n    function safeBytes4StaticCall(address target, bytes data, uint256 maxGas) private view returns (bytes4 ret) {\n        uint256 gasLeft = gasleft();\n\n        uint256 callGas = gasLeft > maxGas ? maxGas : gasLeft;\n        bool ok;\n        assembly {\n            ok := staticcall(callGas, target, add(data, 0x20), mload(data), 0, 0)\n        }\n\n        if (!ok) {\n            return;\n        }\n\n        uint256 size;\n        assembly { size := returndatasize }\n        if (size != 32) {\n            return;\n        }\n\n        assembly {\n            let ptr := mload(0x40)       // get next free memory ptr\n            returndatacopy(ptr, 0, size) // copy return from above `staticcall`\n            ret := mload(ptr)            // read data at ptr and set it to be returned\n        }\n\n        return ret;\n    }\n\n    // From: https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol\n    function memcpy(uint256 dest, uint256 src, uint256 len) private pure {\n        // Copy word-length chunks while possible\n        for (; len >= 32; len -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        // Copy remaining bytes\n        uint mask = 256 ** (32 - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n}\n"
    },
    "@aragon/apps-agent/contracts/standards/ERC1271.sol": {
      "content": "pragma solidity 0.4.24;\n\n// ERC1271 on Feb 12th, 2019: https://github.com/ethereum/EIPs/blob/a97dc434930d0ccc4461c97d8c7a920dc585adf2/EIPS/eip-1271.md\n// Using `isValidSignature(bytes32,bytes)` even though the standard still hasn't been modified\n// Rationale: https://github.com/ethereum/EIPs/issues/1271#issuecomment-462719728\n\n\ncontract ERC1271 {\n    bytes4 constant public ERC1271_INTERFACE_ID = 0xfb855dc9; // this.isValidSignature.selector\n\n    bytes4 constant public ERC1271_RETURN_VALID_SIGNATURE =   0x20c13b0b; // TODO: Likely needs to be updated\n    bytes4 constant public ERC1271_RETURN_INVALID_SIGNATURE = 0x00000000;\n\n    /**\n    * @dev Function must be implemented by deriving contract\n    * @param _hash Arbitrary length data signed on the behalf of address(this)\n    * @param _signature Signature byte array associated with _data\n    * @return A bytes4 magic value 0x20c13b0b if the signature check passes, 0x00000000 if not\n    *\n    * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\n    * MUST allow external calls\n    */\n    function isValidSignature(bytes32 _hash, bytes memory _signature) public view returns (bytes4);\n\n    function returnIsValidSignatureMagicNumber(bool isValid) internal pure returns (bytes4) {\n        return isValid ? ERC1271_RETURN_VALID_SIGNATURE : ERC1271_RETURN_INVALID_SIGNATURE;\n    }\n}\n\n\ncontract ERC1271Bytes is ERC1271 {\n    /**\n    * @dev Default behavior of `isValidSignature(bytes,bytes)`, can be overloaded for custom validation\n    * @param _data Arbitrary length data signed on the behalf of address(this)\n    * @param _signature Signature byte array associated with _data\n    * @return A bytes4 magic value 0x20c13b0b if the signature check passes, 0x00000000 if not\n    *\n    * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\n    * MUST allow external calls\n    */\n    function isValidSignature(bytes _data, bytes _signature) public view returns (bytes4) {\n        return isValidSignature(keccak256(_data), _signature);\n    }\n}\n"
    },
    "@aragon/apps-agent/contracts/standards/IERC165.sol": {
      "content": "pragma solidity 0.4.24;\n\n\ninterface IERC165 {\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool);\n}\n"
    },
    "@aragon/apps-vault/contracts/Vault.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"@aragon/os/contracts/apps/AragonApp.sol\";\nimport \"@aragon/os/contracts/common/DepositableStorage.sol\";\nimport \"@aragon/os/contracts/common/EtherTokenConstant.sol\";\nimport \"@aragon/os/contracts/common/SafeERC20.sol\";\nimport \"@aragon/os/contracts/lib/token/ERC20.sol\";\n\n\ncontract Vault is EtherTokenConstant, AragonApp, DepositableStorage {\n    using SafeERC20 for ERC20;\n\n    bytes32 public constant TRANSFER_ROLE = keccak256(\"TRANSFER_ROLE\");\n\n    string private constant ERROR_DATA_NON_ZERO = \"VAULT_DATA_NON_ZERO\";\n    string private constant ERROR_NOT_DEPOSITABLE = \"VAULT_NOT_DEPOSITABLE\";\n    string private constant ERROR_DEPOSIT_VALUE_ZERO = \"VAULT_DEPOSIT_VALUE_ZERO\";\n    string private constant ERROR_TRANSFER_VALUE_ZERO = \"VAULT_TRANSFER_VALUE_ZERO\";\n    string private constant ERROR_SEND_REVERTED = \"VAULT_SEND_REVERTED\";\n    string private constant ERROR_VALUE_MISMATCH = \"VAULT_VALUE_MISMATCH\";\n    string private constant ERROR_TOKEN_TRANSFER_FROM_REVERTED = \"VAULT_TOKEN_TRANSFER_FROM_REVERT\";\n    string private constant ERROR_TOKEN_TRANSFER_REVERTED = \"VAULT_TOKEN_TRANSFER_REVERTED\";\n\n    event VaultTransfer(address indexed token, address indexed to, uint256 amount);\n    event VaultDeposit(address indexed token, address indexed sender, uint256 amount);\n\n    /**\n    * @dev On a normal send() or transfer() this fallback is never executed as it will be\n    *      intercepted by the Proxy (see aragonOS#281)\n    */\n    function () external payable isInitialized {\n        require(msg.data.length == 0, ERROR_DATA_NON_ZERO);\n        _deposit(ETH, msg.value);\n    }\n\n    /**\n    * @notice Initialize Vault app\n    * @dev As an AragonApp it needs to be initialized in order for roles (`auth` and `authP`) to work\n    */\n    function initialize() external onlyInit {\n        initialized();\n        setDepositable(true);\n    }\n\n    /**\n    * @notice Deposit `_value` `_token` to the vault\n    * @param _token Address of the token being transferred\n    * @param _value Amount of tokens being transferred\n    */\n    function deposit(address _token, uint256 _value) external payable isInitialized {\n        _deposit(_token, _value);\n    }\n\n    /**\n    * @notice Transfer `_value` `_token` from the Vault to `_to`\n    * @param _token Address of the token being transferred\n    * @param _to Address of the recipient of tokens\n    * @param _value Amount of tokens being transferred\n    */\n    /* solium-disable-next-line function-order */\n    function transfer(address _token, address _to, uint256 _value)\n        external\n        authP(TRANSFER_ROLE, arr(_token, _to, _value))\n    {\n        require(_value > 0, ERROR_TRANSFER_VALUE_ZERO);\n\n        if (_token == ETH) {\n            require(_to.send(_value), ERROR_SEND_REVERTED);\n        } else {\n            require(ERC20(_token).safeTransfer(_to, _value), ERROR_TOKEN_TRANSFER_REVERTED);\n        }\n\n        emit VaultTransfer(_token, _to, _value);\n    }\n\n    function balance(address _token) public view returns (uint256) {\n        if (_token == ETH) {\n            return address(this).balance;\n        } else {\n            return ERC20(_token).staticBalanceOf(address(this));\n        }\n    }\n\n    /**\n    * @dev Disable recovery escape hatch, as it could be used\n    *      maliciously to transfer funds away from the vault\n    */\n    function allowRecoverability(address) public view returns (bool) {\n        return false;\n    }\n\n    function _deposit(address _token, uint256 _value) internal {\n        require(isDepositable(), ERROR_NOT_DEPOSITABLE);\n        require(_value > 0, ERROR_DEPOSIT_VALUE_ZERO);\n\n        if (_token == ETH) {\n            // Deposit is implicit in this case\n            require(msg.value == _value, ERROR_VALUE_MISMATCH);\n        } else {\n            require(\n                ERC20(_token).safeTransferFrom(msg.sender, address(this), _value),\n                ERROR_TOKEN_TRANSFER_FROM_REVERTED\n            );\n        }\n\n        emit VaultDeposit(_token, msg.sender, _value);\n    }\n}\n"
    },
    "@aragon/os/contracts/apps/AragonApp.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./AppStorage.sol\";\nimport \"../acl/ACLSyntaxSugar.sol\";\nimport \"../common/Autopetrified.sol\";\nimport \"../common/ConversionHelpers.sol\";\nimport \"../common/ReentrancyGuard.sol\";\nimport \"../common/VaultRecoverable.sol\";\nimport \"../evmscript/EVMScriptRunner.sol\";\n\n\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\n// that they can never be initialized.\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\n// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\n// are included so that they are automatically usable by subclassing contracts\ncontract AragonApp is AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\n    string private constant ERROR_AUTH_FAILED = \"APP_AUTH_FAILED\";\n\n    modifier auth(bytes32 _role) {\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\n        _;\n    }\n\n    modifier authP(bytes32 _role, uint256[] _params) {\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\n        _;\n    }\n\n    /**\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\n    * @param _sender Sender of the call\n    * @param _role Role on this app\n    * @param _params Permission params for the role\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\n    *         Always returns false if the app hasn't been initialized yet.\n    */\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\n        if (!hasInitialized()) {\n            return false;\n        }\n\n        IKernel linkedKernel = kernel();\n        if (address(linkedKernel) == address(0)) {\n            return false;\n        }\n\n        return linkedKernel.hasPermission(\n            _sender,\n            address(this),\n            _role,\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\n        );\n    }\n\n    /**\n    * @dev Get the recovery vault for the app\n    * @return Recovery vault address for the app\n    */\n    function getRecoveryVault() public view returns (address) {\n        // Funds recovery via a vault is only available when used with a kernel\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\n    }\n}\n"
    },
    "@aragon/os/contracts/apps/AppStorage.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"../common/UnstructuredStorage.sol\";\nimport \"../kernel/IKernel.sol\";\n\n\ncontract AppStorage {\n    using UnstructuredStorage for bytes32;\n\n    /* Hardcoded constants to save gas\n    bytes32 internal constant KERNEL_POSITION = keccak256(\"aragonOS.appStorage.kernel\");\n    bytes32 internal constant APP_ID_POSITION = keccak256(\"aragonOS.appStorage.appId\");\n    */\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\n\n    function kernel() public view returns (IKernel) {\n        return IKernel(KERNEL_POSITION.getStorageAddress());\n    }\n\n    function appId() public view returns (bytes32) {\n        return APP_ID_POSITION.getStorageBytes32();\n    }\n\n    function setKernel(IKernel _kernel) internal {\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\n    }\n\n    function setAppId(bytes32 _appId) internal {\n        APP_ID_POSITION.setStorageBytes32(_appId);\n    }\n}\n"
    },
    "@aragon/os/contracts/common/UnstructuredStorage.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\nlibrary UnstructuredStorage {\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\n        assembly { data := sload(position) }\n    }\n\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\n        assembly { data := sload(position) }\n    }\n\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\n        assembly { data := sload(position) }\n    }\n\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\n        assembly { data := sload(position) }\n    }\n\n    function setStorageBool(bytes32 position, bool data) internal {\n        assembly { sstore(position, data) }\n    }\n\n    function setStorageAddress(bytes32 position, address data) internal {\n        assembly { sstore(position, data) }\n    }\n\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\n        assembly { sstore(position, data) }\n    }\n\n    function setStorageUint256(bytes32 position, uint256 data) internal {\n        assembly { sstore(position, data) }\n    }\n}\n"
    },
    "@aragon/os/contracts/kernel/IKernel.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"../acl/IACL.sol\";\nimport \"../common/IVaultRecoverable.sol\";\n\n\ninterface IKernelEvents {\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\n}\n\n\n// This should be an interface, but interfaces can't inherit yet :(\ncontract IKernel is IKernelEvents, IVaultRecoverable {\n    function acl() public view returns (IACL);\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\n}\n"
    },
    "@aragon/os/contracts/acl/IACL.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ninterface IACL {\n    function initialize(address permissionsCreator) external;\n\n    // TODO: this should be external\n    // See https://github.com/ethereum/solidity/issues/4832\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n}\n"
    },
    "@aragon/os/contracts/common/IVaultRecoverable.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ninterface IVaultRecoverable {\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\n\n    function transferToVault(address token) external;\n\n    function allowRecoverability(address token) external view returns (bool);\n    function getRecoveryVault() external view returns (address);\n}\n"
    },
    "@aragon/os/contracts/acl/ACLSyntaxSugar.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ncontract ACLSyntaxSugar {\n    function arr() internal pure returns (uint256[]) {\n        return new uint256[](0);\n    }\n\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\n        return arr(uint256(_a));\n    }\n\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b));\n    }\n\n    function arr(address _a) internal pure returns (uint256[] r) {\n        return arr(uint256(_a));\n    }\n\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b));\n    }\n\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), _b, _c);\n    }\n\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), _b, _c, _d);\n    }\n\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b));\n    }\n\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\n    }\n\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b), uint256(_c));\n    }\n\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b), uint256(_c));\n    }\n\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\n        r = new uint256[](1);\n        r[0] = _a;\n    }\n\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\n        r = new uint256[](2);\n        r[0] = _a;\n        r[1] = _b;\n    }\n\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n        r = new uint256[](3);\n        r[0] = _a;\n        r[1] = _b;\n        r[2] = _c;\n    }\n\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n        r = new uint256[](4);\n        r[0] = _a;\n        r[1] = _b;\n        r[2] = _c;\n        r[3] = _d;\n    }\n\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n        r = new uint256[](5);\n        r[0] = _a;\n        r[1] = _b;\n        r[2] = _c;\n        r[3] = _d;\n        r[4] = _e;\n    }\n}\n\n\ncontract ACLHelpers {\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\n        return uint8(_x >> (8 * 30));\n    }\n\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\n        return uint8(_x >> (8 * 31));\n    }\n\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\n        a = uint32(_x);\n        b = uint32(_x >> (8 * 4));\n        c = uint32(_x >> (8 * 8));\n    }\n}\n"
    },
    "@aragon/os/contracts/common/Autopetrified.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./Petrifiable.sol\";\n\n\ncontract Autopetrified is Petrifiable {\n    constructor() public {\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\n        // This renders them uninitializable (and unusable without a proxy).\n        petrify();\n    }\n}\n"
    },
    "@aragon/os/contracts/common/Petrifiable.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./Initializable.sol\";\n\n\ncontract Petrifiable is Initializable {\n    // Use block UINT256_MAX (which should be never) as the initializable date\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\n\n    function isPetrified() public view returns (bool) {\n        return getInitializationBlock() == PETRIFIED_BLOCK;\n    }\n\n    /**\n    * @dev Function to be called by top level contract to prevent being initialized.\n    *      Useful for freezing base contracts when they're used behind proxies.\n    */\n    function petrify() internal onlyInit {\n        initializedAt(PETRIFIED_BLOCK);\n    }\n}\n"
    },
    "@aragon/os/contracts/common/Initializable.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./TimeHelpers.sol\";\nimport \"./UnstructuredStorage.sol\";\n\n\ncontract Initializable is TimeHelpers {\n    using UnstructuredStorage for bytes32;\n\n    // keccak256(\"aragonOS.initializable.initializationBlock\")\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\n\n    string private constant ERROR_ALREADY_INITIALIZED = \"INIT_ALREADY_INITIALIZED\";\n    string private constant ERROR_NOT_INITIALIZED = \"INIT_NOT_INITIALIZED\";\n\n    modifier onlyInit {\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\n        _;\n    }\n\n    modifier isInitialized {\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\n        _;\n    }\n\n    /**\n    * @return Block number in which the contract was initialized\n    */\n    function getInitializationBlock() public view returns (uint256) {\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\n    }\n\n    /**\n    * @return Whether the contract has been initialized by the time of the current block\n    */\n    function hasInitialized() public view returns (bool) {\n        uint256 initializationBlock = getInitializationBlock();\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\n    }\n\n    /**\n    * @dev Function to be called by top level contract after initialization has finished.\n    */\n    function initialized() internal onlyInit {\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\n    }\n\n    /**\n    * @dev Function to be called by top level contract after initialization to enable the contract\n    *      at a future block number rather than immediately.\n    */\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\n    }\n}\n"
    },
    "@aragon/os/contracts/common/TimeHelpers.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./Uint256Helpers.sol\";\n\n\ncontract TimeHelpers {\n    using Uint256Helpers for uint256;\n\n    /**\n    * @dev Returns the current block number.\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\n    *      tests.\n    */\n    function getBlockNumber() internal view returns (uint256) {\n        return block.number;\n    }\n\n    /**\n    * @dev Returns the current block number, converted to uint64.\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\n    *      tests.\n    */\n    function getBlockNumber64() internal view returns (uint64) {\n        return getBlockNumber().toUint64();\n    }\n\n    /**\n    * @dev Returns the current timestamp.\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\n    *      tests.\n    */\n    function getTimestamp() internal view returns (uint256) {\n        return block.timestamp; // solium-disable-line security/no-block-members\n    }\n\n    /**\n    * @dev Returns the current timestamp, converted to uint64.\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\n    *      tests.\n    */\n    function getTimestamp64() internal view returns (uint64) {\n        return getTimestamp().toUint64();\n    }\n}\n"
    },
    "@aragon/os/contracts/common/Uint256Helpers.sol": {
      "content": "pragma solidity ^0.4.24;\n\n\nlibrary Uint256Helpers {\n    uint256 private constant MAX_UINT64 = uint64(-1);\n\n    string private constant ERROR_NUMBER_TOO_BIG = \"UINT64_NUMBER_TOO_BIG\";\n\n    function toUint64(uint256 a) internal pure returns (uint64) {\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\n        return uint64(a);\n    }\n}\n"
    },
    "@aragon/os/contracts/common/ConversionHelpers.sol": {
      "content": "pragma solidity ^0.4.24;\n\n\nlibrary ConversionHelpers {\n    string private constant ERROR_IMPROPER_LENGTH = \"CONVERSION_IMPROPER_LENGTH\";\n\n    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\n        // Force cast the uint256[] into a bytes array, by overwriting its length\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\n        // with the input and a new length. The input becomes invalid from this point forward.\n        uint256 byteLength = _input.length * 32;\n        assembly {\n            output := _input\n            mstore(output, byteLength)\n        }\n    }\n\n    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\n        // Force cast the bytes array into a uint256[], by overwriting its length\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\n        // with the input and a new length. The input becomes invalid from this point forward.\n        uint256 intsLength = _input.length / 32;\n        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\n\n        assembly {\n            output := _input\n            mstore(output, intsLength)\n        }\n    }\n}\n"
    },
    "@aragon/os/contracts/common/ReentrancyGuard.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"../common/UnstructuredStorage.sol\";\n\n\ncontract ReentrancyGuard {\n    using UnstructuredStorage for bytes32;\n\n    /* Hardcoded constants to save gas\n    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256(\"aragonOS.reentrancyGuard.mutex\");\n    */\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\n\n    string private constant ERROR_REENTRANT = \"REENTRANCY_REENTRANT_CALL\";\n\n    modifier nonReentrant() {\n        // Ensure mutex is unlocked\n        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\n\n        // Lock mutex before function call\n        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\n\n        // Perform function call\n        _;\n\n        // Unlock mutex after function call\n        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\n    }\n}\n"
    },
    "@aragon/os/contracts/common/VaultRecoverable.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"../lib/token/ERC20.sol\";\nimport \"./EtherTokenConstant.sol\";\nimport \"./IsContract.sol\";\nimport \"./IVaultRecoverable.sol\";\nimport \"./SafeERC20.sol\";\n\n\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\n    using SafeERC20 for ERC20;\n\n    string private constant ERROR_DISALLOWED = \"RECOVER_DISALLOWED\";\n    string private constant ERROR_VAULT_NOT_CONTRACT = \"RECOVER_VAULT_NOT_CONTRACT\";\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \"RECOVER_TOKEN_TRANSFER_FAILED\";\n\n    /**\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\n     *         but in case it does, this function allows one to recover them.\n     * @param _token Token balance to be sent to recovery vault.\n     */\n    function transferToVault(address _token) external {\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\n        address vault = getRecoveryVault();\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\n\n        uint256 balance;\n        if (_token == ETH) {\n            balance = address(this).balance;\n            vault.transfer(balance);\n        } else {\n            ERC20 token = ERC20(_token);\n            balance = token.staticBalanceOf(this);\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\n        }\n\n        emit RecoverToVault(vault, _token, balance);\n    }\n\n    /**\n    * @dev By default deriving from AragonApp makes it recoverable\n    * @param token Token address that would be recovered\n    * @return bool whether the app allows the recovery\n    */\n    function allowRecoverability(address token) public view returns (bool) {\n        return true;\n    }\n\n    // Cast non-implemented interface to be public so we can use it internally\n    function getRecoveryVault() public view returns (address);\n}\n"
    },
    "@aragon/os/contracts/lib/token/ERC20.sol": {
      "content": "// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address _who) public view returns (uint256);\n\n    function allowance(address _owner, address _spender)\n        public view returns (uint256);\n\n    function transfer(address _to, uint256 _value) public returns (bool);\n\n    function approve(address _spender, uint256 _value)\n        public returns (bool);\n\n    function transferFrom(address _from, address _to, uint256 _value)\n        public returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n"
    },
    "@aragon/os/contracts/common/EtherTokenConstant.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\n// contracts where both tokens and ETH are accepted\ncontract EtherTokenConstant {\n    address internal constant ETH = address(0);\n}\n"
    },
    "@aragon/os/contracts/common/IsContract.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ncontract IsContract {\n    /*\n    * NOTE: this should NEVER be used for authentication\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\n    *\n    * This is only intended to be used as a sanity check that an address is actually a contract,\n    * RATHER THAN an address not being a contract.\n    */\n    function isContract(address _target) internal view returns (bool) {\n        if (_target == address(0)) {\n            return false;\n        }\n\n        uint256 size;\n        assembly { size := extcodesize(_target) }\n        return size > 0;\n    }\n}\n"
    },
    "@aragon/os/contracts/common/SafeERC20.sol": {
      "content": "// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\n\npragma solidity ^0.4.24;\n\nimport \"../lib/token/ERC20.sol\";\n\n\nlibrary SafeERC20 {\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\n    // https://github.com/ethereum/solidity/issues/3544\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\n\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \"SAFE_ERC_20_BALANCE_REVERTED\";\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \"SAFE_ERC_20_ALLOWANCE_REVERTED\";\n\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\n        private\n        returns (bool)\n    {\n        bool ret;\n        assembly {\n            let ptr := mload(0x40)    // free memory pointer\n\n            let success := call(\n                gas,                  // forward all gas\n                _addr,                // address\n                0,                    // no value\n                add(_calldata, 0x20), // calldata start\n                mload(_calldata),     // calldata length\n                ptr,                  // write output over free memory\n                0x20                  // uint256 return\n            )\n\n            if gt(success, 0) {\n                // Check number of bytes returned from last function call\n                switch returndatasize\n\n                // No bytes returned: assume success\n                case 0 {\n                    ret := 1\n                }\n\n                // 32 bytes returned: check if non-zero\n                case 0x20 {\n                    // Only return success if returned data was true\n                    // Already have output in ptr\n                    ret := eq(mload(ptr), 1)\n                }\n\n                // Not sure what was returned: don't mark as success\n                default { }\n            }\n        }\n        return ret;\n    }\n\n    function staticInvoke(address _addr, bytes memory _calldata)\n        private\n        view\n        returns (bool, uint256)\n    {\n        bool success;\n        uint256 ret;\n        assembly {\n            let ptr := mload(0x40)    // free memory pointer\n\n            success := staticcall(\n                gas,                  // forward all gas\n                _addr,                // address\n                add(_calldata, 0x20), // calldata start\n                mload(_calldata),     // calldata length\n                ptr,                  // write output over free memory\n                0x20                  // uint256 return\n            )\n\n            if gt(success, 0) {\n                ret := mload(ptr)\n            }\n        }\n        return (success, ret);\n    }\n\n    /**\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\n    *      Note that this makes an external call to the token.\n    */\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\n        bytes memory transferCallData = abi.encodeWithSelector(\n            TRANSFER_SELECTOR,\n            _to,\n            _amount\n        );\n        return invokeAndCheckSuccess(_token, transferCallData);\n    }\n\n    /**\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\n    *      Note that this makes an external call to the token.\n    */\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\n        bytes memory transferFromCallData = abi.encodeWithSelector(\n            _token.transferFrom.selector,\n            _from,\n            _to,\n            _amount\n        );\n        return invokeAndCheckSuccess(_token, transferFromCallData);\n    }\n\n    /**\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\n    *      Note that this makes an external call to the token.\n    */\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\n        bytes memory approveCallData = abi.encodeWithSelector(\n            _token.approve.selector,\n            _spender,\n            _amount\n        );\n        return invokeAndCheckSuccess(_token, approveCallData);\n    }\n\n    /**\n    * @dev Static call into ERC20.balanceOf().\n    * Reverts if the call fails for some reason (should never fail).\n    */\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\n            _token.balanceOf.selector,\n            _owner\n        );\n\n        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\n\n        return tokenBalance;\n    }\n\n    /**\n    * @dev Static call into ERC20.allowance().\n    * Reverts if the call fails for some reason (should never fail).\n    */\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\n        bytes memory allowanceCallData = abi.encodeWithSelector(\n            _token.allowance.selector,\n            _owner,\n            _spender\n        );\n\n        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\n\n        return allowance;\n    }\n}\n"
    },
    "@aragon/os/contracts/evmscript/EVMScriptRunner.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./IEVMScriptExecutor.sol\";\nimport \"./IEVMScriptRegistry.sol\";\n\nimport \"../apps/AppStorage.sol\";\nimport \"../kernel/KernelConstants.sol\";\nimport \"../common/Initializable.sol\";\n\n\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \"EVMRUN_EXECUTOR_UNAVAILABLE\";\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \"EVMRUN_PROTECTED_STATE_MODIFIED\";\n\n    /* This is manually crafted in assembly\n    string private constant ERROR_EXECUTOR_INVALID_RETURN = \"EVMRUN_EXECUTOR_INVALID_RETURN\";\n    */\n\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\n\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\n    }\n\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\n        return IEVMScriptRegistry(registryAddr);\n    }\n\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\n        internal\n        isInitialized\n        protectState\n        returns (bytes)\n    {\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\n\n        bytes4 sig = executor.execScript.selector;\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\n\n        bytes memory output;\n        assembly {\n            let success := delegatecall(\n                gas,                // forward all gas\n                executor,           // address\n                add(data, 0x20),    // calldata start\n                mload(data),        // calldata length\n                0,                  // don't write output (we'll handle this ourselves)\n                0                   // don't write output\n            )\n\n            output := mload(0x40) // free mem ptr get\n\n            switch success\n            case 0 {\n                // If the call errored, forward its full error data\n                returndatacopy(output, 0, returndatasize)\n                revert(output, returndatasize)\n            }\n            default {\n                switch gt(returndatasize, 0x3f)\n                case 0 {\n                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\n                    // revert with \"EVMRUN_EXECUTOR_INVALID_RETURN\"\n                    // See remix: doing a `revert(\"EVMRUN_EXECUTOR_INVALID_RETURN\")` always results in\n                    // this memory layout\n                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\n                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\n                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\n                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\n\n                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\n                }\n                default {\n                    // Copy result\n                    //\n                    // Needs to perform an ABI decode for the expected `bytes` return type of\n                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\n                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\n                    //    [ output length (32 bytes) ]\n                    //    [ output content (N bytes) ]\n                    //\n                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\n                    let copysize := sub(returndatasize, 0x20)\n                    returndatacopy(output, 0x20, copysize)\n\n                    mstore(0x40, add(output, copysize)) // free mem ptr set\n                }\n            }\n        }\n\n        emit ScriptResult(address(executor), _script, _input, output);\n\n        return output;\n    }\n\n    modifier protectState {\n        address preKernel = address(kernel());\n        bytes32 preAppId = appId();\n        _; // exec\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\n    }\n}\n"
    },
    "@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ninterface IEVMScriptExecutor {\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\n    function executorType() external pure returns (bytes32);\n}\n"
    },
    "@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./IEVMScriptExecutor.sol\";\n\n\ncontract EVMScriptRegistryConstants {\n    /* Hardcoded constants to save gas\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\"evmreg\");\n    */\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\n}\n\n\ninterface IEVMScriptRegistry {\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\n    function disableScriptExecutor(uint256 executorId) external;\n\n    // TODO: this should be external\n    // See https://github.com/ethereum/solidity/issues/4832\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\n}\n"
    },
    "@aragon/os/contracts/kernel/KernelConstants.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ncontract KernelAppIds {\n    /* Hardcoded constants to save gas\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\"kernel\");\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\"acl\");\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\"vault\");\n    */\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\n}\n\n\ncontract KernelNamespaceConstants {\n    /* Hardcoded constants to save gas\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\"core\");\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\"base\");\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\"app\");\n    */\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\n}\n"
    },
    "@aragon/os/contracts/common/DepositableStorage.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"./UnstructuredStorage.sol\";\n\n\ncontract DepositableStorage {\n    using UnstructuredStorage for bytes32;\n\n    // keccak256(\"aragonOS.depositableStorage.depositable\")\n    bytes32 internal constant DEPOSITABLE_POSITION = 0x665fd576fbbe6f247aff98f5c94a561e3f71ec2d3c988d56f12d342396c50cea;\n\n    function isDepositable() public view returns (bool) {\n        return DEPOSITABLE_POSITION.getStorageBool();\n    }\n\n    function setDepositable(bool _depositable) internal {\n        DEPOSITABLE_POSITION.setStorageBool(_depositable);\n    }\n}\n"
    },
    "@aragon/os/contracts/common/IForwarder.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ninterface IForwarder {\n    function isForwarder() external pure returns (bool);\n\n    // TODO: this should be external\n    // See https://github.com/ethereum/solidity/issues/4832\n    function canForward(address sender, bytes evmCallScript) public view returns (bool);\n\n    // TODO: this should be external\n    // See https://github.com/ethereum/solidity/issues/4832\n    function forward(bytes evmCallScript) public;\n}\n"
    },
    "@aragon/apps-voting/contracts/Voting.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    GPL-3.0-or-later\n */\n\npragma solidity 0.4.24;\n\nimport \"@aragon/os/contracts/apps/AragonApp.sol\";\nimport \"@aragon/os/contracts/common/IForwarder.sol\";\n\nimport \"@aragon/os/contracts/lib/math/SafeMath.sol\";\nimport \"@aragon/os/contracts/lib/math/SafeMath64.sol\";\n\nimport \"@aragon/apps-shared-minime/contracts/MiniMeToken.sol\";\n\n\ncontract Voting is IForwarder, AragonApp {\n    using SafeMath for uint256;\n    using SafeMath64 for uint64;\n\n    bytes32 public constant CREATE_VOTES_ROLE = keccak256(\"CREATE_VOTES_ROLE\");\n    bytes32 public constant MODIFY_SUPPORT_ROLE = keccak256(\"MODIFY_SUPPORT_ROLE\");\n    bytes32 public constant MODIFY_QUORUM_ROLE = keccak256(\"MODIFY_QUORUM_ROLE\");\n\n    uint64 public constant PCT_BASE = 10 ** 18; // 0% = 0; 1% = 10^16; 100% = 10^18\n\n    string private constant ERROR_NO_VOTE = \"VOTING_NO_VOTE\";\n    string private constant ERROR_INIT_PCTS = \"VOTING_INIT_PCTS\";\n    string private constant ERROR_CHANGE_SUPPORT_PCTS = \"VOTING_CHANGE_SUPPORT_PCTS\";\n    string private constant ERROR_CHANGE_QUORUM_PCTS = \"VOTING_CHANGE_QUORUM_PCTS\";\n    string private constant ERROR_INIT_SUPPORT_TOO_BIG = \"VOTING_INIT_SUPPORT_TOO_BIG\";\n    string private constant ERROR_CHANGE_SUPPORT_TOO_BIG = \"VOTING_CHANGE_SUPP_TOO_BIG\";\n    string private constant ERROR_CAN_NOT_VOTE = \"VOTING_CAN_NOT_VOTE\";\n    string private constant ERROR_CAN_NOT_EXECUTE = \"VOTING_CAN_NOT_EXECUTE\";\n    string private constant ERROR_CAN_NOT_FORWARD = \"VOTING_CAN_NOT_FORWARD\";\n    string private constant ERROR_NO_VOTING_POWER = \"VOTING_NO_VOTING_POWER\";\n\n    enum VoterState { Absent, Yea, Nay }\n\n    struct Vote {\n        bool executed;\n        uint64 startDate;\n        uint64 snapshotBlock;\n        uint64 supportRequiredPct;\n        uint64 minAcceptQuorumPct;\n        uint256 yea;\n        uint256 nay;\n        uint256 votingPower;\n        bytes executionScript;\n        mapping (address => VoterState) voters;\n    }\n\n    MiniMeToken public token;\n    uint64 public supportRequiredPct;\n    uint64 public minAcceptQuorumPct;\n    uint64 public voteTime;\n\n    // We are mimicing an array, we use a mapping instead to make app upgrade more graceful\n    mapping (uint256 => Vote) internal votes;\n    uint256 public votesLength;\n\n    event StartVote(uint256 indexed voteId, address indexed creator, string metadata);\n    event CastVote(uint256 indexed voteId, address indexed voter, bool supports, uint256 stake);\n    event ExecuteVote(uint256 indexed voteId);\n    event ChangeSupportRequired(uint64 supportRequiredPct);\n    event ChangeMinQuorum(uint64 minAcceptQuorumPct);\n\n    modifier voteExists(uint256 _voteId) {\n        require(_voteId < votesLength, ERROR_NO_VOTE);\n        _;\n    }\n\n    /**\n    * @notice Initialize Voting app with `_token.symbol(): string` for governance, minimum support of `@formatPct(_supportRequiredPct)`%, minimum acceptance quorum of `@formatPct(_minAcceptQuorumPct)`%, and a voting duration of `@transformTime(_voteTime)`\n    * @param _token MiniMeToken Address that will be used as governance token\n    * @param _supportRequiredPct Percentage of yeas in casted votes for a vote to succeed (expressed as a percentage of 10^18; eg. 10^16 = 1%, 10^18 = 100%)\n    * @param _minAcceptQuorumPct Percentage of yeas in total possible votes for a vote to succeed (expressed as a percentage of 10^18; eg. 10^16 = 1%, 10^18 = 100%)\n    * @param _voteTime Seconds that a vote will be open for token holders to vote (unless enough yeas or nays have been cast to make an early decision)\n    */\n    function initialize(\n        MiniMeToken _token,\n        uint64 _supportRequiredPct,\n        uint64 _minAcceptQuorumPct,\n        uint64 _voteTime\n    )\n        external\n        onlyInit\n    {\n        initialized();\n\n        require(_minAcceptQuorumPct <= _supportRequiredPct, ERROR_INIT_PCTS);\n        require(_supportRequiredPct < PCT_BASE, ERROR_INIT_SUPPORT_TOO_BIG);\n\n        token = _token;\n        supportRequiredPct = _supportRequiredPct;\n        minAcceptQuorumPct = _minAcceptQuorumPct;\n        voteTime = _voteTime;\n    }\n\n    /**\n    * @notice Change required support to `@formatPct(_supportRequiredPct)`%\n    * @param _supportRequiredPct New required support\n    */\n    function changeSupportRequiredPct(uint64 _supportRequiredPct)\n        external\n        authP(MODIFY_SUPPORT_ROLE, arr(uint256(_supportRequiredPct), uint256(supportRequiredPct)))\n    {\n        require(minAcceptQuorumPct <= _supportRequiredPct, ERROR_CHANGE_SUPPORT_PCTS);\n        require(_supportRequiredPct < PCT_BASE, ERROR_CHANGE_SUPPORT_TOO_BIG);\n        supportRequiredPct = _supportRequiredPct;\n\n        emit ChangeSupportRequired(_supportRequiredPct);\n    }\n\n    /**\n    * @notice Change minimum acceptance quorum to `@formatPct(_minAcceptQuorumPct)`%\n    * @param _minAcceptQuorumPct New acceptance quorum\n    */\n    function changeMinAcceptQuorumPct(uint64 _minAcceptQuorumPct)\n        external\n        authP(MODIFY_QUORUM_ROLE, arr(uint256(_minAcceptQuorumPct), uint256(minAcceptQuorumPct)))\n    {\n        require(_minAcceptQuorumPct <= supportRequiredPct, ERROR_CHANGE_QUORUM_PCTS);\n        minAcceptQuorumPct = _minAcceptQuorumPct;\n\n        emit ChangeMinQuorum(_minAcceptQuorumPct);\n    }\n\n    /**\n    * @notice Create a new vote about \"`_metadata`\"\n    * @param _executionScript EVM script to be executed on approval\n    * @param _metadata Vote metadata\n    * @return voteId Id for newly created vote\n    */\n    function newVote(bytes _executionScript, string _metadata) external auth(CREATE_VOTES_ROLE) returns (uint256 voteId) {\n        return _newVote(_executionScript, _metadata, true, true);\n    }\n\n    /**\n    * @notice Create a new vote about \"`_metadata`\"\n    * @param _executionScript EVM script to be executed on approval\n    * @param _metadata Vote metadata\n    * @param _castVote Whether to also cast newly created vote\n    * @param _executesIfDecided Whether to also immediately execute newly created vote if decided\n    * @return voteId id for newly created vote\n    */\n    function newVote(bytes _executionScript, string _metadata, bool _castVote, bool _executesIfDecided)\n        external\n        auth(CREATE_VOTES_ROLE)\n        returns (uint256 voteId)\n    {\n        return _newVote(_executionScript, _metadata, _castVote, _executesIfDecided);\n    }\n\n    /**\n    * @notice Vote `_supports ? 'yes' : 'no'` in vote #`_voteId`\n    * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\n    *      created via `newVote(),` which requires initialization\n    * @param _voteId Id for vote\n    * @param _supports Whether voter supports the vote\n    * @param _executesIfDecided Whether the vote should execute its action if it becomes decided\n    */\n    function vote(uint256 _voteId, bool _supports, bool _executesIfDecided) external voteExists(_voteId) {\n        require(_canVote(_voteId, msg.sender), ERROR_CAN_NOT_VOTE);\n        _vote(_voteId, _supports, msg.sender, _executesIfDecided);\n    }\n\n    /**\n    * @notice Execute vote #`_voteId`\n    * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\n    *      created via `newVote(),` which requires initialization\n    * @param _voteId Id for vote\n    */\n    function executeVote(uint256 _voteId) external voteExists(_voteId) {\n        _executeVote(_voteId);\n    }\n\n    // Forwarding fns\n\n    function isForwarder() external pure returns (bool) {\n        return true;\n    }\n\n    /**\n    * @notice Creates a vote to execute the desired action, and casts a support vote if possible\n    * @dev IForwarder interface conformance\n    * @param _evmScript Start vote with script\n    */\n    function forward(bytes _evmScript) public {\n        require(canForward(msg.sender, _evmScript), ERROR_CAN_NOT_FORWARD);\n        _newVote(_evmScript, \"\", true, true);\n    }\n\n    function canForward(address _sender, bytes) public view returns (bool) {\n        // Note that `canPerform()` implicitly does an initialization check itself\n        return canPerform(_sender, CREATE_VOTES_ROLE, arr());\n    }\n\n    // Getter fns\n\n    /**\n    * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\n    *      created via `newVote(),` which requires initialization\n    */\n    function canExecute(uint256 _voteId) public view voteExists(_voteId) returns (bool) {\n        return _canExecute(_voteId);\n    }\n\n    /**\n    * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\n    *      created via `newVote(),` which requires initialization\n    */\n    function canVote(uint256 _voteId, address _voter) public view voteExists(_voteId) returns (bool) {\n        return _canVote(_voteId, _voter);\n    }\n\n    function getVote(uint256 _voteId)\n        public\n        view\n        voteExists(_voteId)\n        returns (\n            bool open,\n            bool executed,\n            uint64 startDate,\n            uint64 snapshotBlock,\n            uint64 supportRequired,\n            uint64 minAcceptQuorum,\n            uint256 yea,\n            uint256 nay,\n            uint256 votingPower,\n            bytes script\n        )\n    {\n        Vote storage vote_ = votes[_voteId];\n\n        open = _isVoteOpen(vote_);\n        executed = vote_.executed;\n        startDate = vote_.startDate;\n        snapshotBlock = vote_.snapshotBlock;\n        supportRequired = vote_.supportRequiredPct;\n        minAcceptQuorum = vote_.minAcceptQuorumPct;\n        yea = vote_.yea;\n        nay = vote_.nay;\n        votingPower = vote_.votingPower;\n        script = vote_.executionScript;\n    }\n\n    function getVoterState(uint256 _voteId, address _voter) public view voteExists(_voteId) returns (VoterState) {\n        return votes[_voteId].voters[_voter];\n    }\n\n    // Internal fns\n\n    function _newVote(bytes _executionScript, string _metadata, bool _castVote, bool _executesIfDecided)\n        internal\n        returns (uint256 voteId)\n    {\n        uint64 snapshotBlock = getBlockNumber64() - 1; // avoid double voting in this very block\n        uint256 votingPower = token.totalSupplyAt(snapshotBlock);\n        require(votingPower > 0, ERROR_NO_VOTING_POWER);\n\n        voteId = votesLength++;\n\n        Vote storage vote_ = votes[voteId];\n        vote_.startDate = getTimestamp64();\n        vote_.snapshotBlock = snapshotBlock;\n        vote_.supportRequiredPct = supportRequiredPct;\n        vote_.minAcceptQuorumPct = minAcceptQuorumPct;\n        vote_.votingPower = votingPower;\n        vote_.executionScript = _executionScript;\n\n        emit StartVote(voteId, msg.sender, _metadata);\n\n        if (_castVote && _canVote(voteId, msg.sender)) {\n            _vote(voteId, true, msg.sender, _executesIfDecided);\n        }\n    }\n\n    function _vote(\n        uint256 _voteId,\n        bool _supports,\n        address _voter,\n        bool _executesIfDecided\n    ) internal\n    {\n        Vote storage vote_ = votes[_voteId];\n\n        // This could re-enter, though we can assume the governance token is not malicious\n        uint256 voterStake = token.balanceOfAt(_voter, vote_.snapshotBlock);\n        VoterState state = vote_.voters[_voter];\n\n        // If voter had previously voted, decrease count\n        if (state == VoterState.Yea) {\n            vote_.yea = vote_.yea.sub(voterStake);\n        } else if (state == VoterState.Nay) {\n            vote_.nay = vote_.nay.sub(voterStake);\n        }\n\n        if (_supports) {\n            vote_.yea = vote_.yea.add(voterStake);\n        } else {\n            vote_.nay = vote_.nay.add(voterStake);\n        }\n\n        vote_.voters[_voter] = _supports ? VoterState.Yea : VoterState.Nay;\n\n        emit CastVote(_voteId, _voter, _supports, voterStake);\n\n        if (_executesIfDecided && _canExecute(_voteId)) {\n            // We've already checked if the vote can be executed with `_canExecute()`\n            _unsafeExecuteVote(_voteId);\n        }\n    }\n\n    function _executeVote(uint256 _voteId) internal {\n        require(_canExecute(_voteId), ERROR_CAN_NOT_EXECUTE);\n        _unsafeExecuteVote(_voteId);\n    }\n\n    /**\n    * @dev Unsafe version of _executeVote that assumes you have already checked if the vote can be executed\n    */\n    function _unsafeExecuteVote(uint256 _voteId) internal {\n        Vote storage vote_ = votes[_voteId];\n\n        vote_.executed = true;\n\n        bytes memory input = new bytes(0); // TODO: Consider input for voting scripts\n        runScript(vote_.executionScript, input, new address[](0));\n\n        emit ExecuteVote(_voteId);\n    }\n\n    function _canExecute(uint256 _voteId) internal view returns (bool) {\n        Vote storage vote_ = votes[_voteId];\n\n        if (vote_.executed) {\n            return false;\n        }\n\n        // Voting is already decided\n        if (_isValuePct(vote_.yea, vote_.votingPower, vote_.supportRequiredPct)) {\n            return true;\n        }\n\n        // Vote ended?\n        if (_isVoteOpen(vote_)) {\n            return false;\n        }\n        // Has enough support?\n        uint256 totalVotes = vote_.yea.add(vote_.nay);\n        if (!_isValuePct(vote_.yea, totalVotes, vote_.supportRequiredPct)) {\n            return false;\n        }\n        // Has min quorum?\n        if (!_isValuePct(vote_.yea, vote_.votingPower, vote_.minAcceptQuorumPct)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    function _canVote(uint256 _voteId, address _voter) internal view returns (bool) {\n        Vote storage vote_ = votes[_voteId];\n\n        return _isVoteOpen(vote_) && token.balanceOfAt(_voter, vote_.snapshotBlock) > 0;\n    }\n\n    function _isVoteOpen(Vote storage vote_) internal view returns (bool) {\n        return getTimestamp64() < vote_.startDate.add(voteTime) && !vote_.executed;\n    }\n\n    /**\n    * @dev Calculates whether `_value` is more than a percentage `_pct` of `_total`\n    */\n    function _isValuePct(uint256 _value, uint256 _total, uint256 _pct) internal pure returns (bool) {\n        if (_total == 0) {\n            return false;\n        }\n\n        uint256 computedPct = _value.mul(PCT_BASE) / _total;\n        return computedPct > _pct;\n    }\n}\n"
    },
    "@aragon/os/contracts/lib/math/SafeMath.sol": {
      "content": "// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\n// Adapted to use pragma ^0.4.24 and satisfy our linter rules\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    string private constant ERROR_ADD_OVERFLOW = \"MATH_ADD_OVERFLOW\";\n    string private constant ERROR_SUB_UNDERFLOW = \"MATH_SUB_UNDERFLOW\";\n    string private constant ERROR_MUL_OVERFLOW = \"MATH_MUL_OVERFLOW\";\n    string private constant ERROR_DIV_ZERO = \"MATH_DIV_ZERO\";\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n\n        uint256 c = _a * _b;\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\n        uint256 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\n        uint256 c = _a - _b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 c = _a + _b;\n        require(c >= _a, ERROR_ADD_OVERFLOW);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, ERROR_DIV_ZERO);\n        return a % b;\n    }\n}\n"
    },
    "@aragon/os/contracts/lib/math/SafeMath64.sol": {
      "content": "// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\n// Adapted for uint64, pragma ^0.4.24, and satisfying our linter rules\n// Also optimized the mul() implementation, see https://github.com/aragon/aragonOS/pull/417\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath64\n * @dev Math operations for uint64 with safety checks that revert on error\n */\nlibrary SafeMath64 {\n    string private constant ERROR_ADD_OVERFLOW = \"MATH64_ADD_OVERFLOW\";\n    string private constant ERROR_SUB_UNDERFLOW = \"MATH64_SUB_UNDERFLOW\";\n    string private constant ERROR_MUL_OVERFLOW = \"MATH64_MUL_OVERFLOW\";\n    string private constant ERROR_DIV_ZERO = \"MATH64_DIV_ZERO\";\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint64 _a, uint64 _b) internal pure returns (uint64) {\n        uint256 c = uint256(_a) * uint256(_b);\n        require(c < 0x010000000000000000, ERROR_MUL_OVERFLOW); // 2**64 (less gas this way)\n\n        return uint64(c);\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint64 _a, uint64 _b) internal pure returns (uint64) {\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\n        uint64 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint64 _a, uint64 _b) internal pure returns (uint64) {\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\n        uint64 c = _a - _b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint64 _a, uint64 _b) internal pure returns (uint64) {\n        uint64 c = _a + _b;\n        require(c >= _a, ERROR_ADD_OVERFLOW);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\n        require(b != 0, ERROR_DIV_ZERO);\n        return a % b;\n    }\n}\n"
    },
    "@aragon/apps-payroll/contracts/Payroll.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"@aragon/os/contracts/apps/AragonApp.sol\";\nimport \"@aragon/os/contracts/common/EtherTokenConstant.sol\";\nimport \"@aragon/os/contracts/common/IsContract.sol\";\nimport \"@aragon/os/contracts/common/IForwarder.sol\";\n\nimport \"@aragon/os/contracts/lib/math/SafeMath.sol\";\nimport \"@aragon/os/contracts/lib/math/SafeMath64.sol\";\n\nimport \"@aragon/ppf-contracts/contracts/IFeed.sol\";\nimport \"@aragon/apps-finance/contracts/Finance.sol\";\n\n\n/**\n * @title Payroll in multiple currencies\n */\ncontract Payroll is EtherTokenConstant, IForwarder, IsContract, AragonApp {\n    using SafeMath for uint256;\n    using SafeMath64 for uint64;\n\n    /* Hardcoded constants to save gas\n    * bytes32 constant public ADD_EMPLOYEE_ROLE = keccak256(\"ADD_EMPLOYEE_ROLE\");\n    * bytes32 constant public TERMINATE_EMPLOYEE_ROLE = keccak256(\"TERMINATE_EMPLOYEE_ROLE\");\n    * bytes32 constant public SET_EMPLOYEE_SALARY_ROLE = keccak256(\"SET_EMPLOYEE_SALARY_ROLE\");\n    * bytes32 constant public ADD_BONUS_ROLE = keccak256(\"ADD_BONUS_ROLE\");\n    * bytes32 constant public ADD_REIMBURSEMENT_ROLE = keccak256(\"ADD_REIMBURSEMENT_ROLE\");\n    * bytes32 constant public MANAGE_ALLOWED_TOKENS_ROLE = keccak256(\"MANAGE_ALLOWED_TOKENS_ROLE\");\n    * bytes32 constant public MODIFY_PRICE_FEED_ROLE = keccak256(\"MODIFY_PRICE_FEED_ROLE\");\n    * bytes32 constant public MODIFY_RATE_EXPIRY_ROLE = keccak256(\"MODIFY_RATE_EXPIRY_ROLE\");\n    */\n\n    bytes32 constant public ADD_EMPLOYEE_ROLE = 0x9ecdc3c63716b45d0756eece5fe1614cae1889ec5a1ce62b3127c1f1f1615d6e;\n    bytes32 constant public TERMINATE_EMPLOYEE_ROLE = 0x69c67f914d12b6440e7ddf01961214818d9158fbcb19211e0ff42800fdea9242;\n    bytes32 constant public SET_EMPLOYEE_SALARY_ROLE = 0xea9ac65018da2421cf419ee2152371440c08267a193a33ccc1e39545d197e44d;\n    bytes32 constant public ADD_BONUS_ROLE = 0xceca7e2f5eb749a87aaf68f3f76d6b9251aa2f4600f13f93c5a4adf7a72df4ae;\n    bytes32 constant public ADD_REIMBURSEMENT_ROLE = 0x90698b9d54427f1e41636025017309bdb1b55320da960c8845bab0a504b01a16;\n    bytes32 constant public MANAGE_ALLOWED_TOKENS_ROLE = 0x0be34987c45700ee3fae8c55e270418ba903337decc6bacb1879504be9331c06;\n    bytes32 constant public MODIFY_PRICE_FEED_ROLE = 0x74350efbcba8b85341c5bbf70cc34e2a585fc1463524773a12fa0a71d4eb9302;\n    bytes32 constant public MODIFY_RATE_EXPIRY_ROLE = 0x79fe989a8899060dfbdabb174ebb96616fa9f1d9dadd739f8d814cbab452404e;\n\n    uint256 internal constant MAX_ALLOWED_TOKENS = 20; // prevent OOG issues with `payday()`\n    uint64 internal constant MIN_RATE_EXPIRY = uint64(1 minutes); // 1 min == ~4 block window to mine both a price feed update and a payout\n\n    uint256 internal constant MAX_UINT256 = uint256(-1);\n    uint64 internal constant MAX_UINT64 = uint64(-1);\n\n    string private constant ERROR_EMPLOYEE_DOESNT_EXIST = \"PAYROLL_EMPLOYEE_DOESNT_EXIST\";\n    string private constant ERROR_NON_ACTIVE_EMPLOYEE = \"PAYROLL_NON_ACTIVE_EMPLOYEE\";\n    string private constant ERROR_SENDER_DOES_NOT_MATCH = \"PAYROLL_SENDER_DOES_NOT_MATCH\";\n    string private constant ERROR_FINANCE_NOT_CONTRACT = \"PAYROLL_FINANCE_NOT_CONTRACT\";\n    string private constant ERROR_TOKEN_ALREADY_SET = \"PAYROLL_TOKEN_ALREADY_SET\";\n    string private constant ERROR_MAX_ALLOWED_TOKENS = \"PAYROLL_MAX_ALLOWED_TOKENS\";\n    string private constant ERROR_MIN_RATES_MISMATCH = \"PAYROLL_MIN_RATES_MISMATCH\";\n    string private constant ERROR_TOKEN_ALLOCATION_MISMATCH = \"PAYROLL_TOKEN_ALLOCATION_MISMATCH\";\n    string private constant ERROR_NOT_ALLOWED_TOKEN = \"PAYROLL_NOT_ALLOWED_TOKEN\";\n    string private constant ERROR_DISTRIBUTION_NOT_FULL = \"PAYROLL_DISTRIBUTION_NOT_FULL\";\n    string private constant ERROR_INVALID_PAYMENT_TYPE = \"PAYROLL_INVALID_PAYMENT_TYPE\";\n    string private constant ERROR_NOTHING_PAID = \"PAYROLL_NOTHING_PAID\";\n    string private constant ERROR_CAN_NOT_FORWARD = \"PAYROLL_CAN_NOT_FORWARD\";\n    string private constant ERROR_EMPLOYEE_NULL_ADDRESS = \"PAYROLL_EMPLOYEE_NULL_ADDRESS\";\n    string private constant ERROR_EMPLOYEE_ALREADY_EXIST = \"PAYROLL_EMPLOYEE_ALREADY_EXIST\";\n    string private constant ERROR_FEED_NOT_CONTRACT = \"PAYROLL_FEED_NOT_CONTRACT\";\n    string private constant ERROR_EXPIRY_TIME_TOO_SHORT = \"PAYROLL_EXPIRY_TIME_TOO_SHORT\";\n    string private constant ERROR_PAST_TERMINATION_DATE = \"PAYROLL_PAST_TERMINATION_DATE\";\n    string private constant ERROR_EXCHANGE_RATE_TOO_LOW = \"PAYROLL_EXCHANGE_RATE_TOO_LOW\";\n    string private constant ERROR_LAST_PAYROLL_DATE_TOO_BIG = \"PAYROLL_LAST_DATE_TOO_BIG\";\n    string private constant ERROR_INVALID_REQUESTED_AMOUNT = \"PAYROLL_INVALID_REQUESTED_AMT\";\n\n    enum PaymentType { Payroll, Reimbursement, Bonus }\n\n    struct Employee {\n        address accountAddress; // unique, but can be changed over time\n        uint256 denominationTokenSalary; // salary per second in denomination Token\n        uint256 accruedSalary; // keep track of any leftover accrued salary when changing salaries\n        uint256 bonus;\n        uint256 reimbursements;\n        uint64 lastPayroll;\n        uint64 endDate;\n        address[] allocationTokenAddresses;\n        mapping(address => uint256) allocationTokens;\n    }\n\n    Finance public finance;\n    address public denominationToken;\n    IFeed public feed;\n    uint64 public rateExpiryTime;\n\n    // Employees start at index 1, to allow us to use employees[0] to check for non-existent employees\n    uint256 public nextEmployee;\n    mapping(uint256 => Employee) internal employees;     // employee ID -> employee\n    mapping(address => uint256) internal employeeIds;    // employee address -> employee ID\n\n    mapping(address => bool) internal allowedTokens;\n\n    event AddEmployee(\n        uint256 indexed employeeId,\n        address indexed accountAddress,\n        uint256 initialDenominationSalary,\n        uint64 startDate,\n        string role\n    );\n    event TerminateEmployee(uint256 indexed employeeId, uint64 endDate);\n    event SetEmployeeSalary(uint256 indexed employeeId, uint256 denominationSalary);\n    event AddEmployeeAccruedSalary(uint256 indexed employeeId, uint256 amount);\n    event AddEmployeeBonus(uint256 indexed employeeId, uint256 amount);\n    event AddEmployeeReimbursement(uint256 indexed employeeId, uint256 amount);\n    event ChangeAddressByEmployee(uint256 indexed employeeId, address indexed newAccountAddress, address indexed oldAccountAddress);\n    event DetermineAllocation(uint256 indexed employeeId);\n    event SendPayment(\n        uint256 indexed employeeId,\n        address indexed accountAddress,\n        address indexed token,\n        uint256 amount,\n        uint256 exchangeRate,\n        string paymentReference\n    );\n    event SetAllowedToken(address indexed token, bool allowed);\n    event SetPriceFeed(address indexed feed);\n    event SetRateExpiryTime(uint64 time);\n\n    // Check employee exists by ID\n    modifier employeeIdExists(uint256 _employeeId) {\n        require(_employeeExists(_employeeId), ERROR_EMPLOYEE_DOESNT_EXIST);\n        _;\n    }\n\n    // Check employee exists and is still active\n    modifier employeeActive(uint256 _employeeId) {\n        // No need to check for existence as _isEmployeeIdActive() is false for non-existent employees\n        require(_isEmployeeIdActive(_employeeId), ERROR_NON_ACTIVE_EMPLOYEE);\n        _;\n    }\n\n    // Check sender matches an existing employee\n    modifier employeeMatches {\n        require(employees[employeeIds[msg.sender]].accountAddress == msg.sender, ERROR_SENDER_DOES_NOT_MATCH);\n        _;\n    }\n\n    /**\n     * @notice Initialize Payroll app for Finance at `_finance` and price feed at `_priceFeed`, setting denomination token to `_token` and exchange rate expiry time to `@transformTime(_rateExpiryTime)`\n     * @dev Note that we do not require _denominationToken to be a contract, as it may be a \"fake\"\n     *      address used by the price feed to denominate fiat currencies\n     * @param _finance Address of the Finance app this Payroll app will rely on for payments (non-changeable)\n     * @param _denominationToken Address of the denomination token used for salary accounting\n     * @param _priceFeed Address of the price feed\n     * @param _rateExpiryTime Acceptable expiry time in seconds for the price feed's exchange rates\n     */\n    function initialize(Finance _finance, address _denominationToken, IFeed _priceFeed, uint64 _rateExpiryTime) external onlyInit {\n        initialized();\n\n        require(isContract(_finance), ERROR_FINANCE_NOT_CONTRACT);\n        finance = _finance;\n\n        denominationToken = _denominationToken;\n        _setPriceFeed(_priceFeed);\n        _setRateExpiryTime(_rateExpiryTime);\n\n        // Employees start at index 1, to allow us to use employees[0] to check for non-existent employees\n        nextEmployee = 1;\n    }\n\n    /**\n     * @notice `_allowed ? 'Add' : 'Remove'` `_token.symbol(): string` `_allowed ? 'to' : 'from'` the set of allowed tokens\n     * @param _token Address of the token to be added or removed from the list of allowed tokens for payments\n     * @param _allowed Boolean to tell whether the given token should be added or removed from the list\n     */\n    function setAllowedToken(address _token, bool _allowed) external authP(MANAGE_ALLOWED_TOKENS_ROLE, arr(_token)) {\n        require(allowedTokens[_token] != _allowed, ERROR_TOKEN_ALREADY_SET);\n        allowedTokens[_token] = _allowed;\n        emit SetAllowedToken(_token, _allowed);\n    }\n\n    /**\n     * @notice Set the price feed for exchange rates to `_feed`\n     * @param _feed Address of the new price feed instance\n     */\n    function setPriceFeed(IFeed _feed) external authP(MODIFY_PRICE_FEED_ROLE, arr(_feed, feed)) {\n        _setPriceFeed(_feed);\n    }\n\n    /**\n     * @notice Set the acceptable expiry time for the price feed's exchange rates to `@transformTime(_time)`\n     * @dev Exchange rates older than the given value won't be accepted for payments and will cause payouts to revert\n     * @param _time The expiration time in seconds for exchange rates\n     */\n    function setRateExpiryTime(uint64 _time) external authP(MODIFY_RATE_EXPIRY_ROLE, arr(uint256(_time), uint256(rateExpiryTime))) {\n        _setRateExpiryTime(_time);\n    }\n\n    /**\n     * @notice Add employee with address `_accountAddress` to payroll with an salary of `_initialDenominationSalary` per second, starting on `@formatDate(_startDate)`\n     * @param _accountAddress Employee's address to receive payroll\n     * @param _initialDenominationSalary Employee's salary, per second in denomination token\n     * @param _startDate Employee's starting timestamp in seconds (it actually sets their initial lastPayroll value)\n     * @param _role Employee's role\n     */\n    function addEmployee(address _accountAddress, uint256 _initialDenominationSalary, uint64 _startDate, string _role)\n        external\n        authP(ADD_EMPLOYEE_ROLE, arr(_accountAddress, _initialDenominationSalary, uint256(_startDate)))\n    {\n        _addEmployee(_accountAddress, _initialDenominationSalary, _startDate, _role);\n    }\n\n    /**\n     * @notice Add `_amount` to bonus for employee #`_employeeId`\n     * @param _employeeId Employee's identifier\n     * @param _amount Amount to be added to the employee's bonuses in denomination token\n     */\n    function addBonus(uint256 _employeeId, uint256 _amount)\n        external\n        authP(ADD_BONUS_ROLE, arr(_employeeId, _amount))\n        employeeActive(_employeeId)\n    {\n        _addBonus(_employeeId, _amount);\n    }\n\n    /**\n     * @notice Add `_amount` to reimbursements for employee #`_employeeId`\n     * @param _employeeId Employee's identifier\n     * @param _amount Amount to be added to the employee's reimbursements in denomination token\n     */\n    function addReimbursement(uint256 _employeeId, uint256 _amount)\n        external\n        authP(ADD_REIMBURSEMENT_ROLE, arr(_employeeId, _amount))\n        employeeActive(_employeeId)\n    {\n        _addReimbursement(_employeeId, _amount);\n    }\n\n    /**\n     * @notice Set employee #`_employeeId`'s salary to `_denominationSalary` per second\n     * @dev This reverts if either the employee's owed salary or accrued salary overflows, to avoid\n     *      losing any accrued salary for an employee due to the employer changing their salary.\n     * @param _employeeId Employee's identifier\n     * @param _denominationSalary Employee's new salary, per second in denomination token\n     */\n    function setEmployeeSalary(uint256 _employeeId, uint256 _denominationSalary)\n        external\n        authP(SET_EMPLOYEE_SALARY_ROLE, arr(_employeeId, _denominationSalary, employees[_employeeId].denominationTokenSalary))\n        employeeActive(_employeeId)\n    {\n        Employee storage employee = employees[_employeeId];\n\n        // Accrue employee's owed salary; don't cap to revert on overflow\n        uint256 owed = _getOwedSalarySinceLastPayroll(employee, false);\n        _addAccruedSalary(_employeeId, owed);\n\n        // Update employee to track the new salary and payment date\n        employee.lastPayroll = getTimestamp64();\n        employee.denominationTokenSalary = _denominationSalary;\n\n        emit SetEmployeeSalary(_employeeId, _denominationSalary);\n    }\n\n    /**\n     * @notice Terminate employee #`_employeeId` on `@formatDate(_endDate)`\n     * @param _employeeId Employee's identifier\n     * @param _endDate Termination timestamp in seconds\n     */\n    function terminateEmployee(uint256 _employeeId, uint64 _endDate)\n        external\n        authP(TERMINATE_EMPLOYEE_ROLE, arr(_employeeId, uint256(_endDate)))\n        employeeActive(_employeeId)\n    {\n        _terminateEmployee(_employeeId, _endDate);\n    }\n\n    /**\n     * @notice Change your employee account address to `_newAccountAddress`\n     * @dev Initialization check is implicitly provided by `employeeMatches` as new employees can\n     *      only be added via `addEmployee(),` which requires initialization.\n     *      As the employee is allowed to call this, we enforce non-reentrancy.\n     * @param _newAccountAddress New address to receive payments for the requesting employee\n     */\n    function changeAddressByEmployee(address _newAccountAddress) external employeeMatches nonReentrant {\n        uint256 employeeId = employeeIds[msg.sender];\n        address oldAddress = employees[employeeId].accountAddress;\n\n        _setEmployeeAddress(employeeId, _newAccountAddress);\n        // Don't delete the old address until after setting the new address to check that the\n        // employee specified a new address\n        delete employeeIds[oldAddress];\n\n        emit ChangeAddressByEmployee(employeeId, _newAccountAddress, oldAddress);\n    }\n\n    /**\n     * @notice Set the token distribution for your payments\n     * @dev Initialization check is implicitly provided by `employeeMatches` as new employees can\n     *      only be added via `addEmployee(),` which requires initialization.\n     *      As the employee is allowed to call this, we enforce non-reentrancy.\n     * @param _tokens Array of token addresses; they must belong to the list of allowed tokens\n     * @param _distribution Array with each token's corresponding proportions (must be integers summing to 100)\n     */\n    function determineAllocation(address[] _tokens, uint256[] _distribution) external employeeMatches nonReentrant {\n        // Check array lengthes match\n        require(_tokens.length <= MAX_ALLOWED_TOKENS, ERROR_MAX_ALLOWED_TOKENS);\n        require(_tokens.length == _distribution.length, ERROR_TOKEN_ALLOCATION_MISMATCH);\n\n        uint256 employeeId = employeeIds[msg.sender];\n        Employee storage employee = employees[employeeId];\n\n        // Delete previous token allocations\n        address[] memory previousAllowedTokenAddresses = employee.allocationTokenAddresses;\n        for (uint256 j = 0; j < previousAllowedTokenAddresses.length; j++) {\n            delete employee.allocationTokens[previousAllowedTokenAddresses[j]];\n        }\n        delete employee.allocationTokenAddresses;\n\n        // Set distributions only if given tokens are allowed\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            employee.allocationTokenAddresses.push(_tokens[i]);\n            employee.allocationTokens[_tokens[i]] = _distribution[i];\n        }\n\n        _ensureEmployeeTokenAllocationsIsValid(employee);\n        emit DetermineAllocation(employeeId);\n    }\n\n    /**\n     * @notice Request your `_type == 0 ? 'salary' : _type == 1 ? 'reimbursements' : 'bonus'`\n     * @dev Reverts if no payments were made.\n     *      Initialization check is implicitly provided by `employeeMatches` as new employees can\n     *      only be added via `addEmployee(),` which requires initialization.\n     *      As the employee is allowed to call this, we enforce non-reentrancy.\n     * @param _type Payment type being requested (Payroll, Reimbursement or Bonus)\n     * @param _requestedAmount Requested amount to pay for the payment type. Must be less than or equal to total owed amount for the payment type, or zero to request all.\n     * @param _minRates Array of employee's minimum acceptable rates for their allowed payment tokens\n     */\n    function payday(PaymentType _type, uint256 _requestedAmount, uint256[] _minRates) external employeeMatches nonReentrant {\n        uint256 paymentAmount;\n        uint256 employeeId = employeeIds[msg.sender];\n        Employee storage employee = employees[employeeId];\n        _ensureEmployeeTokenAllocationsIsValid(employee);\n        require(_minRates.length == 0 || _minRates.length == employee.allocationTokenAddresses.length, ERROR_MIN_RATES_MISMATCH);\n\n        // Do internal employee accounting\n        if (_type == PaymentType.Payroll) {\n            // Salary is capped here to avoid reverting at this point if it becomes too big\n            // (so employees aren't DDOSed if their salaries get too large)\n            // If we do use a capped value, the employee's lastPayroll date will be adjusted accordingly\n            uint256 totalOwedSalary = _getTotalOwedCappedSalary(employee);\n            paymentAmount = _ensurePaymentAmount(totalOwedSalary, _requestedAmount);\n            _updateEmployeeAccountingBasedOnPaidSalary(employee, paymentAmount);\n        } else if (_type == PaymentType.Reimbursement) {\n            uint256 owedReimbursements = employee.reimbursements;\n            paymentAmount = _ensurePaymentAmount(owedReimbursements, _requestedAmount);\n            employee.reimbursements = owedReimbursements.sub(paymentAmount);\n        } else if (_type == PaymentType.Bonus) {\n            uint256 owedBonusAmount = employee.bonus;\n            paymentAmount = _ensurePaymentAmount(owedBonusAmount, _requestedAmount);\n            employee.bonus = owedBonusAmount.sub(paymentAmount);\n        } else {\n            revert(ERROR_INVALID_PAYMENT_TYPE);\n        }\n\n        // Actually transfer the owed funds\n        require(_transferTokensAmount(employeeId, _type, paymentAmount, _minRates), ERROR_NOTHING_PAID);\n        _removeEmployeeIfTerminatedAndPaidOut(employeeId);\n    }\n\n    // Forwarding fns\n\n    /**\n     * @dev IForwarder interface conformance. Tells whether the Payroll app is a forwarder or not.\n     * @return Always true\n     */\n    function isForwarder() external pure returns (bool) {\n        return true;\n    }\n\n    /**\n     * @notice Execute desired action as an active employee\n     * @dev IForwarder interface conformance. Allows active employees to run EVMScripts in the context of the Payroll app.\n     * @param _evmScript Script being executed\n     */\n    function forward(bytes _evmScript) public {\n        require(canForward(msg.sender, _evmScript), ERROR_CAN_NOT_FORWARD);\n        bytes memory input = new bytes(0); // TODO: Consider input for this\n\n        // Add the Finance app to the blacklist to disallow employees from executing actions on the\n        // Finance app from Payroll's context (since Payroll requires permissions on Finance)\n        address[] memory blacklist = new address[](1);\n        blacklist[0] = address(finance);\n\n        runScript(_evmScript, input, blacklist);\n    }\n\n    /**\n     * @dev IForwarder interface conformance. Tells whether a given address can forward actions or not.\n     * @param _sender Address of the account intending to forward an action\n     * @return True if the given address is an active employee, false otherwise\n     */\n    function canForward(address _sender, bytes) public view returns (bool) {\n        return _isEmployeeIdActive(employeeIds[_sender]);\n    }\n\n    // Getter fns\n\n    /**\n     * @dev Return employee's identifier by their account address\n     * @param _accountAddress Employee's address to receive payments\n     * @return Employee's identifier\n     */\n    function getEmployeeIdByAddress(address _accountAddress) public view returns (uint256) {\n        require(employeeIds[_accountAddress] != uint256(0), ERROR_EMPLOYEE_DOESNT_EXIST);\n        return employeeIds[_accountAddress];\n    }\n\n    /**\n     * @dev Return all information for employee by their ID\n     * @param _employeeId Employee's identifier\n     * @return Employee's address to receive payments\n     * @return Employee's salary, per second in denomination token\n     * @return Employee's accrued salary\n     * @return Employee's bonus amount\n     * @return Employee's reimbursements amount\n     * @return Employee's last payment date\n     * @return Employee's termination date (max uint64 if none)\n     * @return Employee's allowed payment tokens\n     */\n    function getEmployee(uint256 _employeeId)\n        public\n        view\n        employeeIdExists(_employeeId)\n        returns (\n            address accountAddress,\n            uint256 denominationSalary,\n            uint256 accruedSalary,\n            uint256 bonus,\n            uint256 reimbursements,\n            uint64 lastPayroll,\n            uint64 endDate,\n            address[] allocationTokens\n        )\n    {\n        Employee storage employee = employees[_employeeId];\n\n        accountAddress = employee.accountAddress;\n        denominationSalary = employee.denominationTokenSalary;\n        accruedSalary = employee.accruedSalary;\n        bonus = employee.bonus;\n        reimbursements = employee.reimbursements;\n        lastPayroll = employee.lastPayroll;\n        endDate = employee.endDate;\n        allocationTokens = employee.allocationTokenAddresses;\n    }\n\n    /**\n     * @dev Get owed salary since last payroll for an employee. It will take into account the accrued salary as well.\n     *      The result will be capped to max uint256 to avoid having an overflow.\n     * @return Employee's total owed salary: current owed payroll since the last payroll date, plus the accrued salary.\n     */\n    function getTotalOwedSalary(uint256 _employeeId) public view employeeIdExists(_employeeId) returns (uint256) {\n        return _getTotalOwedCappedSalary(employees[_employeeId]);\n    }\n\n    /**\n     * @dev Get an employee's payment allocation for a token\n     * @param _employeeId Employee's identifier\n     * @param _token Token to query the payment allocation for\n     * @return Employee's payment allocation for the token being queried\n     */\n    function getAllocation(uint256 _employeeId, address _token) public view employeeIdExists(_employeeId) returns (uint256) {\n        return employees[_employeeId].allocationTokens[_token];\n    }\n\n    /**\n     * @dev Check if a token is allowed to be used for payments\n     * @param _token Address of the token to be checked\n     * @return True if the given token is allowed, false otherwise\n     */\n    function isTokenAllowed(address _token) public view isInitialized returns (bool) {\n        return allowedTokens[_token];\n    }\n\n    // Internal fns\n\n    /**\n     * @dev Set the price feed used for exchange rates\n     * @param _feed Address of the new price feed instance\n     */\n    function _setPriceFeed(IFeed _feed) internal {\n        require(isContract(_feed), ERROR_FEED_NOT_CONTRACT);\n        feed = _feed;\n        emit SetPriceFeed(feed);\n    }\n\n    /**\n     * @dev Set the exchange rate expiry time in seconds.\n     *      Exchange rates older than the given value won't be accepted for payments and will cause\n     *      payouts to revert.\n     * @param _time The expiration time in seconds for exchange rates\n     */\n    function _setRateExpiryTime(uint64 _time) internal {\n        // Require a sane minimum for the rate expiry time\n        require(_time >= MIN_RATE_EXPIRY, ERROR_EXPIRY_TIME_TOO_SHORT);\n        rateExpiryTime = _time;\n        emit SetRateExpiryTime(rateExpiryTime);\n    }\n\n    /**\n     * @dev Add a new employee to Payroll\n     * @param _accountAddress Employee's address to receive payroll\n     * @param _initialDenominationSalary Employee's salary, per second in denomination token\n     * @param _startDate Employee's starting timestamp in seconds\n     * @param _role Employee's role\n     */\n    function _addEmployee(address _accountAddress, uint256 _initialDenominationSalary, uint64 _startDate, string _role) internal {\n        uint256 employeeId = nextEmployee++;\n\n        _setEmployeeAddress(employeeId, _accountAddress);\n\n        Employee storage employee = employees[employeeId];\n        employee.denominationTokenSalary = _initialDenominationSalary;\n        employee.lastPayroll = _startDate;\n        employee.endDate = MAX_UINT64;\n\n        emit AddEmployee(employeeId, _accountAddress, _initialDenominationSalary, _startDate, _role);\n    }\n\n    /**\n     * @dev Add amount to an employee's bonuses\n     * @param _employeeId Employee's identifier\n     * @param _amount Amount be added to the employee's bonuses in denomination token\n     */\n    function _addBonus(uint256 _employeeId, uint256 _amount) internal {\n        Employee storage employee = employees[_employeeId];\n        employee.bonus = employee.bonus.add(_amount);\n        emit AddEmployeeBonus(_employeeId, _amount);\n    }\n\n    /**\n     * @dev Add amount to an employee's reimbursements\n     * @param _employeeId Employee's identifier\n     * @param _amount Amount be added to the employee's reimbursements in denomination token\n     */\n    function _addReimbursement(uint256 _employeeId, uint256 _amount) internal {\n        Employee storage employee = employees[_employeeId];\n        employee.reimbursements = employee.reimbursements.add(_amount);\n        emit AddEmployeeReimbursement(_employeeId, _amount);\n    }\n\n    /**\n     * @dev Add amount to an employee's accrued salary\n     * @param _employeeId Employee's identifier\n     * @param _amount Amount be added to the employee's accrued salary in denomination token\n     */\n    function _addAccruedSalary(uint256 _employeeId, uint256 _amount) internal {\n        Employee storage employee = employees[_employeeId];\n        employee.accruedSalary = employee.accruedSalary.add(_amount);\n        emit AddEmployeeAccruedSalary(_employeeId, _amount);\n    }\n\n    /**\n     * @dev Set an employee's account address\n     * @param _employeeId Employee's identifier\n     * @param _accountAddress Employee's address to receive payroll\n     */\n    function _setEmployeeAddress(uint256 _employeeId, address _accountAddress) internal {\n        // Check address is non-null\n        require(_accountAddress != address(0), ERROR_EMPLOYEE_NULL_ADDRESS);\n        // Check address isn't already being used\n        require(employeeIds[_accountAddress] == uint256(0), ERROR_EMPLOYEE_ALREADY_EXIST);\n\n        employees[_employeeId].accountAddress = _accountAddress;\n\n        // Create IDs mapping\n        employeeIds[_accountAddress] = _employeeId;\n    }\n\n    /**\n     * @dev Terminate employee on end date\n     * @param _employeeId Employee's identifier\n     * @param _endDate Termination timestamp in seconds\n     */\n    function _terminateEmployee(uint256 _employeeId, uint64 _endDate) internal {\n        // Prevent past termination dates\n        require(_endDate >= getTimestamp64(), ERROR_PAST_TERMINATION_DATE);\n        employees[_employeeId].endDate = _endDate;\n        emit TerminateEmployee(_employeeId, _endDate);\n    }\n\n    /**\n     * @dev Loop over allowed tokens to send requested amount to the employee in their desired allocation\n     * @param _employeeId Employee's identifier\n     * @param _totalAmount Total amount to be transferred to the employee distributed in accordance to the employee's token allocation.\n     * @param _type Payment type being transferred (Payroll, Reimbursement or Bonus)\n     * @param _minRates Array of employee's minimum acceptable rates for their allowed payment tokens\n     * @return True if there was at least one token transfer\n     */\n    function _transferTokensAmount(uint256 _employeeId, PaymentType _type, uint256 _totalAmount, uint256[] _minRates) internal returns (bool somethingPaid) {\n        if (_totalAmount == 0) {\n            return false;\n        }\n\n        Employee storage employee = employees[_employeeId];\n        address employeeAddress = employee.accountAddress;\n        string memory paymentReference = _paymentReferenceFor(_type);\n\n        address[] storage allocationTokenAddresses = employee.allocationTokenAddresses;\n        for (uint256 i = 0; i < allocationTokenAddresses.length; i++) {\n            address token = allocationTokenAddresses[i];\n            uint256 tokenAllocation = employee.allocationTokens[token];\n            if (tokenAllocation != uint256(0)) {\n                // Get the exchange rate for the payout token in denomination token,\n                // as we do accounting in denomination tokens\n                uint256 exchangeRate = _getExchangeRateInDenominationToken(token);\n                require(_minRates.length > 0 ? exchangeRate >= _minRates[i] : exchangeRate > 0, ERROR_EXCHANGE_RATE_TOO_LOW);\n\n                // Convert amount (in denomination tokens) to payout token and apply allocation\n                uint256 tokenAmount = _totalAmount.mul(exchangeRate).mul(tokenAllocation);\n                // Divide by 100 for the allocation percentage and by the exchange rate precision\n                tokenAmount = tokenAmount.div(100).div(feed.ratePrecision());\n\n                // Finance reverts if the payment wasn't possible\n                finance.newImmediatePayment(token, employeeAddress, tokenAmount, paymentReference);\n                emit SendPayment(_employeeId, employeeAddress, token, tokenAmount, exchangeRate, paymentReference);\n                somethingPaid = true;\n            }\n        }\n    }\n\n    /**\n     * @dev Remove employee if there are no owed funds and employee's end date has been reached\n     * @param _employeeId Employee's identifier\n     */\n    function _removeEmployeeIfTerminatedAndPaidOut(uint256 _employeeId) internal {\n        Employee storage employee = employees[_employeeId];\n\n        if (\n            employee.lastPayroll == employee.endDate &&\n            (employee.accruedSalary == 0 && employee.bonus == 0 && employee.reimbursements == 0)\n        ) {\n            delete employeeIds[employee.accountAddress];\n            delete employees[_employeeId];\n        }\n    }\n\n    /**\n     * @dev Updates the accrued salary and payroll date of an employee based on a payment amount and\n     *      their currently owed salary since last payroll date\n     * @param _employee Employee struct in storage\n     * @param _paymentAmount Amount being paid to the employee\n     */\n    function _updateEmployeeAccountingBasedOnPaidSalary(Employee storage _employee, uint256 _paymentAmount) internal {\n        uint256 accruedSalary = _employee.accruedSalary;\n\n        if (_paymentAmount <= accruedSalary) {\n            // Employee is only cashing out some previously owed salary so we don't need to update\n            // their last payroll date\n            // No need to use SafeMath as we already know _paymentAmount <= accruedSalary\n            _employee.accruedSalary = accruedSalary - _paymentAmount;\n            return;\n        }\n\n        // Employee is cashing out some of their currently owed salary so their last payroll date\n        // needs to be modified based on the amount of salary paid\n        uint256 currentSalaryPaid = _paymentAmount;\n        if (accruedSalary > 0) {\n            // Employee is cashing out a mixed amount between previous and current owed salaries;\n            // first use up their accrued salary\n            // No need to use SafeMath here as we already know _paymentAmount > accruedSalary\n            currentSalaryPaid = _paymentAmount - accruedSalary;\n            // We finally need to clear their accrued salary\n            _employee.accruedSalary = 0;\n        }\n\n        uint256 salary = _employee.denominationTokenSalary;\n        uint256 timeDiff = currentSalaryPaid.div(salary);\n\n        // If they're being paid an amount that doesn't match perfectly with the adjusted time\n        // (up to a seconds' worth of salary), add the second and put the extra remaining salary\n        // into their accrued salary\n        uint256 extraSalary = currentSalaryPaid % salary;\n        if (extraSalary > 0) {\n            timeDiff = timeDiff.add(1);\n            _employee.accruedSalary = salary - extraSalary;\n        }\n\n        uint256 lastPayrollDate = uint256(_employee.lastPayroll).add(timeDiff);\n        // Even though this function should never receive a currentSalaryPaid value that would\n        // result in the lastPayrollDate being higher than the current time,\n        // let's double check to be safe\n        require(lastPayrollDate <= uint256(getTimestamp64()), ERROR_LAST_PAYROLL_DATE_TOO_BIG);\n        // Already know lastPayrollDate must fit in uint64 from above\n        _employee.lastPayroll = uint64(lastPayrollDate);\n    }\n\n    /**\n     * @dev Tell whether an employee is registered in this Payroll or not\n     * @param _employeeId Employee's identifier\n     * @return True if the given employee ID belongs to an registered employee, false otherwise\n     */\n    function _employeeExists(uint256 _employeeId) internal view returns (bool) {\n        return employees[_employeeId].accountAddress != address(0);\n    }\n\n    /**\n     * @dev Tell whether an employee has a valid token allocation or not.\n     *      A valid allocation is one that sums to 100 and only includes allowed tokens.\n     * @param _employee Employee struct in storage\n     * @return Reverts if employee's allocation is invalid\n     */\n    function _ensureEmployeeTokenAllocationsIsValid(Employee storage _employee) internal view {\n        uint256 sum = 0;\n        address[] memory allocationTokenAddresses = _employee.allocationTokenAddresses;\n        for (uint256 i = 0; i < allocationTokenAddresses.length; i++) {\n            address token = allocationTokenAddresses[i];\n            require(allowedTokens[token], ERROR_NOT_ALLOWED_TOKEN);\n            sum = sum.add(_employee.allocationTokens[token]);\n        }\n        require(sum == 100, ERROR_DISTRIBUTION_NOT_FULL);\n    }\n\n    /**\n     * @dev Tell whether an employee is still active or not\n     * @param _employee Employee struct in storage\n     * @return True if the employee exists and has an end date that has not been reached yet, false otherwise\n     */\n    function _isEmployeeActive(Employee storage _employee) internal view returns (bool) {\n        return _employee.endDate >= getTimestamp64();\n    }\n\n    /**\n     * @dev Tell whether an employee id is still active or not\n     * @param _employeeId Employee's identifier\n     * @return True if the employee exists and has an end date that has not been reached yet, false otherwise\n     */\n    function _isEmployeeIdActive(uint256 _employeeId) internal view returns (bool) {\n        return _isEmployeeActive(employees[_employeeId]);\n    }\n\n    /**\n     * @dev Get exchange rate for a token based on the denomination token.\n     *      As an example, if the denomination token was USD and ETH's price was 100USD,\n     *      this would return 0.01 * precision rate for ETH.\n     * @param _token Token to get price of in denomination tokens\n     * @return Exchange rate (multiplied by the PPF rate precision)\n     */\n    function _getExchangeRateInDenominationToken(address _token) internal view returns (uint256) {\n        // xrt is the number of `_token` that can be exchanged for one `denominationToken`\n        (uint128 xrt, uint64 when) = feed.get(\n            denominationToken,  // Base (e.g. USD)\n            _token              // Quote (e.g. ETH)\n        );\n\n        // Check the price feed is recent enough\n        if (getTimestamp64().sub(when) >= rateExpiryTime) {\n            return 0;\n        }\n\n        return uint256(xrt);\n    }\n\n    /**\n     * @dev Get owed salary since last payroll for an employee\n     * @param _employee Employee struct in storage\n     * @param _capped Safely cap the owed salary at max uint\n     * @return Owed salary in denomination tokens since last payroll for the employee.\n     *         If _capped is false, it reverts in case of an overflow.\n     */\n    function _getOwedSalarySinceLastPayroll(Employee storage _employee, bool _capped) internal view returns (uint256) {\n        uint256 timeDiff = _getOwedPayrollPeriod(_employee);\n        if (timeDiff == 0) {\n            return 0;\n        }\n        uint256 salary = _employee.denominationTokenSalary;\n\n        if (_capped) {\n            // Return max uint if the result overflows\n            uint256 result = salary * timeDiff;\n            return (result / timeDiff != salary) ? MAX_UINT256 : result;\n        } else {\n            return salary.mul(timeDiff);\n        }\n    }\n\n    /**\n     * @dev Get owed payroll period for an employee\n     * @param _employee Employee struct in storage\n     * @return Owed time in seconds since the employee's last payroll date\n     */\n    function _getOwedPayrollPeriod(Employee storage _employee) internal view returns (uint256) {\n        // Get the min of current date and termination date\n        uint64 date = _isEmployeeActive(_employee) ? getTimestamp64() : _employee.endDate;\n\n        // Make sure we don't revert if we try to get the owed salary for an employee whose last\n        // payroll date is now or in the future\n        // This can happen either by adding new employees with start dates in the future, to allow\n        // us to change their salary before their start date, or by terminating an employee and\n        // paying out their full owed salary\n        if (date <= _employee.lastPayroll) {\n            return 0;\n        }\n\n        // Return time diff in seconds, no need to use SafeMath as the underflow was covered by the previous check\n        return uint256(date - _employee.lastPayroll);\n    }\n\n    /**\n     * @dev Get owed salary since last payroll for an employee. It will take into account the accrued salary as well.\n     *      The result will be capped to max uint256 to avoid having an overflow.\n     * @param _employee Employee struct in storage\n     * @return Employee's total owed salary: current owed payroll since the last payroll date, plus the accrued salary.\n     */\n    function _getTotalOwedCappedSalary(Employee storage _employee) internal view returns (uint256) {\n        uint256 currentOwedSalary = _getOwedSalarySinceLastPayroll(_employee, true); // cap amount\n        uint256 totalOwedSalary = currentOwedSalary + _employee.accruedSalary;\n        if (totalOwedSalary < currentOwedSalary) {\n            totalOwedSalary = MAX_UINT256;\n        }\n        return totalOwedSalary;\n    }\n\n    /**\n     * @dev Get payment reference for a given payment type\n     * @param _type Payment type to query the reference of\n     * @return Payment reference for the given payment type\n     */\n    function _paymentReferenceFor(PaymentType _type) internal pure returns (string memory) {\n        if (_type == PaymentType.Payroll) {\n            return \"Employee salary\";\n        } else if (_type == PaymentType.Reimbursement) {\n            return \"Employee reimbursement\";\n        } if (_type == PaymentType.Bonus) {\n            return \"Employee bonus\";\n        }\n        revert(ERROR_INVALID_PAYMENT_TYPE);\n    }\n\n    function _ensurePaymentAmount(uint256 _owedAmount, uint256 _requestedAmount) private pure returns (uint256) {\n        require(_owedAmount > 0, ERROR_NOTHING_PAID);\n        require(_owedAmount >= _requestedAmount, ERROR_INVALID_REQUESTED_AMOUNT);\n        return _requestedAmount > 0 ? _requestedAmount : _owedAmount;\n    }\n}\n"
    },
    "@aragon/ppf-contracts/contracts/IFeed.sol": {
      "content": "pragma solidity ^0.4.18;\n\ninterface IFeed {\n    function ratePrecision() external pure returns (uint256);\n    function get(address base, address quote) external view returns (uint128 xrt, uint64 when);\n}\n"
    },
    "@aragon/apps-finance/contracts/Finance.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    GPL-3.0-or-later\n */\n\npragma solidity 0.4.24;\n\nimport \"@aragon/os/contracts/apps/AragonApp.sol\";\nimport \"@aragon/os/contracts/common/EtherTokenConstant.sol\";\nimport \"@aragon/os/contracts/common/IsContract.sol\";\nimport \"@aragon/os/contracts/common/SafeERC20.sol\";\n\nimport \"@aragon/os/contracts/lib/token/ERC20.sol\";\nimport \"@aragon/os/contracts/lib/math/SafeMath.sol\";\nimport \"@aragon/os/contracts/lib/math/SafeMath64.sol\";\n\nimport \"@aragon/apps-vault/contracts/Vault.sol\";\n\n\ncontract Finance is EtherTokenConstant, IsContract, AragonApp {\n    using SafeMath for uint256;\n    using SafeMath64 for uint64;\n    using SafeERC20 for ERC20;\n\n    bytes32 public constant CREATE_PAYMENTS_ROLE = keccak256(\"CREATE_PAYMENTS_ROLE\");\n    bytes32 public constant CHANGE_PERIOD_ROLE = keccak256(\"CHANGE_PERIOD_ROLE\");\n    bytes32 public constant CHANGE_BUDGETS_ROLE = keccak256(\"CHANGE_BUDGETS_ROLE\");\n    bytes32 public constant EXECUTE_PAYMENTS_ROLE = keccak256(\"EXECUTE_PAYMENTS_ROLE\");\n    bytes32 public constant MANAGE_PAYMENTS_ROLE = keccak256(\"MANAGE_PAYMENTS_ROLE\");\n\n    uint256 internal constant NO_SCHEDULED_PAYMENT = 0;\n    uint256 internal constant NO_TRANSACTION = 0;\n    uint256 internal constant MAX_SCHEDULED_PAYMENTS_PER_TX = 20;\n    uint256 internal constant MAX_UINT256 = uint256(-1);\n    uint64 internal constant MAX_UINT64 = uint64(-1);\n    uint64 internal constant MINIMUM_PERIOD = uint64(1 days);\n\n    string private constant ERROR_COMPLETE_TRANSITION = \"FINANCE_COMPLETE_TRANSITION\";\n    string private constant ERROR_NO_SCHEDULED_PAYMENT = \"FINANCE_NO_SCHEDULED_PAYMENT\";\n    string private constant ERROR_NO_TRANSACTION = \"FINANCE_NO_TRANSACTION\";\n    string private constant ERROR_NO_PERIOD = \"FINANCE_NO_PERIOD\";\n    string private constant ERROR_VAULT_NOT_CONTRACT = \"FINANCE_VAULT_NOT_CONTRACT\";\n    string private constant ERROR_SET_PERIOD_TOO_SHORT = \"FINANCE_SET_PERIOD_TOO_SHORT\";\n    string private constant ERROR_NEW_PAYMENT_AMOUNT_ZERO = \"FINANCE_NEW_PAYMENT_AMOUNT_ZERO\";\n    string private constant ERROR_NEW_PAYMENT_INTERVAL_ZERO = \"FINANCE_NEW_PAYMENT_INTRVL_ZERO\";\n    string private constant ERROR_NEW_PAYMENT_EXECS_ZERO = \"FINANCE_NEW_PAYMENT_EXECS_ZERO\";\n    string private constant ERROR_NEW_PAYMENT_IMMEDIATE = \"FINANCE_NEW_PAYMENT_IMMEDIATE\";\n    string private constant ERROR_RECOVER_AMOUNT_ZERO = \"FINANCE_RECOVER_AMOUNT_ZERO\";\n    string private constant ERROR_DEPOSIT_AMOUNT_ZERO = \"FINANCE_DEPOSIT_AMOUNT_ZERO\";\n    string private constant ERROR_ETH_VALUE_MISMATCH = \"FINANCE_ETH_VALUE_MISMATCH\";\n    string private constant ERROR_BUDGET = \"FINANCE_BUDGET\";\n    string private constant ERROR_EXECUTE_PAYMENT_NUM = \"FINANCE_EXECUTE_PAYMENT_NUM\";\n    string private constant ERROR_EXECUTE_PAYMENT_TIME = \"FINANCE_EXECUTE_PAYMENT_TIME\";\n    string private constant ERROR_PAYMENT_RECEIVER = \"FINANCE_PAYMENT_RECEIVER\";\n    string private constant ERROR_TOKEN_TRANSFER_FROM_REVERTED = \"FINANCE_TKN_TRANSFER_FROM_REVERT\";\n    string private constant ERROR_TOKEN_APPROVE_FAILED = \"FINANCE_TKN_APPROVE_FAILED\";\n    string private constant ERROR_PAYMENT_INACTIVE = \"FINANCE_PAYMENT_INACTIVE\";\n    string private constant ERROR_REMAINING_BUDGET = \"FINANCE_REMAINING_BUDGET\";\n\n    // Order optimized for storage\n    struct ScheduledPayment {\n        address token;\n        address receiver;\n        address createdBy;\n        bool inactive;\n        uint256 amount;\n        uint64 initialPaymentTime;\n        uint64 interval;\n        uint64 maxExecutions;\n        uint64 executions;\n    }\n\n    // Order optimized for storage\n    struct Transaction {\n        address token;\n        address entity;\n        bool isIncoming;\n        uint256 amount;\n        uint256 paymentId;\n        uint64 paymentExecutionNumber;\n        uint64 date;\n        uint64 periodId;\n    }\n\n    struct TokenStatement {\n        uint256 expenses;\n        uint256 income;\n    }\n\n    struct Period {\n        uint64 startTime;\n        uint64 endTime;\n        uint256 firstTransactionId;\n        uint256 lastTransactionId;\n        mapping (address => TokenStatement) tokenStatement;\n    }\n\n    struct Settings {\n        uint64 periodDuration;\n        mapping (address => uint256) budgets;\n        mapping (address => bool) hasBudget;\n    }\n\n    Vault public vault;\n    Settings internal settings;\n\n    // We are mimicing arrays, we use mappings instead to make app upgrade more graceful\n    mapping (uint256 => ScheduledPayment) internal scheduledPayments;\n    // Payments start at index 1, to allow us to use scheduledPayments[0] for transactions that are not\n    // linked to a scheduled payment\n    uint256 public paymentsNextIndex;\n\n    mapping (uint256 => Transaction) internal transactions;\n    uint256 public transactionsNextIndex;\n\n    mapping (uint64 => Period) internal periods;\n    uint64 public periodsLength;\n\n    event NewPeriod(uint64 indexed periodId, uint64 periodStarts, uint64 periodEnds);\n    event SetBudget(address indexed token, uint256 amount, bool hasBudget);\n    event NewPayment(uint256 indexed paymentId, address indexed recipient, uint64 maxExecutions, string reference);\n    event NewTransaction(uint256 indexed transactionId, bool incoming, address indexed entity, uint256 amount, string reference);\n    event ChangePaymentState(uint256 indexed paymentId, bool active);\n    event ChangePeriodDuration(uint64 newDuration);\n    event PaymentFailure(uint256 paymentId);\n\n    // Modifier used by all methods that impact accounting to make sure accounting period\n    // is changed before the operation if needed\n    // NOTE: its use **MUST** be accompanied by an initialization check\n    modifier transitionsPeriod {\n        bool completeTransition = _tryTransitionAccountingPeriod(getMaxPeriodTransitions());\n        require(completeTransition, ERROR_COMPLETE_TRANSITION);\n        _;\n    }\n\n    modifier scheduledPaymentExists(uint256 _paymentId) {\n        require(_paymentId > 0 && _paymentId < paymentsNextIndex, ERROR_NO_SCHEDULED_PAYMENT);\n        _;\n    }\n\n    modifier transactionExists(uint256 _transactionId) {\n        require(_transactionId > 0 && _transactionId < transactionsNextIndex, ERROR_NO_TRANSACTION);\n        _;\n    }\n\n    modifier periodExists(uint64 _periodId) {\n        require(_periodId < periodsLength, ERROR_NO_PERIOD);\n        _;\n    }\n\n    /**\n     * @notice Deposit ETH to the Vault, to avoid locking them in this Finance app forever\n     * @dev Send ETH to Vault. Send all the available balance.\n     */\n    function () external payable isInitialized transitionsPeriod {\n        require(msg.value > 0, ERROR_DEPOSIT_AMOUNT_ZERO);\n        _deposit(\n            ETH,\n            msg.value,\n            \"Ether transfer to Finance app\",\n            msg.sender,\n            true\n        );\n    }\n\n    /**\n    * @notice Initialize Finance app for Vault at `_vault` with period length of `@transformTime(_periodDuration)`\n    * @param _vault Address of the vault Finance will rely on (non changeable)\n    * @param _periodDuration Duration in seconds of each period\n    */\n    function initialize(Vault _vault, uint64 _periodDuration) external onlyInit {\n        initialized();\n\n        require(isContract(_vault), ERROR_VAULT_NOT_CONTRACT);\n        vault = _vault;\n\n        require(_periodDuration >= MINIMUM_PERIOD, ERROR_SET_PERIOD_TOO_SHORT);\n        settings.periodDuration = _periodDuration;\n\n        // Reserve the first scheduled payment index as an unused index for transactions not linked\n        // to a scheduled payment\n        scheduledPayments[0].inactive = true;\n        paymentsNextIndex = 1;\n\n        // Reserve the first transaction index as an unused index for periods with no transactions\n        transactionsNextIndex = 1;\n\n        // Start the first period\n        _newPeriod(getTimestamp64());\n    }\n\n    /**\n    * @notice Deposit `@tokenAmount(_token, _amount)`\n    * @dev Deposit for approved ERC20 tokens or ETH\n    * @param _token Address of deposited token\n    * @param _amount Amount of tokens sent\n    * @param _reference Reason for payment\n    */\n    function deposit(address _token, uint256 _amount, string _reference) external payable isInitialized transitionsPeriod {\n        require(_amount > 0, ERROR_DEPOSIT_AMOUNT_ZERO);\n        if (_token == ETH) {\n            // Ensure that the ETH sent with the transaction equals the amount in the deposit\n            require(msg.value == _amount, ERROR_ETH_VALUE_MISMATCH);\n        }\n\n        _deposit(\n            _token,\n            _amount,\n            _reference,\n            msg.sender,\n            true\n        );\n    }\n\n    /**\n    * @notice Create a new payment of `@tokenAmount(_token, _amount)` to `_receiver` for '`_reference`'\n    * @dev Note that this function is protected by the `CREATE_PAYMENTS_ROLE` but uses `MAX_UINT256`\n    *      as its interval auth parameter (as a sentinel value for \"never repeating\").\n    *      While this protects against most cases (you typically want to set a baseline requirement\n    *      for interval time), it does mean users will have to explicitly check for this case when\n    *      granting a permission that includes a upperbound requirement on the interval time.\n    * @param _token Address of token for payment\n    * @param _receiver Address that will receive payment\n    * @param _amount Tokens that are paid every time the payment is due\n    * @param _reference String detailing payment reason\n    */\n    function newImmediatePayment(address _token, address _receiver, uint256 _amount, string _reference)\n        external\n        // Use MAX_UINT256 as the interval parameter, as this payment will never repeat\n        // Payment time parameter is left as the last param as it was added later\n        authP(CREATE_PAYMENTS_ROLE, _arr(_token, _receiver, _amount, MAX_UINT256, uint256(1), getTimestamp()))\n        transitionsPeriod\n    {\n        require(_amount > 0, ERROR_NEW_PAYMENT_AMOUNT_ZERO);\n\n        _makePaymentTransaction(\n            _token,\n            _receiver,\n            _amount,\n            NO_SCHEDULED_PAYMENT,   // unrelated to any payment id; it isn't created\n            0,   // also unrelated to any payment executions\n            _reference\n        );\n    }\n\n    /**\n    * @notice Create a new payment of `@tokenAmount(_token, _amount)` to `_receiver` for `_reference`, executing `_maxExecutions` times at intervals of `@transformTime(_interval)`\n    * @dev See `newImmediatePayment()` for limitations on how the interval auth parameter can be used\n    * @param _token Address of token for payment\n    * @param _receiver Address that will receive payment\n    * @param _amount Tokens that are paid every time the payment is due\n    * @param _initialPaymentTime Timestamp for when the first payment is done\n    * @param _interval Number of seconds that need to pass between payment transactions\n    * @param _maxExecutions Maximum instances a payment can be executed\n    * @param _reference String detailing payment reason\n    */\n    function newScheduledPayment(\n        address _token,\n        address _receiver,\n        uint256 _amount,\n        uint64 _initialPaymentTime,\n        uint64 _interval,\n        uint64 _maxExecutions,\n        string _reference\n    )\n        external\n        // Payment time parameter is left as the last param as it was added later\n        authP(CREATE_PAYMENTS_ROLE, _arr(_token, _receiver, _amount, uint256(_interval), uint256(_maxExecutions), uint256(_initialPaymentTime)))\n        transitionsPeriod\n        returns (uint256 paymentId)\n    {\n        require(_amount > 0, ERROR_NEW_PAYMENT_AMOUNT_ZERO);\n        require(_interval > 0, ERROR_NEW_PAYMENT_INTERVAL_ZERO);\n        require(_maxExecutions > 0, ERROR_NEW_PAYMENT_EXECS_ZERO);\n\n        // Token budget must not be set at all or allow at least one instance of this payment each period\n        require(!settings.hasBudget[_token] || settings.budgets[_token] >= _amount, ERROR_BUDGET);\n\n        // Don't allow creating single payments that are immediately executable, use `newImmediatePayment()` instead\n        if (_maxExecutions == 1) {\n            require(_initialPaymentTime > getTimestamp64(), ERROR_NEW_PAYMENT_IMMEDIATE);\n        }\n\n        paymentId = paymentsNextIndex++;\n        emit NewPayment(paymentId, _receiver, _maxExecutions, _reference);\n\n        ScheduledPayment storage payment = scheduledPayments[paymentId];\n        payment.token = _token;\n        payment.receiver = _receiver;\n        payment.amount = _amount;\n        payment.initialPaymentTime = _initialPaymentTime;\n        payment.interval = _interval;\n        payment.maxExecutions = _maxExecutions;\n        payment.createdBy = msg.sender;\n\n        // We skip checking how many times the new payment was executed to allow creating new\n        // scheduled payments before having enough vault balance\n        _executePayment(paymentId);\n    }\n\n    /**\n    * @notice Change period duration to `@transformTime(_periodDuration)`, effective for next accounting period\n    * @param _periodDuration Duration in seconds for accounting periods\n    */\n    function setPeriodDuration(uint64 _periodDuration)\n        external\n        authP(CHANGE_PERIOD_ROLE, arr(uint256(_periodDuration), uint256(settings.periodDuration)))\n        transitionsPeriod\n    {\n        require(_periodDuration >= MINIMUM_PERIOD, ERROR_SET_PERIOD_TOO_SHORT);\n        settings.periodDuration = _periodDuration;\n        emit ChangePeriodDuration(_periodDuration);\n    }\n\n    /**\n    * @notice Set budget for `_token.symbol(): string` to `@tokenAmount(_token, _amount, false)`, effective immediately\n    * @param _token Address for token\n    * @param _amount New budget amount\n    */\n    function setBudget(\n        address _token,\n        uint256 _amount\n    )\n        external\n        authP(CHANGE_BUDGETS_ROLE, arr(_token, _amount, settings.budgets[_token], uint256(settings.hasBudget[_token] ? 1 : 0)))\n        transitionsPeriod\n    {\n        settings.budgets[_token] = _amount;\n        if (!settings.hasBudget[_token]) {\n            settings.hasBudget[_token] = true;\n        }\n        emit SetBudget(_token, _amount, true);\n    }\n\n    /**\n    * @notice Remove spending limit for `_token.symbol(): string`, effective immediately\n    * @param _token Address for token\n    */\n    function removeBudget(address _token)\n        external\n        authP(CHANGE_BUDGETS_ROLE, arr(_token, uint256(0), settings.budgets[_token], uint256(settings.hasBudget[_token] ? 1 : 0)))\n        transitionsPeriod\n    {\n        settings.budgets[_token] = 0;\n        settings.hasBudget[_token] = false;\n        emit SetBudget(_token, 0, false);\n    }\n\n    /**\n    * @notice Execute pending payment #`_paymentId`\n    * @dev Executes any payment (requires role)\n    * @param _paymentId Identifier for payment\n    */\n    function executePayment(uint256 _paymentId)\n        external\n        authP(EXECUTE_PAYMENTS_ROLE, arr(_paymentId, scheduledPayments[_paymentId].amount))\n        scheduledPaymentExists(_paymentId)\n        transitionsPeriod\n    {\n        _executePaymentAtLeastOnce(_paymentId);\n    }\n\n    /**\n    * @notice Execute pending payment #`_paymentId`\n    * @dev Always allow receiver of a payment to trigger execution\n    *      Initialization check is implicitly provided by `scheduledPaymentExists()` as new\n    *      scheduled payments can only be created via `newScheduledPayment(),` which requires initialization\n    * @param _paymentId Identifier for payment\n    */\n    function receiverExecutePayment(uint256 _paymentId) external scheduledPaymentExists(_paymentId) transitionsPeriod {\n        require(scheduledPayments[_paymentId].receiver == msg.sender, ERROR_PAYMENT_RECEIVER);\n        _executePaymentAtLeastOnce(_paymentId);\n    }\n\n    /**\n    * @notice `_active ? 'Activate' : 'Disable'` payment #`_paymentId`\n    * @dev Note that we do not require this action to transition periods, as it doesn't directly\n    *      impact any accounting periods.\n    *      Not having to transition periods also makes disabling payments easier to prevent funds\n    *      from being pulled out in the event of a breach.\n    * @param _paymentId Identifier for payment\n    * @param _active Whether it will be active or inactive\n    */\n    function setPaymentStatus(uint256 _paymentId, bool _active)\n        external\n        authP(MANAGE_PAYMENTS_ROLE, arr(_paymentId, uint256(_active ? 1 : 0)))\n        scheduledPaymentExists(_paymentId)\n    {\n        scheduledPayments[_paymentId].inactive = !_active;\n        emit ChangePaymentState(_paymentId, _active);\n    }\n\n    /**\n     * @notice Send tokens held in this contract to the Vault\n     * @dev Allows making a simple payment from this contract to the Vault, to avoid locked tokens.\n     *      This contract should never receive tokens with a simple transfer call, but in case it\n     *      happens, this function allows for their recovery.\n     * @param _token Token whose balance is going to be transferred.\n     */\n    function recoverToVault(address _token) external isInitialized transitionsPeriod {\n        uint256 amount = _token == ETH ? address(this).balance : ERC20(_token).staticBalanceOf(address(this));\n        require(amount > 0, ERROR_RECOVER_AMOUNT_ZERO);\n\n        _deposit(\n            _token,\n            amount,\n            \"Recover to Vault\",\n            address(this),\n            false\n        );\n    }\n\n    /**\n    * @notice Transition accounting period if needed\n    * @dev Transitions accounting periods if needed. For preventing OOG attacks, a maxTransitions\n    *      param is provided. If more than the specified number of periods need to be transitioned,\n    *      it will return false.\n    * @param _maxTransitions Maximum periods that can be transitioned\n    * @return success Boolean indicating whether the accounting period is the correct one (if false,\n    *                 maxTransitions was surpased and another call is needed)\n    */\n    function tryTransitionAccountingPeriod(uint64 _maxTransitions) external isInitialized returns (bool success) {\n        return _tryTransitionAccountingPeriod(_maxTransitions);\n    }\n\n    // Getter fns\n\n    /**\n    * @dev Disable recovery escape hatch if the app has been initialized, as it could be used\n    *      maliciously to transfer funds in the Finance app to another Vault\n    *      finance#recoverToVault() should be used to recover funds to the Finance's vault\n    */\n    function allowRecoverability(address) public view returns (bool) {\n        return !hasInitialized();\n    }\n\n    function getPayment(uint256 _paymentId)\n        public\n        view\n        scheduledPaymentExists(_paymentId)\n        returns (\n            address token,\n            address receiver,\n            uint256 amount,\n            uint64 initialPaymentTime,\n            uint64 interval,\n            uint64 maxExecutions,\n            bool inactive,\n            uint64 executions,\n            address createdBy\n        )\n    {\n        ScheduledPayment storage payment = scheduledPayments[_paymentId];\n\n        token = payment.token;\n        receiver = payment.receiver;\n        amount = payment.amount;\n        initialPaymentTime = payment.initialPaymentTime;\n        interval = payment.interval;\n        maxExecutions = payment.maxExecutions;\n        executions = payment.executions;\n        inactive = payment.inactive;\n        createdBy = payment.createdBy;\n    }\n\n    function getTransaction(uint256 _transactionId)\n        public\n        view\n        transactionExists(_transactionId)\n        returns (\n            uint64 periodId,\n            uint256 amount,\n            uint256 paymentId,\n            uint64 paymentExecutionNumber,\n            address token,\n            address entity,\n            bool isIncoming,\n            uint64 date\n        )\n    {\n        Transaction storage transaction = transactions[_transactionId];\n\n        token = transaction.token;\n        entity = transaction.entity;\n        isIncoming = transaction.isIncoming;\n        date = transaction.date;\n        periodId = transaction.periodId;\n        amount = transaction.amount;\n        paymentId = transaction.paymentId;\n        paymentExecutionNumber = transaction.paymentExecutionNumber;\n    }\n\n    function getPeriod(uint64 _periodId)\n        public\n        view\n        periodExists(_periodId)\n        returns (\n            bool isCurrent,\n            uint64 startTime,\n            uint64 endTime,\n            uint256 firstTransactionId,\n            uint256 lastTransactionId\n        )\n    {\n        Period storage period = periods[_periodId];\n\n        isCurrent = _currentPeriodId() == _periodId;\n\n        startTime = period.startTime;\n        endTime = period.endTime;\n        firstTransactionId = period.firstTransactionId;\n        lastTransactionId = period.lastTransactionId;\n    }\n\n    function getPeriodTokenStatement(uint64 _periodId, address _token)\n        public\n        view\n        periodExists(_periodId)\n        returns (uint256 expenses, uint256 income)\n    {\n        TokenStatement storage tokenStatement = periods[_periodId].tokenStatement[_token];\n        expenses = tokenStatement.expenses;\n        income = tokenStatement.income;\n    }\n\n    /**\n    * @dev We have to check for initialization as periods are only valid after initializing\n    */\n    function currentPeriodId() public view isInitialized returns (uint64) {\n        return _currentPeriodId();\n    }\n\n    /**\n    * @dev We have to check for initialization as periods are only valid after initializing\n    */\n    function getPeriodDuration() public view isInitialized returns (uint64) {\n        return settings.periodDuration;\n    }\n\n    /**\n    * @dev We have to check for initialization as budgets are only valid after initializing\n    */\n    function getBudget(address _token) public view isInitialized returns (uint256 budget, bool hasBudget) {\n        budget = settings.budgets[_token];\n        hasBudget = settings.hasBudget[_token];\n    }\n\n    /**\n    * @dev We have to check for initialization as budgets are only valid after initializing\n    */\n    function getRemainingBudget(address _token) public view isInitialized returns (uint256) {\n        return _getRemainingBudget(_token);\n    }\n\n    /**\n    * @dev We have to check for initialization as budgets are only valid after initializing\n    */\n    function canMakePayment(address _token, uint256 _amount) public view isInitialized returns (bool) {\n        return _canMakePayment(_token, _amount);\n    }\n\n    /**\n    * @dev Initialization check is implicitly provided by `scheduledPaymentExists()` as new\n    *      scheduled payments can only be created via `newScheduledPayment(),` which requires initialization\n    */\n    function nextPaymentTime(uint256 _paymentId) public view scheduledPaymentExists(_paymentId) returns (uint64) {\n        return _nextPaymentTime(_paymentId);\n    }\n\n    // Internal fns\n\n    function _deposit(address _token, uint256 _amount, string _reference, address _sender, bool _isExternalDeposit) internal {\n        _recordIncomingTransaction(\n            _token,\n            _sender,\n            _amount,\n            _reference\n        );\n\n        if (_token == ETH) {\n            vault.deposit.value(_amount)(ETH, _amount);\n        } else {\n            // First, transfer the tokens to Finance if necessary\n            // External deposit will be false when the assets were already in the Finance app\n            // and just need to be transferred to the Vault\n            if (_isExternalDeposit) {\n                // This assumes the sender has approved the tokens for Finance\n                require(\n                    ERC20(_token).safeTransferFrom(msg.sender, address(this), _amount),\n                    ERROR_TOKEN_TRANSFER_FROM_REVERTED\n                );\n            }\n            // Approve the tokens for the Vault (it does the actual transferring)\n            require(ERC20(_token).safeApprove(vault, _amount), ERROR_TOKEN_APPROVE_FAILED);\n            // Finally, initiate the deposit\n            vault.deposit(_token, _amount);\n        }\n    }\n\n    function _executePayment(uint256 _paymentId) internal returns (uint256) {\n        ScheduledPayment storage payment = scheduledPayments[_paymentId];\n        require(!payment.inactive, ERROR_PAYMENT_INACTIVE);\n\n        uint64 paid = 0;\n        while (_nextPaymentTime(_paymentId) <= getTimestamp64() && paid < MAX_SCHEDULED_PAYMENTS_PER_TX) {\n            if (!_canMakePayment(payment.token, payment.amount)) {\n                emit PaymentFailure(_paymentId);\n                break;\n            }\n\n            // The while() predicate prevents these two from ever overflowing\n            payment.executions += 1;\n            paid += 1;\n\n            // We've already checked the remaining budget with `_canMakePayment()`\n            _unsafeMakePaymentTransaction(\n                payment.token,\n                payment.receiver,\n                payment.amount,\n                _paymentId,\n                payment.executions,\n                \"\"\n            );\n        }\n\n        return paid;\n    }\n\n    function _executePaymentAtLeastOnce(uint256 _paymentId) internal {\n        uint256 paid = _executePayment(_paymentId);\n        if (paid == 0) {\n            if (_nextPaymentTime(_paymentId) <= getTimestamp64()) {\n                revert(ERROR_EXECUTE_PAYMENT_NUM);\n            } else {\n                revert(ERROR_EXECUTE_PAYMENT_TIME);\n            }\n        }\n    }\n\n    function _makePaymentTransaction(\n        address _token,\n        address _receiver,\n        uint256 _amount,\n        uint256 _paymentId,\n        uint64 _paymentExecutionNumber,\n        string _reference\n    )\n        internal\n    {\n        require(_getRemainingBudget(_token) >= _amount, ERROR_REMAINING_BUDGET);\n        _unsafeMakePaymentTransaction(_token, _receiver, _amount, _paymentId, _paymentExecutionNumber, _reference);\n    }\n\n    /**\n    * @dev Unsafe version of _makePaymentTransaction that assumes you have already checked the\n    *      remaining budget\n    */\n    function _unsafeMakePaymentTransaction(\n        address _token,\n        address _receiver,\n        uint256 _amount,\n        uint256 _paymentId,\n        uint64 _paymentExecutionNumber,\n        string _reference\n    )\n        internal\n    {\n        _recordTransaction(\n            false,\n            _token,\n            _receiver,\n            _amount,\n            _paymentId,\n            _paymentExecutionNumber,\n            _reference\n        );\n\n        vault.transfer(_token, _receiver, _amount);\n    }\n\n    function _newPeriod(uint64 _startTime) internal returns (Period storage) {\n        // There should be no way for this to overflow since each period is at least one day\n        uint64 newPeriodId = periodsLength++;\n\n        Period storage period = periods[newPeriodId];\n        period.startTime = _startTime;\n\n        // Be careful here to not overflow; if startTime + periodDuration overflows, we set endTime\n        // to MAX_UINT64 (let's assume that's the end of time for now).\n        uint64 endTime = _startTime + settings.periodDuration - 1;\n        if (endTime < _startTime) { // overflowed\n            endTime = MAX_UINT64;\n        }\n        period.endTime = endTime;\n\n        emit NewPeriod(newPeriodId, period.startTime, period.endTime);\n\n        return period;\n    }\n\n    function _recordIncomingTransaction(\n        address _token,\n        address _sender,\n        uint256 _amount,\n        string _reference\n    )\n        internal\n    {\n        _recordTransaction(\n            true, // incoming transaction\n            _token,\n            _sender,\n            _amount,\n            NO_SCHEDULED_PAYMENT, // unrelated to any existing payment\n            0, // and no payment executions\n            _reference\n        );\n    }\n\n    function _recordTransaction(\n        bool _incoming,\n        address _token,\n        address _entity,\n        uint256 _amount,\n        uint256 _paymentId,\n        uint64 _paymentExecutionNumber,\n        string _reference\n    )\n        internal\n    {\n        uint64 periodId = _currentPeriodId();\n        TokenStatement storage tokenStatement = periods[periodId].tokenStatement[_token];\n        if (_incoming) {\n            tokenStatement.income = tokenStatement.income.add(_amount);\n        } else {\n            tokenStatement.expenses = tokenStatement.expenses.add(_amount);\n        }\n\n        uint256 transactionId = transactionsNextIndex++;\n\n        Transaction storage transaction = transactions[transactionId];\n        transaction.token = _token;\n        transaction.entity = _entity;\n        transaction.isIncoming = _incoming;\n        transaction.amount = _amount;\n        transaction.paymentId = _paymentId;\n        transaction.paymentExecutionNumber = _paymentExecutionNumber;\n        transaction.date = getTimestamp64();\n        transaction.periodId = periodId;\n\n        Period storage period = periods[periodId];\n        if (period.firstTransactionId == NO_TRANSACTION) {\n            period.firstTransactionId = transactionId;\n        }\n\n        emit NewTransaction(transactionId, _incoming, _entity, _amount, _reference);\n    }\n\n    function _tryTransitionAccountingPeriod(uint64 _maxTransitions) internal returns (bool success) {\n        Period storage currentPeriod = periods[_currentPeriodId()];\n        uint64 timestamp = getTimestamp64();\n\n        // Transition periods if necessary\n        while (timestamp > currentPeriod.endTime) {\n            if (_maxTransitions == 0) {\n                // Required number of transitions is over allowed number, return false indicating\n                // it didn't fully transition\n                return false;\n            }\n            // We're already protected from underflowing above\n            _maxTransitions -= 1;\n\n            // If there were any transactions in period, record which was the last\n            // In case 0 transactions occured, first and last tx id will be 0\n            if (currentPeriod.firstTransactionId != NO_TRANSACTION) {\n                currentPeriod.lastTransactionId = transactionsNextIndex.sub(1);\n            }\n\n            // New period starts at end time + 1\n            currentPeriod = _newPeriod(currentPeriod.endTime.add(1));\n        }\n\n        return true;\n    }\n\n    function _canMakePayment(address _token, uint256 _amount) internal view returns (bool) {\n        return _getRemainingBudget(_token) >= _amount && vault.balance(_token) >= _amount;\n    }\n\n    function _currentPeriodId() internal view returns (uint64) {\n        // There is no way for this to overflow if protected by an initialization check\n        return periodsLength - 1;\n    }\n\n    function _getRemainingBudget(address _token) internal view returns (uint256) {\n        if (!settings.hasBudget[_token]) {\n            return MAX_UINT256;\n        }\n\n        uint256 budget = settings.budgets[_token];\n        uint256 spent = periods[_currentPeriodId()].tokenStatement[_token].expenses;\n\n        // A budget decrease can cause the spent amount to be greater than period budget\n        // If so, return 0 to not allow more spending during period\n        if (spent >= budget) {\n            return 0;\n        }\n\n        // We're already protected from the overflow above\n        return budget - spent;\n    }\n\n    function _nextPaymentTime(uint256 _paymentId) internal view returns (uint64) {\n        ScheduledPayment storage payment = scheduledPayments[_paymentId];\n\n        if (payment.executions >= payment.maxExecutions) {\n            return MAX_UINT64; // re-executes in some billions of years time... should not need to worry\n        }\n\n        // Split in multiple lines to circumvent linter warning\n        uint64 increase = payment.executions.mul(payment.interval);\n        uint64 nextPayment = payment.initialPaymentTime.add(increase);\n        return nextPayment;\n    }\n\n    // Syntax sugar\n\n    function _arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e, uint256 _f) internal pure returns (uint256[] r) {\n        r = new uint256[](6);\n        r[0] = uint256(_a);\n        r[1] = uint256(_b);\n        r[2] = _c;\n        r[3] = _d;\n        r[4] = _e;\n        r[5] = _f;\n    }\n\n    // Mocked fns (overrided during testing)\n    // Must be view for mocking purposes\n\n    function getMaxPeriodTransitions() internal view returns (uint64) { return MAX_UINT64; }\n}\n"
    },
    "@aragon/apps-token-manager/contracts/TokenManager.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    GPL-3.0-or-later\n */\n\n/* solium-disable function-order */\n\npragma solidity 0.4.24;\n\nimport \"@aragon/os/contracts/apps/AragonApp.sol\";\nimport \"@aragon/os/contracts/common/IForwarder.sol\";\n\nimport \"@aragon/os/contracts/lib/math/SafeMath.sol\";\n\nimport \"@aragon/apps-shared-minime/contracts/ITokenController.sol\";\nimport \"@aragon/apps-shared-minime/contracts/MiniMeToken.sol\";\n\n\ncontract TokenManager is ITokenController, IForwarder, AragonApp {\n    using SafeMath for uint256;\n\n    bytes32 public constant MINT_ROLE = keccak256(\"MINT_ROLE\");\n    bytes32 public constant ISSUE_ROLE = keccak256(\"ISSUE_ROLE\");\n    bytes32 public constant ASSIGN_ROLE = keccak256(\"ASSIGN_ROLE\");\n    bytes32 public constant REVOKE_VESTINGS_ROLE = keccak256(\"REVOKE_VESTINGS_ROLE\");\n    bytes32 public constant BURN_ROLE = keccak256(\"BURN_ROLE\");\n\n    uint256 public constant MAX_VESTINGS_PER_ADDRESS = 50;\n\n    string private constant ERROR_CALLER_NOT_TOKEN = \"TM_CALLER_NOT_TOKEN\";\n    string private constant ERROR_NO_VESTING = \"TM_NO_VESTING\";\n    string private constant ERROR_TOKEN_CONTROLLER = \"TM_TOKEN_CONTROLLER\";\n    string private constant ERROR_MINT_RECEIVER_IS_TM = \"TM_MINT_RECEIVER_IS_TM\";\n    string private constant ERROR_VESTING_TO_TM = \"TM_VESTING_TO_TM\";\n    string private constant ERROR_TOO_MANY_VESTINGS = \"TM_TOO_MANY_VESTINGS\";\n    string private constant ERROR_WRONG_CLIFF_DATE = \"TM_WRONG_CLIFF_DATE\";\n    string private constant ERROR_VESTING_NOT_REVOKABLE = \"TM_VESTING_NOT_REVOKABLE\";\n    string private constant ERROR_REVOKE_TRANSFER_FROM_REVERTED = \"TM_REVOKE_TRANSFER_FROM_REVERTED\";\n    string private constant ERROR_CAN_NOT_FORWARD = \"TM_CAN_NOT_FORWARD\";\n    string private constant ERROR_BALANCE_INCREASE_NOT_ALLOWED = \"TM_BALANCE_INC_NOT_ALLOWED\";\n    string private constant ERROR_ASSIGN_TRANSFER_FROM_REVERTED = \"TM_ASSIGN_TRANSFER_FROM_REVERTED\";\n\n    struct TokenVesting {\n        uint256 amount;\n        uint64 start;\n        uint64 cliff;\n        uint64 vesting;\n        bool revokable;\n    }\n\n    // Note that we COMPLETELY trust this MiniMeToken to not be malicious for proper operation of this contract\n    MiniMeToken public token;\n    uint256 public maxAccountTokens;\n\n    // We are mimicing an array in the inner mapping, we use a mapping instead to make app upgrade more graceful\n    mapping (address => mapping (uint256 => TokenVesting)) internal vestings;\n    mapping (address => uint256) public vestingsLengths;\n\n    // Other token specific events can be watched on the token address directly (avoids duplication)\n    event NewVesting(address indexed receiver, uint256 vestingId, uint256 amount);\n    event RevokeVesting(address indexed receiver, uint256 vestingId, uint256 nonVestedAmount);\n\n    modifier onlyToken() {\n        require(msg.sender == address(token), ERROR_CALLER_NOT_TOKEN);\n        _;\n    }\n\n    modifier vestingExists(address _holder, uint256 _vestingId) {\n        // TODO: it's not checking for gaps that may appear because of deletes in revokeVesting function\n        require(_vestingId < vestingsLengths[_holder], ERROR_NO_VESTING);\n        _;\n    }\n\n    /**\n    * @notice Initialize Token Manager for `_token.symbol(): string`, whose tokens are `transferable ? 'not' : ''` transferable`_maxAccountTokens > 0 ? ' and limited to a maximum of ' + @tokenAmount(_token, _maxAccountTokens, false) + ' per account' : ''`\n    * @param _token MiniMeToken address for the managed token (Token Manager instance must be already set as the token controller)\n    * @param _transferable whether the token can be transferred by holders\n    * @param _maxAccountTokens Maximum amount of tokens an account can have (0 for infinite tokens)\n    */\n    function initialize(\n        MiniMeToken _token,\n        bool _transferable,\n        uint256 _maxAccountTokens\n    )\n        external\n        onlyInit\n    {\n        initialized();\n\n        require(_token.controller() == address(this), ERROR_TOKEN_CONTROLLER);\n\n        token = _token;\n        maxAccountTokens = _maxAccountTokens == 0 ? uint256(-1) : _maxAccountTokens;\n\n        if (token.transfersEnabled() != _transferable) {\n            token.enableTransfers(_transferable);\n        }\n    }\n\n    /**\n    * @notice Mint `@tokenAmount(self.token(): address, _amount, false)` tokens for `_receiver`\n    * @param _receiver The address receiving the tokens, cannot be the Token Manager itself (use `issue()` instead)\n    * @param _amount Number of tokens minted\n    */\n    function mint(address _receiver, uint256 _amount) external authP(MINT_ROLE, arr(_receiver, _amount)) {\n        require(_receiver != address(this), ERROR_MINT_RECEIVER_IS_TM);\n        _mint(_receiver, _amount);\n    }\n\n    /**\n    * @notice Mint `@tokenAmount(self.token(): address, _amount, false)` tokens for the Token Manager\n    * @param _amount Number of tokens minted\n    */\n    function issue(uint256 _amount) external authP(ISSUE_ROLE, arr(_amount)) {\n        _mint(address(this), _amount);\n    }\n\n    /**\n    * @notice Assign `@tokenAmount(self.token(): address, _amount, false)` tokens to `_receiver` from the Token Manager's holdings\n    * @param _receiver The address receiving the tokens\n    * @param _amount Number of tokens transferred\n    */\n    function assign(address _receiver, uint256 _amount) external authP(ASSIGN_ROLE, arr(_receiver, _amount)) {\n        _assign(_receiver, _amount);\n    }\n\n    /**\n    * @notice Burn `@tokenAmount(self.token(): address, _amount, false)` tokens from `_holder`\n    * @param _holder Holder of tokens being burned\n    * @param _amount Number of tokens being burned\n    */\n    function burn(address _holder, uint256 _amount) external authP(BURN_ROLE, arr(_holder, _amount)) {\n        // minime.destroyTokens() never returns false, only reverts on failure\n        token.destroyTokens(_holder, _amount);\n    }\n\n    /**\n    * @notice Assign `@tokenAmount(self.token(): address, _amount, false)` tokens to `_receiver` from the Token Manager's holdings with a `_revokable : 'revokable' : ''` vesting starting at `@formatDate(_start)`, cliff at `@formatDate(_cliff)` (first portion of tokens transferable), and completed vesting at `@formatDate(_vested)` (all tokens transferable)\n    * @param _receiver The address receiving the tokens, cannot be Token Manager itself\n    * @param _amount Number of tokens vested\n    * @param _start Date the vesting calculations start\n    * @param _cliff Date when the initial portion of tokens are transferable\n    * @param _vested Date when all tokens are transferable\n    * @param _revokable Whether the vesting can be revoked by the Token Manager\n    */\n    function assignVested(\n        address _receiver,\n        uint256 _amount,\n        uint64 _start,\n        uint64 _cliff,\n        uint64 _vested,\n        bool _revokable\n    )\n        external\n        authP(ASSIGN_ROLE, arr(_receiver, _amount))\n        returns (uint256)\n    {\n        require(_receiver != address(this), ERROR_VESTING_TO_TM);\n        require(vestingsLengths[_receiver] < MAX_VESTINGS_PER_ADDRESS, ERROR_TOO_MANY_VESTINGS);\n        require(_start <= _cliff && _cliff <= _vested, ERROR_WRONG_CLIFF_DATE);\n\n        uint256 vestingId = vestingsLengths[_receiver]++;\n        vestings[_receiver][vestingId] = TokenVesting(\n            _amount,\n            _start,\n            _cliff,\n            _vested,\n            _revokable\n        );\n\n        _assign(_receiver, _amount);\n\n        emit NewVesting(_receiver, vestingId, _amount);\n\n        return vestingId;\n    }\n\n    /**\n    * @notice Revoke vesting #`_vestingId` from `_holder`, returning unvested tokens to the Token Manager\n    * @param _holder Address whose vesting to revoke\n    * @param _vestingId Numeric id of the vesting\n    */\n    function revokeVesting(address _holder, uint256 _vestingId)\n        external\n        authP(REVOKE_VESTINGS_ROLE, arr(_holder))\n        vestingExists(_holder, _vestingId)\n    {\n        TokenVesting storage v = vestings[_holder][_vestingId];\n        require(v.revokable, ERROR_VESTING_NOT_REVOKABLE);\n\n        uint256 nonVested = _calculateNonVestedTokens(\n            v.amount,\n            getTimestamp(),\n            v.start,\n            v.cliff,\n            v.vesting\n        );\n\n        // To make vestingIds immutable over time, we just zero out the revoked vesting\n        // Clearing this out also allows the token transfer back to the Token Manager to succeed\n        delete vestings[_holder][_vestingId];\n\n        // transferFrom always works as controller\n        // onTransfer hook always allows if transfering to token controller\n        require(token.transferFrom(_holder, address(this), nonVested), ERROR_REVOKE_TRANSFER_FROM_REVERTED);\n\n        emit RevokeVesting(_holder, _vestingId, nonVested);\n    }\n\n    // ITokenController fns\n    // `onTransfer()`, `onApprove()`, and `proxyPayment()` are callbacks from the MiniMe token\n    // contract and are only meant to be called through the managed MiniMe token that gets assigned\n    // during initialization.\n\n    /*\n    * @dev Notifies the controller about a token transfer allowing the controller to decide whether\n    *      to allow it or react if desired (only callable from the token).\n    *      Initialization check is implicitly provided by `onlyToken()`.\n    * @param _from The origin of the transfer\n    * @param _to The destination of the transfer\n    * @param _amount The amount of the transfer\n    * @return False if the controller does not authorize the transfer\n    */\n    function onTransfer(address _from, address _to, uint256 _amount) external onlyToken returns (bool) {\n        return _isBalanceIncreaseAllowed(_to, _amount) && _transferableBalance(_from, getTimestamp()) >= _amount;\n    }\n\n    /**\n    * @dev Notifies the controller about an approval allowing the controller to react if desired\n    *      Initialization check is implicitly provided by `onlyToken()`.\n    * @return False if the controller does not authorize the approval\n    */\n    function onApprove(address, address, uint) external onlyToken returns (bool) {\n        return true;\n    }\n\n    /**\n    * @dev Called when ether is sent to the MiniMe Token contract\n    *      Initialization check is implicitly provided by `onlyToken()`.\n    * @return True if the ether is accepted, false for it to throw\n    */\n    function proxyPayment(address) external payable onlyToken returns (bool) {\n        return false;\n    }\n\n    // Forwarding fns\n\n    function isForwarder() external pure returns (bool) {\n        return true;\n    }\n\n    /**\n    * @notice Execute desired action as a token holder\n    * @dev IForwarder interface conformance. Forwards any token holder action.\n    * @param _evmScript Script being executed\n    */\n    function forward(bytes _evmScript) public {\n        require(canForward(msg.sender, _evmScript), ERROR_CAN_NOT_FORWARD);\n        bytes memory input = new bytes(0); // TODO: Consider input for this\n\n        // Add the managed token to the blacklist to disallow a token holder from executing actions\n        // on the token controller's (this contract) behalf\n        address[] memory blacklist = new address[](1);\n        blacklist[0] = address(token);\n\n        runScript(_evmScript, input, blacklist);\n    }\n\n    function canForward(address _sender, bytes) public view returns (bool) {\n        return hasInitialized() && token.balanceOf(_sender) > 0;\n    }\n\n    // Getter fns\n\n    function getVesting(\n        address _recipient,\n        uint256 _vestingId\n    )\n        public\n        view\n        vestingExists(_recipient, _vestingId)\n        returns (\n            uint256 amount,\n            uint64 start,\n            uint64 cliff,\n            uint64 vesting,\n            bool revokable\n        )\n    {\n        TokenVesting storage tokenVesting = vestings[_recipient][_vestingId];\n        amount = tokenVesting.amount;\n        start = tokenVesting.start;\n        cliff = tokenVesting.cliff;\n        vesting = tokenVesting.vesting;\n        revokable = tokenVesting.revokable;\n    }\n\n    function spendableBalanceOf(address _holder) public view isInitialized returns (uint256) {\n        return _transferableBalance(_holder, getTimestamp());\n    }\n\n    function transferableBalance(address _holder, uint256 _time) public view isInitialized returns (uint256) {\n        return _transferableBalance(_holder, _time);\n    }\n\n    /**\n    * @dev Disable recovery escape hatch for own token,\n    *      as the it has the concept of issuing tokens without assigning them\n    */\n    function allowRecoverability(address _token) public view returns (bool) {\n        return _token != address(token);\n    }\n\n    // Internal fns\n\n    function _assign(address _receiver, uint256 _amount) internal {\n        require(_isBalanceIncreaseAllowed(_receiver, _amount), ERROR_BALANCE_INCREASE_NOT_ALLOWED);\n        // Must use transferFrom() as transfer() does not give the token controller full control\n        require(token.transferFrom(address(this), _receiver, _amount), ERROR_ASSIGN_TRANSFER_FROM_REVERTED);\n    }\n\n    function _mint(address _receiver, uint256 _amount) internal {\n        require(_isBalanceIncreaseAllowed(_receiver, _amount), ERROR_BALANCE_INCREASE_NOT_ALLOWED);\n        token.generateTokens(_receiver, _amount); // minime.generateTokens() never returns false\n    }\n\n    function _isBalanceIncreaseAllowed(address _receiver, uint256 _inc) internal view returns (bool) {\n        // Max balance doesn't apply to the token manager itself\n        if (_receiver == address(this)) {\n            return true;\n        }\n        return token.balanceOf(_receiver).add(_inc) <= maxAccountTokens;\n    }\n\n    /**\n    * @dev Calculate amount of non-vested tokens at a specifc time\n    * @param tokens The total amount of tokens vested\n    * @param time The time at which to check\n    * @param start The date vesting started\n    * @param cliff The cliff period\n    * @param vested The fully vested date\n    * @return The amount of non-vested tokens of a specific grant\n    *  transferableTokens\n    *   |                         _/--------   vestedTokens rect\n    *   |                       _/\n    *   |                     _/\n    *   |                   _/\n    *   |                 _/\n    *   |                /\n    *   |              .|\n    *   |            .  |\n    *   |          .    |\n    *   |        .      |\n    *   |      .        |\n    *   |    .          |\n    *   +===+===========+---------+----------> time\n    *      Start       Cliff    Vested\n    */\n    function _calculateNonVestedTokens(\n        uint256 tokens,\n        uint256 time,\n        uint256 start,\n        uint256 cliff,\n        uint256 vested\n    )\n        private\n        pure\n        returns (uint256)\n    {\n        // Shortcuts for before cliff and after vested cases.\n        if (time >= vested) {\n            return 0;\n        }\n        if (time < cliff) {\n            return tokens;\n        }\n\n        // Interpolate all vested tokens.\n        // As before cliff the shortcut returns 0, we can just calculate a value\n        // in the vesting rect (as shown in above's figure)\n\n        // vestedTokens = tokens * (time - start) / (vested - start)\n        // In assignVesting we enforce start <= cliff <= vested\n        // Here we shortcut time >= vested and time < cliff,\n        // so no division by 0 is possible\n        uint256 vestedTokens = tokens.mul(time.sub(start)) / vested.sub(start);\n\n        // tokens - vestedTokens\n        return tokens.sub(vestedTokens);\n    }\n\n    function _transferableBalance(address _holder, uint256 _time) internal view returns (uint256) {\n        uint256 transferable = token.balanceOf(_holder);\n\n        // This check is not strictly necessary for the current version of this contract, as\n        // Token Managers now cannot assign vestings to themselves.\n        // However, this was a possibility in the past, so in case there were vestings assigned to\n        // themselves, this will still return the correct value (entire balance, as the Token\n        // Manager does not have a spending limit on its own balance).\n        if (_holder != address(this)) {\n            uint256 vestingsCount = vestingsLengths[_holder];\n            for (uint256 i = 0; i < vestingsCount; i++) {\n                TokenVesting storage v = vestings[_holder][i];\n                uint256 nonTransferable = _calculateNonVestedTokens(\n                    v.amount,\n                    _time,\n                    v.start,\n                    v.cliff,\n                    v.vesting\n                );\n                transferable = transferable.sub(nonTransferable);\n            }\n        }\n\n        return transferable;\n    }\n}\n"
    },
    "@aragon/apps-survey/contracts/Survey.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    GPL-3.0-or-later\n */\n\npragma solidity 0.4.24;\n\nimport \"@aragon/os/contracts/apps/AragonApp.sol\";\n\nimport \"@aragon/os/contracts/lib/math/SafeMath.sol\";\nimport \"@aragon/os/contracts/lib/math/SafeMath64.sol\";\n\nimport \"@aragon/apps-shared-minime/contracts/MiniMeToken.sol\";\n\n\ncontract Survey is AragonApp {\n    using SafeMath for uint256;\n    using SafeMath64 for uint64;\n\n    bytes32 public constant CREATE_SURVEYS_ROLE = keccak256(\"CREATE_SURVEYS_ROLE\");\n    bytes32 public constant MODIFY_PARTICIPATION_ROLE = keccak256(\"MODIFY_PARTICIPATION_ROLE\");\n\n    uint64 public constant PCT_BASE = 10 ** 18; // 0% = 0; 1% = 10^16; 100% = 10^18\n    uint256 public constant ABSTAIN_VOTE = 0;\n\n    string private constant ERROR_MIN_PARTICIPATION = \"SURVEY_MIN_PARTICIPATION\";\n    string private constant ERROR_NO_SURVEY = \"SURVEY_NO_SURVEY\";\n    string private constant ERROR_NO_VOTING_POWER = \"SURVEY_NO_VOTING_POWER\";\n    string private constant ERROR_CAN_NOT_VOTE = \"SURVEY_CAN_NOT_VOTE\";\n    string private constant ERROR_VOTE_WRONG_INPUT = \"SURVEY_VOTE_WRONG_INPUT\";\n    string private constant ERROR_VOTE_WRONG_OPTION = \"SURVEY_VOTE_WRONG_OPTION\";\n    string private constant ERROR_NO_STAKE = \"SURVEY_NO_STAKE\";\n    string private constant ERROR_OPTIONS_NOT_ORDERED = \"SURVEY_OPTIONS_NOT_ORDERED\";\n    string private constant ERROR_NO_OPTION = \"SURVEY_NO_OPTION\";\n\n    struct OptionCast {\n        uint256 optionId;\n        uint256 stake;\n    }\n\n    /* Allows for multiple option votes.\n     * Index 0 is always used for the ABSTAIN_VOTE option, that's calculated automatically by the\n     * contract.\n     */\n    struct MultiOptionVote {\n        uint256 optionsCastedLength;\n        // `castedVotes` simulates an array\n        // Each OptionCast in `castedVotes` must be ordered by ascending option IDs\n        mapping (uint256 => OptionCast) castedVotes;\n    }\n\n    struct SurveyStruct {\n        uint64 startDate;\n        uint64 snapshotBlock;\n        uint64 minParticipationPct;\n        uint256 options;\n        uint256 votingPower;                    // total tokens that can cast a vote\n        uint256 participation;                  // tokens that casted a vote\n\n        // Note that option IDs are from 1 to `options`, due to ABSTAIN_VOTE taking 0\n        mapping (uint256 => uint256) optionPower;       // option ID -> voting power for option\n        mapping (address => MultiOptionVote) votes;     // voter -> options voted, with its stakes\n    }\n\n    MiniMeToken public token;\n    uint64 public minParticipationPct;\n    uint64 public surveyTime;\n\n    // We are mimicing an array, we use a mapping instead to make app upgrade more graceful\n    mapping (uint256 => SurveyStruct) internal surveys;\n    uint256 public surveysLength;\n\n    event StartSurvey(uint256 indexed surveyId, address indexed creator, string metadata);\n    event CastVote(uint256 indexed surveyId, address indexed voter, uint256 option, uint256 stake, uint256 optionPower);\n    event ResetVote(uint256 indexed surveyId, address indexed voter, uint256 option, uint256 previousStake, uint256 optionPower);\n    event ChangeMinParticipation(uint64 minParticipationPct);\n\n    modifier acceptableMinParticipationPct(uint64 _minParticipationPct) {\n        require(_minParticipationPct > 0 && _minParticipationPct <= PCT_BASE, ERROR_MIN_PARTICIPATION);\n        _;\n    }\n\n    modifier surveyExists(uint256 _surveyId) {\n        require(_surveyId < surveysLength, ERROR_NO_SURVEY);\n        _;\n    }\n\n    /**\n    * @notice Initialize Survey app with `_token.symbol(): string` for governance, minimum acceptance participation of `@formatPct(_minParticipationPct)`%, and a voting duration of `@transformTime(_surveyTime)`\n    * @param _token MiniMeToken address that will be used as governance token\n    * @param _minParticipationPct Percentage of total voting power that must participate in a survey for it to be taken into account (expressed as a 10^18 percentage, (eg 10^16 = 1%, 10^18 = 100%)\n    * @param _surveyTime Seconds that a survey will be open for token holders to vote\n    */\n    function initialize(\n        MiniMeToken _token,\n        uint64 _minParticipationPct,\n        uint64 _surveyTime\n    )\n        external\n        onlyInit\n        acceptableMinParticipationPct(_minParticipationPct)\n    {\n        initialized();\n\n        token = _token;\n        minParticipationPct = _minParticipationPct;\n        surveyTime = _surveyTime;\n    }\n\n    /**\n    * @notice Change minimum acceptance participation to `@formatPct(_minParticipationPct)`%\n    * @param _minParticipationPct New acceptance participation\n    */\n    function changeMinAcceptParticipationPct(uint64 _minParticipationPct)\n        external\n        authP(MODIFY_PARTICIPATION_ROLE, arr(uint256(_minParticipationPct), uint256(minParticipationPct)))\n        acceptableMinParticipationPct(_minParticipationPct)\n    {\n        minParticipationPct = _minParticipationPct;\n\n        emit ChangeMinParticipation(_minParticipationPct);\n    }\n\n    /**\n    * @notice Create a new non-binding survey about \"`_metadata`\"\n    * @param _metadata Survey metadata\n    * @param _options Number of options voters can decide between\n    * @return surveyId id for newly created survey\n    */\n    function newSurvey(string _metadata, uint256 _options) external auth(CREATE_SURVEYS_ROLE) returns (uint256 surveyId) {\n        uint64 snapshotBlock = getBlockNumber64() - 1; // avoid double voting in this very block\n        uint256 votingPower = token.totalSupplyAt(snapshotBlock);\n        require(votingPower > 0, ERROR_NO_VOTING_POWER);\n\n        surveyId = surveysLength++;\n\n        SurveyStruct storage survey = surveys[surveyId];\n        survey.startDate = getTimestamp64();\n        survey.snapshotBlock = snapshotBlock; // avoid double voting in this very block\n        survey.minParticipationPct = minParticipationPct;\n        survey.options = _options;\n        survey.votingPower = votingPower;\n\n        emit StartSurvey(surveyId, msg.sender, _metadata);\n    }\n\n    /**\n    * @notice Reset previously casted vote in survey #`_surveyId`, if any.\n    * @dev Initialization check is implicitly provided by `surveyExists()` as new surveys can only\n    *      be created via `newSurvey(),` which requires initialization\n    * @param _surveyId Id for survey\n    */\n    function resetVote(uint256 _surveyId) external surveyExists(_surveyId) {\n        require(canVote(_surveyId, msg.sender), ERROR_CAN_NOT_VOTE);\n\n        _resetVote(_surveyId);\n    }\n\n    /**\n    * @notice Vote for multiple options in survey #`_surveyId`.\n    * @dev Initialization check is implicitly provided by `surveyExists()` as new surveys can only\n    *      be created via `newSurvey(),` which requires initialization\n    * @param _surveyId Id for survey\n    * @param _optionIds Array with indexes of supported options\n    * @param _stakes Number of tokens assigned to each option\n    */\n    function voteOptions(uint256 _surveyId, uint256[] _optionIds, uint256[] _stakes)\n        external\n        surveyExists(_surveyId)\n    {\n        require(_optionIds.length == _stakes.length && _optionIds.length > 0, ERROR_VOTE_WRONG_INPUT);\n        require(canVote(_surveyId, msg.sender), ERROR_CAN_NOT_VOTE);\n\n        _voteOptions(_surveyId, _optionIds, _stakes);\n    }\n\n    /**\n    * @notice Vote option #`_optionId` in survey #`_surveyId`.\n    * @dev Initialization check is implicitly provided by `surveyExists()` as new surveys can only\n    *      be created via `newSurvey(),` which requires initialization\n    * @dev It will use the whole balance.\n    * @param _surveyId Id for survey\n    * @param _optionId Index of supported option\n    */\n    function voteOption(uint256 _surveyId, uint256 _optionId) external surveyExists(_surveyId) {\n        require(canVote(_surveyId, msg.sender), ERROR_CAN_NOT_VOTE);\n\n        SurveyStruct storage survey = surveys[_surveyId];\n        // This could re-enter, though we can asume the governance token is not maliciuous\n        uint256 voterStake = token.balanceOfAt(msg.sender, survey.snapshotBlock);\n        uint256[] memory options = new uint256[](1);\n        uint256[] memory stakes = new uint256[](1);\n        options[0] = _optionId;\n        stakes[0] = voterStake;\n\n        _voteOptions(_surveyId, options, stakes);\n    }\n\n    // Getter fns\n\n    function canVote(uint256 _surveyId, address _voter) public view surveyExists(_surveyId) returns (bool) {\n        SurveyStruct storage survey = surveys[_surveyId];\n\n        return _isSurveyOpen(survey) && token.balanceOfAt(_voter, survey.snapshotBlock) > 0;\n    }\n\n    function getSurvey(uint256 _surveyId)\n        public\n        view\n        surveyExists(_surveyId)\n        returns (\n            bool open,\n            uint64 startDate,\n            uint64 snapshotBlock,\n            uint64 minParticipation,\n            uint256 votingPower,\n            uint256 participation,\n            uint256 options\n        )\n    {\n        SurveyStruct storage survey = surveys[_surveyId];\n\n        open = _isSurveyOpen(survey);\n        startDate = survey.startDate;\n        snapshotBlock = survey.snapshotBlock;\n        minParticipation = survey.minParticipationPct;\n        votingPower = survey.votingPower;\n        participation = survey.participation;\n        options = survey.options;\n    }\n\n    /**\n    * @dev This is not meant to be used on-chain\n    */\n    /* solium-disable-next-line function-order */\n    function getVoterState(uint256 _surveyId, address _voter)\n        external\n        view\n        surveyExists(_surveyId)\n        returns (uint256[] options, uint256[] stakes)\n    {\n        MultiOptionVote storage vote = surveys[_surveyId].votes[_voter];\n\n        if (vote.optionsCastedLength == 0) {\n            return (new uint256[](0), new uint256[](0));\n        }\n\n        options = new uint256[](vote.optionsCastedLength + 1);\n        stakes = new uint256[](vote.optionsCastedLength + 1);\n        for (uint256 i = 0; i <= vote.optionsCastedLength; i++) {\n            options[i] = vote.castedVotes[i].optionId;\n            stakes[i] = vote.castedVotes[i].stake;\n        }\n    }\n\n    function getOptionPower(uint256 _surveyId, uint256 _optionId) public view surveyExists(_surveyId) returns (uint256) {\n        SurveyStruct storage survey = surveys[_surveyId];\n        require(_optionId <= survey.options, ERROR_NO_OPTION);\n\n        return survey.optionPower[_optionId];\n    }\n\n    function isParticipationAchieved(uint256 _surveyId) public view surveyExists(_surveyId) returns (bool) {\n        SurveyStruct storage survey = surveys[_surveyId];\n        // votingPower is always > 0\n        uint256 participationPct = survey.participation.mul(PCT_BASE) / survey.votingPower;\n        return participationPct >= survey.minParticipationPct;\n    }\n\n    // Internal fns\n\n    /*\n    * @dev Assumes the survey exists and that msg.sender can vote\n    */\n    function _resetVote(uint256 _surveyId) internal {\n        SurveyStruct storage survey = surveys[_surveyId];\n        MultiOptionVote storage previousVote = survey.votes[msg.sender];\n        if (previousVote.optionsCastedLength > 0) {\n            // Voter removes their vote (index 0 is the abstain vote)\n            for (uint256 i = 1; i <= previousVote.optionsCastedLength; i++) {\n                OptionCast storage previousOptionCast = previousVote.castedVotes[i];\n                uint256 previousOptionPower = survey.optionPower[previousOptionCast.optionId];\n                uint256 currentOptionPower = previousOptionPower.sub(previousOptionCast.stake);\n                survey.optionPower[previousOptionCast.optionId] = currentOptionPower;\n\n                emit ResetVote(_surveyId, msg.sender, previousOptionCast.optionId, previousOptionCast.stake, currentOptionPower);\n            }\n\n            // Compute previously casted votes (i.e. substract non-used tokens from stake)\n            uint256 voterStake = token.balanceOfAt(msg.sender, survey.snapshotBlock);\n            uint256 previousParticipation = voterStake.sub(previousVote.castedVotes[0].stake);\n            // And remove it from total participation\n            survey.participation = survey.participation.sub(previousParticipation);\n\n            // Reset previously voted options\n            delete survey.votes[msg.sender];\n        }\n    }\n\n    /*\n    * @dev Assumes the survey exists and that msg.sender can vote\n    */\n    function _voteOptions(uint256 _surveyId, uint256[] _optionIds, uint256[] _stakes) internal {\n        SurveyStruct storage survey = surveys[_surveyId];\n        MultiOptionVote storage senderVotes = survey.votes[msg.sender];\n\n        // Revert previous votes, if any\n        _resetVote(_surveyId);\n\n        uint256 totalVoted = 0;\n        // Reserve first index for ABSTAIN_VOTE\n        senderVotes.castedVotes[0] = OptionCast({ optionId: ABSTAIN_VOTE, stake: 0 });\n        for (uint256 optionIndex = 1; optionIndex <= _optionIds.length; optionIndex++) {\n            // Voters don't specify that they're abstaining,\n            // but we still keep track of this by reserving the first index of a survey's votes.\n            // We subtract 1 from the indexes of the arrays passed in by the voter to account for this.\n            uint256 optionId = _optionIds[optionIndex - 1];\n            uint256 stake = _stakes[optionIndex - 1];\n\n            require(optionId != ABSTAIN_VOTE && optionId <= survey.options, ERROR_VOTE_WRONG_OPTION);\n            require(stake > 0, ERROR_NO_STAKE);\n            // Let's avoid repeating an option by making sure that ascending order is preserved in\n            // the options array by checking that the current optionId is larger than the last one\n            // we added\n            require(senderVotes.castedVotes[optionIndex - 1].optionId < optionId, ERROR_OPTIONS_NOT_ORDERED);\n\n            // Register voter amount\n            senderVotes.castedVotes[optionIndex] = OptionCast({ optionId: optionId, stake: stake });\n\n            // Add to total option support\n            survey.optionPower[optionId] = survey.optionPower[optionId].add(stake);\n\n            // Keep track of stake used so far\n            totalVoted = totalVoted.add(stake);\n\n            emit CastVote(_surveyId, msg.sender, optionId, stake, survey.optionPower[optionId]);\n        }\n\n        // Compute and register non used tokens\n        // Implictly we are doing require(totalVoted <= voterStake) too\n        // (as stated before, index 0 is for ABSTAIN_VOTE option)\n        uint256 voterStake = token.balanceOfAt(msg.sender, survey.snapshotBlock);\n        senderVotes.castedVotes[0].stake = voterStake.sub(totalVoted);\n\n        // Register number of options voted\n        senderVotes.optionsCastedLength = _optionIds.length;\n\n        // Add voter tokens to participation\n        survey.participation = survey.participation.add(totalVoted);\n        assert(survey.participation <= survey.votingPower);\n    }\n\n    function _isSurveyOpen(SurveyStruct storage _survey) internal view returns (bool) {\n        return getTimestamp64() < _survey.startDate.add(surveyTime);\n    }\n}\n"
    },
    "@aragon/os/contracts/acl/ACL.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"../apps/AragonApp.sol\";\nimport \"../common/ConversionHelpers.sol\";\nimport \"../common/TimeHelpers.sol\";\nimport \"./ACLSyntaxSugar.sol\";\nimport \"./IACL.sol\";\nimport \"./IACLOracle.sol\";\n\n\n/* solium-disable function-order */\n// Allow public initialize() to be first\ncontract ACL is IACL, TimeHelpers, AragonApp, ACLHelpers {\n    /* Hardcoded constants to save gas\n    bytes32 public constant CREATE_PERMISSIONS_ROLE = keccak256(\"CREATE_PERMISSIONS_ROLE\");\n    */\n    bytes32 public constant CREATE_PERMISSIONS_ROLE = 0x0b719b33c83b8e5d300c521cb8b54ae9bd933996a14bef8c2f4e0285d2d2400a;\n\n    enum Op { NONE, EQ, NEQ, GT, LT, GTE, LTE, RET, NOT, AND, OR, XOR, IF_ELSE } // op types\n\n    struct Param {\n        uint8 id;\n        uint8 op;\n        uint240 value; // even though value is an uint240 it can store addresses\n        // in the case of 32 byte hashes losing 2 bytes precision isn't a huge deal\n        // op and id take less than 1 byte each so it can be kept in 1 sstore\n    }\n\n    uint8 internal constant BLOCK_NUMBER_PARAM_ID = 200;\n    uint8 internal constant TIMESTAMP_PARAM_ID    = 201;\n    // 202 is unused\n    uint8 internal constant ORACLE_PARAM_ID       = 203;\n    uint8 internal constant LOGIC_OP_PARAM_ID     = 204;\n    uint8 internal constant PARAM_VALUE_PARAM_ID  = 205;\n    // TODO: Add execution times param type?\n\n    /* Hardcoded constant to save gas\n    bytes32 public constant EMPTY_PARAM_HASH = keccak256(uint256(0));\n    */\n    bytes32 public constant EMPTY_PARAM_HASH = 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563;\n    bytes32 public constant NO_PERMISSION = bytes32(0);\n    address public constant ANY_ENTITY = address(-1);\n    address public constant BURN_ENTITY = address(1); // address(0) is already used as \"no permission manager\"\n\n    uint256 internal constant ORACLE_CHECK_GAS = 30000;\n\n    string private constant ERROR_AUTH_INIT_KERNEL = \"ACL_AUTH_INIT_KERNEL\";\n    string private constant ERROR_AUTH_NO_MANAGER = \"ACL_AUTH_NO_MANAGER\";\n    string private constant ERROR_EXISTENT_MANAGER = \"ACL_EXISTENT_MANAGER\";\n\n    // Whether someone has a permission\n    mapping (bytes32 => bytes32) internal permissions; // permissions hash => params hash\n    mapping (bytes32 => Param[]) internal permissionParams; // params hash => params\n\n    // Who is the manager of a permission\n    mapping (bytes32 => address) internal permissionManager;\n\n    event SetPermission(address indexed entity, address indexed app, bytes32 indexed role, bool allowed);\n    event SetPermissionParams(address indexed entity, address indexed app, bytes32 indexed role, bytes32 paramsHash);\n    event ChangePermissionManager(address indexed app, bytes32 indexed role, address indexed manager);\n\n    modifier onlyPermissionManager(address _app, bytes32 _role) {\n        require(msg.sender == getPermissionManager(_app, _role), ERROR_AUTH_NO_MANAGER);\n        _;\n    }\n\n    modifier noPermissionManager(address _app, bytes32 _role) {\n        // only allow permission creation (or re-creation) when there is no manager\n        require(getPermissionManager(_app, _role) == address(0), ERROR_EXISTENT_MANAGER);\n        _;\n    }\n\n    /**\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\n    * @notice Initialize an ACL instance and set `_permissionsCreator` as the entity that can create other permissions\n    * @param _permissionsCreator Entity that will be given permission over createPermission\n    */\n    function initialize(address _permissionsCreator) public onlyInit {\n        initialized();\n        require(msg.sender == address(kernel()), ERROR_AUTH_INIT_KERNEL);\n\n        _createPermission(_permissionsCreator, this, CREATE_PERMISSIONS_ROLE, _permissionsCreator);\n    }\n\n    /**\n    * @dev Creates a permission that wasn't previously set and managed.\n    *      If a created permission is removed it is possible to reset it with createPermission.\n    *      This is the **ONLY** way to create permissions and set managers to permissions that don't\n    *      have a manager.\n    *      In terms of the ACL being initialized, this function implicitly protects all the other\n    *      state-changing external functions, as they all require the sender to be a manager.\n    * @notice Create a new permission granting `_entity` the ability to perform actions requiring `_role` on `_app`, setting `_manager` as the permission's manager\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\n    * @param _role Identifier for the group of actions in app given access to perform\n    * @param _manager Address of the entity that will be able to grant and revoke the permission further.\n    */\n    function createPermission(address _entity, address _app, bytes32 _role, address _manager)\n        external\n        auth(CREATE_PERMISSIONS_ROLE)\n        noPermissionManager(_app, _role)\n    {\n        _createPermission(_entity, _app, _role, _manager);\n    }\n\n    /**\n    * @dev Grants permission if allowed. This requires `msg.sender` to be the permission manager\n    * @notice Grant `_entity` the ability to perform actions requiring `_role` on `_app`\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\n    * @param _role Identifier for the group of actions in app given access to perform\n    */\n    function grantPermission(address _entity, address _app, bytes32 _role)\n        external\n    {\n        grantPermissionP(_entity, _app, _role, new uint256[](0));\n    }\n\n    /**\n    * @dev Grants a permission with parameters if allowed. This requires `msg.sender` to be the permission manager\n    * @notice Grant `_entity` the ability to perform actions requiring `_role` on `_app`\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\n    * @param _role Identifier for the group of actions in app given access to perform\n    * @param _params Permission parameters\n    */\n    function grantPermissionP(address _entity, address _app, bytes32 _role, uint256[] _params)\n        public\n        onlyPermissionManager(_app, _role)\n    {\n        bytes32 paramsHash = _params.length > 0 ? _saveParams(_params) : EMPTY_PARAM_HASH;\n        _setPermission(_entity, _app, _role, paramsHash);\n    }\n\n    /**\n    * @dev Revokes permission if allowed. This requires `msg.sender` to be the the permission manager\n    * @notice Revoke from `_entity` the ability to perform actions requiring `_role` on `_app`\n    * @param _entity Address of the whitelisted entity to revoke access from\n    * @param _app Address of the app in which the role will be revoked\n    * @param _role Identifier for the group of actions in app being revoked\n    */\n    function revokePermission(address _entity, address _app, bytes32 _role)\n        external\n        onlyPermissionManager(_app, _role)\n    {\n        _setPermission(_entity, _app, _role, NO_PERMISSION);\n    }\n\n    /**\n    * @notice Set `_newManager` as the manager of `_role` in `_app`\n    * @param _newManager Address for the new manager\n    * @param _app Address of the app in which the permission management is being transferred\n    * @param _role Identifier for the group of actions being transferred\n    */\n    function setPermissionManager(address _newManager, address _app, bytes32 _role)\n        external\n        onlyPermissionManager(_app, _role)\n    {\n        _setPermissionManager(_newManager, _app, _role);\n    }\n\n    /**\n    * @notice Remove the manager of `_role` in `_app`\n    * @param _app Address of the app in which the permission is being unmanaged\n    * @param _role Identifier for the group of actions being unmanaged\n    */\n    function removePermissionManager(address _app, bytes32 _role)\n        external\n        onlyPermissionManager(_app, _role)\n    {\n        _setPermissionManager(address(0), _app, _role);\n    }\n\n    /**\n    * @notice Burn non-existent `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)\n    * @param _app Address of the app in which the permission is being burned\n    * @param _role Identifier for the group of actions being burned\n    */\n    function createBurnedPermission(address _app, bytes32 _role)\n        external\n        auth(CREATE_PERMISSIONS_ROLE)\n        noPermissionManager(_app, _role)\n    {\n        _setPermissionManager(BURN_ENTITY, _app, _role);\n    }\n\n    /**\n    * @notice Burn `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)\n    * @param _app Address of the app in which the permission is being burned\n    * @param _role Identifier for the group of actions being burned\n    */\n    function burnPermissionManager(address _app, bytes32 _role)\n        external\n        onlyPermissionManager(_app, _role)\n    {\n        _setPermissionManager(BURN_ENTITY, _app, _role);\n    }\n\n    /**\n     * @notice Get parameters for permission array length\n     * @param _entity Address of the whitelisted entity that will be able to perform the role\n     * @param _app Address of the app\n     * @param _role Identifier for a group of actions in app\n     * @return Length of the array\n     */\n    function getPermissionParamsLength(address _entity, address _app, bytes32 _role) external view returns (uint) {\n        return permissionParams[permissions[permissionHash(_entity, _app, _role)]].length;\n    }\n\n    /**\n    * @notice Get parameter for permission\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\n    * @param _app Address of the app\n    * @param _role Identifier for a group of actions in app\n    * @param _index Index of parameter in the array\n    * @return Parameter (id, op, value)\n    */\n    function getPermissionParam(address _entity, address _app, bytes32 _role, uint _index)\n        external\n        view\n        returns (uint8, uint8, uint240)\n    {\n        Param storage param = permissionParams[permissions[permissionHash(_entity, _app, _role)]][_index];\n        return (param.id, param.op, param.value);\n    }\n\n    /**\n    * @dev Get manager for permission\n    * @param _app Address of the app\n    * @param _role Identifier for a group of actions in app\n    * @return address of the manager for the permission\n    */\n    function getPermissionManager(address _app, bytes32 _role) public view returns (address) {\n        return permissionManager[roleHash(_app, _role)];\n    }\n\n    /**\n    * @dev Function called by apps to check ACL on kernel or to check permission statu\n    * @param _who Sender of the original call\n    * @param _where Address of the app\n    * @param _where Identifier for a group of actions in app\n    * @param _how Permission parameters\n    * @return boolean indicating whether the ACL allows the role or not\n    */\n    function hasPermission(address _who, address _where, bytes32 _what, bytes memory _how) public view returns (bool) {\n        return hasPermission(_who, _where, _what, ConversionHelpers.dangerouslyCastBytesToUintArray(_how));\n    }\n\n    function hasPermission(address _who, address _where, bytes32 _what, uint256[] memory _how) public view returns (bool) {\n        bytes32 whoParams = permissions[permissionHash(_who, _where, _what)];\n        if (whoParams != NO_PERMISSION && evalParams(whoParams, _who, _where, _what, _how)) {\n            return true;\n        }\n\n        bytes32 anyParams = permissions[permissionHash(ANY_ENTITY, _where, _what)];\n        if (anyParams != NO_PERMISSION && evalParams(anyParams, ANY_ENTITY, _where, _what, _how)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function hasPermission(address _who, address _where, bytes32 _what) public view returns (bool) {\n        uint256[] memory empty = new uint256[](0);\n        return hasPermission(_who, _where, _what, empty);\n    }\n\n    function evalParams(\n        bytes32 _paramsHash,\n        address _who,\n        address _where,\n        bytes32 _what,\n        uint256[] _how\n    ) public view returns (bool)\n    {\n        if (_paramsHash == EMPTY_PARAM_HASH) {\n            return true;\n        }\n\n        return _evalParam(_paramsHash, 0, _who, _where, _what, _how);\n    }\n\n    /**\n    * @dev Internal createPermission for access inside the kernel (on instantiation)\n    */\n    function _createPermission(address _entity, address _app, bytes32 _role, address _manager) internal {\n        _setPermission(_entity, _app, _role, EMPTY_PARAM_HASH);\n        _setPermissionManager(_manager, _app, _role);\n    }\n\n    /**\n    * @dev Internal function called to actually save the permission\n    */\n    function _setPermission(address _entity, address _app, bytes32 _role, bytes32 _paramsHash) internal {\n        permissions[permissionHash(_entity, _app, _role)] = _paramsHash;\n        bool entityHasPermission = _paramsHash != NO_PERMISSION;\n        bool permissionHasParams = entityHasPermission && _paramsHash != EMPTY_PARAM_HASH;\n\n        emit SetPermission(_entity, _app, _role, entityHasPermission);\n        if (permissionHasParams) {\n            emit SetPermissionParams(_entity, _app, _role, _paramsHash);\n        }\n    }\n\n    function _saveParams(uint256[] _encodedParams) internal returns (bytes32) {\n        bytes32 paramHash = keccak256(abi.encodePacked(_encodedParams));\n        Param[] storage params = permissionParams[paramHash];\n\n        if (params.length == 0) { // params not saved before\n            for (uint256 i = 0; i < _encodedParams.length; i++) {\n                uint256 encodedParam = _encodedParams[i];\n                Param memory param = Param(decodeParamId(encodedParam), decodeParamOp(encodedParam), uint240(encodedParam));\n                params.push(param);\n            }\n        }\n\n        return paramHash;\n    }\n\n    function _evalParam(\n        bytes32 _paramsHash,\n        uint32 _paramId,\n        address _who,\n        address _where,\n        bytes32 _what,\n        uint256[] _how\n    ) internal view returns (bool)\n    {\n        if (_paramId >= permissionParams[_paramsHash].length) {\n            return false; // out of bounds\n        }\n\n        Param memory param = permissionParams[_paramsHash][_paramId];\n\n        if (param.id == LOGIC_OP_PARAM_ID) {\n            return _evalLogic(param, _paramsHash, _who, _where, _what, _how);\n        }\n\n        uint256 value;\n        uint256 comparedTo = uint256(param.value);\n\n        // get value\n        if (param.id == ORACLE_PARAM_ID) {\n            value = checkOracle(IACLOracle(param.value), _who, _where, _what, _how) ? 1 : 0;\n            comparedTo = 1;\n        } else if (param.id == BLOCK_NUMBER_PARAM_ID) {\n            value = getBlockNumber();\n        } else if (param.id == TIMESTAMP_PARAM_ID) {\n            value = getTimestamp();\n        } else if (param.id == PARAM_VALUE_PARAM_ID) {\n            value = uint256(param.value);\n        } else {\n            if (param.id >= _how.length) {\n                return false;\n            }\n            value = uint256(uint240(_how[param.id])); // force lost precision\n        }\n\n        if (Op(param.op) == Op.RET) {\n            return uint256(value) > 0;\n        }\n\n        return compare(value, Op(param.op), comparedTo);\n    }\n\n    function _evalLogic(Param _param, bytes32 _paramsHash, address _who, address _where, bytes32 _what, uint256[] _how)\n        internal\n        view\n        returns (bool)\n    {\n        if (Op(_param.op) == Op.IF_ELSE) {\n            uint32 conditionParam;\n            uint32 successParam;\n            uint32 failureParam;\n\n            (conditionParam, successParam, failureParam) = decodeParamsList(uint256(_param.value));\n            bool result = _evalParam(_paramsHash, conditionParam, _who, _where, _what, _how);\n\n            return _evalParam(_paramsHash, result ? successParam : failureParam, _who, _where, _what, _how);\n        }\n\n        uint32 param1;\n        uint32 param2;\n\n        (param1, param2,) = decodeParamsList(uint256(_param.value));\n        bool r1 = _evalParam(_paramsHash, param1, _who, _where, _what, _how);\n\n        if (Op(_param.op) == Op.NOT) {\n            return !r1;\n        }\n\n        if (r1 && Op(_param.op) == Op.OR) {\n            return true;\n        }\n\n        if (!r1 && Op(_param.op) == Op.AND) {\n            return false;\n        }\n\n        bool r2 = _evalParam(_paramsHash, param2, _who, _where, _what, _how);\n\n        if (Op(_param.op) == Op.XOR) {\n            return r1 != r2;\n        }\n\n        return r2; // both or and and depend on result of r2 after checks\n    }\n\n    function compare(uint256 _a, Op _op, uint256 _b) internal pure returns (bool) {\n        if (_op == Op.EQ)  return _a == _b;                              // solium-disable-line lbrace\n        if (_op == Op.NEQ) return _a != _b;                              // solium-disable-line lbrace\n        if (_op == Op.GT)  return _a > _b;                               // solium-disable-line lbrace\n        if (_op == Op.LT)  return _a < _b;                               // solium-disable-line lbrace\n        if (_op == Op.GTE) return _a >= _b;                              // solium-disable-line lbrace\n        if (_op == Op.LTE) return _a <= _b;                              // solium-disable-line lbrace\n        return false;\n    }\n\n    function checkOracle(IACLOracle _oracleAddr, address _who, address _where, bytes32 _what, uint256[] _how) internal view returns (bool) {\n        bytes4 sig = _oracleAddr.canPerform.selector;\n\n        // a raw call is required so we can return false if the call reverts, rather than reverting\n        bytes memory checkCalldata = abi.encodeWithSelector(sig, _who, _where, _what, _how);\n        uint256 oracleCheckGas = ORACLE_CHECK_GAS;\n\n        bool ok;\n        assembly {\n            ok := staticcall(oracleCheckGas, _oracleAddr, add(checkCalldata, 0x20), mload(checkCalldata), 0, 0)\n        }\n\n        if (!ok) {\n            return false;\n        }\n\n        uint256 size;\n        assembly { size := returndatasize }\n        if (size != 32) {\n            return false;\n        }\n\n        bool result;\n        assembly {\n            let ptr := mload(0x40)       // get next free memory ptr\n            returndatacopy(ptr, 0, size) // copy return from above `staticcall`\n            result := mload(ptr)         // read data at ptr and set it to result\n            mstore(ptr, 0)               // set pointer memory to 0 so it still is the next free ptr\n        }\n\n        return result;\n    }\n\n    /**\n    * @dev Internal function that sets management\n    */\n    function _setPermissionManager(address _newManager, address _app, bytes32 _role) internal {\n        permissionManager[roleHash(_app, _role)] = _newManager;\n        emit ChangePermissionManager(_app, _role, _newManager);\n    }\n\n    function roleHash(address _where, bytes32 _what) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"ROLE\", _where, _what));\n    }\n\n    function permissionHash(address _who, address _where, bytes32 _what) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"PERMISSION\", _who, _where, _what));\n    }\n}\n"
    },
    "@aragon/os/contracts/acl/IACLOracle.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ninterface IACLOracle {\n    function canPerform(address who, address where, bytes32 what, uint256[] how) external view returns (bool);\n}\n"
    },
    "@aragon/os/contracts/apm/Repo.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"../apps/AragonApp.sol\";\n\n\n/* solium-disable function-order */\n// Allow public initialize() to be first\ncontract Repo is AragonApp {\n    /* Hardcoded constants to save gas\n    bytes32 public constant CREATE_VERSION_ROLE = keccak256(\"CREATE_VERSION_ROLE\");\n    */\n    bytes32 public constant CREATE_VERSION_ROLE = 0x1f56cfecd3595a2e6cc1a7e6cb0b20df84cdbd92eff2fee554e70e4e45a9a7d8;\n\n    string private constant ERROR_INVALID_BUMP = \"REPO_INVALID_BUMP\";\n    string private constant ERROR_INVALID_VERSION = \"REPO_INVALID_VERSION\";\n    string private constant ERROR_INEXISTENT_VERSION = \"REPO_INEXISTENT_VERSION\";\n\n    struct Version {\n        uint16[3] semanticVersion;\n        address contractAddress;\n        bytes contentURI;\n    }\n\n    uint256 internal versionsNextIndex;\n    mapping (uint256 => Version) internal versions;\n    mapping (bytes32 => uint256) internal versionIdForSemantic;\n    mapping (address => uint256) internal latestVersionIdForContract;\n\n    event NewVersion(uint256 versionId, uint16[3] semanticVersion);\n\n    /**\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\n    * @notice Initialize this Repo\n    */\n    function initialize() public onlyInit {\n        initialized();\n        versionsNextIndex = 1;\n    }\n\n    /**\n    * @notice Create new version with contract `_contractAddress` and content `@fromHex(_contentURI)`\n    * @param _newSemanticVersion Semantic version for new repo version\n    * @param _contractAddress address for smart contract logic for version (if set to 0, it uses last versions' contractAddress)\n    * @param _contentURI External URI for fetching new version's content\n    */\n    function newVersion(\n        uint16[3] _newSemanticVersion,\n        address _contractAddress,\n        bytes _contentURI\n    ) public auth(CREATE_VERSION_ROLE)\n    {\n        address contractAddress = _contractAddress;\n        uint256 lastVersionIndex = versionsNextIndex - 1;\n\n        uint16[3] memory lastSematicVersion;\n\n        if (lastVersionIndex > 0) {\n            Version storage lastVersion = versions[lastVersionIndex];\n            lastSematicVersion = lastVersion.semanticVersion;\n\n            if (contractAddress == address(0)) {\n                contractAddress = lastVersion.contractAddress;\n            }\n            // Only allows smart contract change on major version bumps\n            require(\n                lastVersion.contractAddress == contractAddress || _newSemanticVersion[0] > lastVersion.semanticVersion[0],\n                ERROR_INVALID_VERSION\n            );\n        }\n\n        require(isValidBump(lastSematicVersion, _newSemanticVersion), ERROR_INVALID_BUMP);\n\n        uint256 versionId = versionsNextIndex++;\n        versions[versionId] = Version(_newSemanticVersion, contractAddress, _contentURI);\n        versionIdForSemantic[semanticVersionHash(_newSemanticVersion)] = versionId;\n        latestVersionIdForContract[contractAddress] = versionId;\n\n        emit NewVersion(versionId, _newSemanticVersion);\n    }\n\n    function getLatest() public view returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI) {\n        return getByVersionId(versionsNextIndex - 1);\n    }\n\n    function getLatestForContractAddress(address _contractAddress)\n        public\n        view\n        returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI)\n    {\n        return getByVersionId(latestVersionIdForContract[_contractAddress]);\n    }\n\n    function getBySemanticVersion(uint16[3] _semanticVersion)\n        public\n        view\n        returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI)\n    {\n        return getByVersionId(versionIdForSemantic[semanticVersionHash(_semanticVersion)]);\n    }\n\n    function getByVersionId(uint _versionId) public view returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI) {\n        require(_versionId > 0 && _versionId < versionsNextIndex, ERROR_INEXISTENT_VERSION);\n        Version storage version = versions[_versionId];\n        return (version.semanticVersion, version.contractAddress, version.contentURI);\n    }\n\n    function getVersionsCount() public view returns (uint256) {\n        return versionsNextIndex - 1;\n    }\n\n    function isValidBump(uint16[3] _oldVersion, uint16[3] _newVersion) public pure returns (bool) {\n        bool hasBumped;\n        uint i = 0;\n        while (i < 3) {\n            if (hasBumped) {\n                if (_newVersion[i] != 0) {\n                    return false;\n                }\n            } else if (_newVersion[i] != _oldVersion[i]) {\n                if (_oldVersion[i] > _newVersion[i] || _newVersion[i] - _oldVersion[i] != 1) {\n                    return false;\n                }\n                hasBumped = true;\n            }\n            i++;\n        }\n        return hasBumped;\n    }\n\n    function semanticVersionHash(uint16[3] version) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(version[0], version[1], version[2]));\n    }\n}\n"
    },
    "@aragon/os/contracts/apm/APMNamehash.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ncontract APMNamehash {\n    /* Hardcoded constants to save gas\n    bytes32 internal constant APM_NODE = keccak256(abi.encodePacked(ETH_TLD_NODE, keccak256(abi.encodePacked(\"aragonpm\"))));\n    */\n    bytes32 internal constant APM_NODE = 0x9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba;\n\n    function apmNamehash(string name) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(APM_NODE, keccak256(bytes(name))));\n    }\n}\n"
    },
    "@aragon/os/contracts/kernel/Kernel.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"./IKernel.sol\";\nimport \"./KernelConstants.sol\";\nimport \"./KernelStorage.sol\";\nimport \"../acl/IACL.sol\";\nimport \"../acl/ACLSyntaxSugar.sol\";\nimport \"../common/ConversionHelpers.sol\";\nimport \"../common/IsContract.sol\";\nimport \"../common/Petrifiable.sol\";\nimport \"../common/VaultRecoverable.sol\";\nimport \"../factory/AppProxyFactory.sol\";\nimport \"../lib/misc/ERCProxy.sol\";\n\n\n// solium-disable-next-line max-len\ncontract Kernel is IKernel, KernelStorage, KernelAppIds, KernelNamespaceConstants, Petrifiable, IsContract, VaultRecoverable, AppProxyFactory, ACLSyntaxSugar {\n    /* Hardcoded constants to save gas\n    bytes32 public constant APP_MANAGER_ROLE = keccak256(\"APP_MANAGER_ROLE\");\n    */\n    bytes32 public constant APP_MANAGER_ROLE = 0xb6d92708f3d4817afc106147d969e229ced5c46e65e0a5002a0d391287762bd0;\n\n    string private constant ERROR_APP_NOT_CONTRACT = \"KERNEL_APP_NOT_CONTRACT\";\n    string private constant ERROR_INVALID_APP_CHANGE = \"KERNEL_INVALID_APP_CHANGE\";\n    string private constant ERROR_AUTH_FAILED = \"KERNEL_AUTH_FAILED\";\n\n    /**\n    * @dev Constructor that allows the deployer to choose if the base instance should be petrified immediately.\n    * @param _shouldPetrify Immediately petrify this instance so that it can never be initialized\n    */\n    constructor(bool _shouldPetrify) public {\n        if (_shouldPetrify) {\n            petrify();\n        }\n    }\n\n    /**\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\n    * @notice Initialize this kernel instance along with its ACL and set `_permissionsCreator` as the entity that can create other permissions\n    * @param _baseAcl Address of base ACL app\n    * @param _permissionsCreator Entity that will be given permission over createPermission\n    */\n    function initialize(IACL _baseAcl, address _permissionsCreator) public onlyInit {\n        initialized();\n\n        // Set ACL base\n        _setApp(KERNEL_APP_BASES_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID, _baseAcl);\n\n        // Create ACL instance and attach it as the default ACL app\n        IACL acl = IACL(newAppProxy(this, KERNEL_DEFAULT_ACL_APP_ID));\n        acl.initialize(_permissionsCreator);\n        _setApp(KERNEL_APP_ADDR_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID, acl);\n\n        recoveryVaultAppId = KERNEL_DEFAULT_VAULT_APP_ID;\n    }\n\n    /**\n    * @dev Create a new instance of an app linked to this kernel\n    * @notice Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`\n    * @param _appId Identifier for app\n    * @param _appBase Address of the app's base implementation\n    * @return AppProxy instance\n    */\n    function newAppInstance(bytes32 _appId, address _appBase)\n        public\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\n        returns (ERCProxy appProxy)\n    {\n        return newAppInstance(_appId, _appBase, new bytes(0), false);\n    }\n\n    /**\n    * @dev Create a new instance of an app linked to this kernel and set its base\n    *      implementation if it was not already set\n    * @notice Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`\n    * @param _appId Identifier for app\n    * @param _appBase Address of the app's base implementation\n    * @param _initializePayload Payload for call made by the proxy during its construction to initialize\n    * @param _setDefault Whether the app proxy app is the default one.\n    *        Useful when the Kernel needs to know of an instance of a particular app,\n    *        like Vault for escape hatch mechanism.\n    * @return AppProxy instance\n    */\n    function newAppInstance(bytes32 _appId, address _appBase, bytes _initializePayload, bool _setDefault)\n        public\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\n        returns (ERCProxy appProxy)\n    {\n        _setAppIfNew(KERNEL_APP_BASES_NAMESPACE, _appId, _appBase);\n        appProxy = newAppProxy(this, _appId, _initializePayload);\n        // By calling setApp directly and not the internal functions, we make sure the params are checked\n        // and it will only succeed if sender has permissions to set something to the namespace.\n        if (_setDefault) {\n            setApp(KERNEL_APP_ADDR_NAMESPACE, _appId, appProxy);\n        }\n    }\n\n    /**\n    * @dev Create a new pinned instance of an app linked to this kernel\n    * @notice Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`.\n    * @param _appId Identifier for app\n    * @param _appBase Address of the app's base implementation\n    * @return AppProxy instance\n    */\n    function newPinnedAppInstance(bytes32 _appId, address _appBase)\n        public\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\n        returns (ERCProxy appProxy)\n    {\n        return newPinnedAppInstance(_appId, _appBase, new bytes(0), false);\n    }\n\n    /**\n    * @dev Create a new pinned instance of an app linked to this kernel and set\n    *      its base implementation if it was not already set\n    * @notice Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`\n    * @param _appId Identifier for app\n    * @param _appBase Address of the app's base implementation\n    * @param _initializePayload Payload for call made by the proxy during its construction to initialize\n    * @param _setDefault Whether the app proxy app is the default one.\n    *        Useful when the Kernel needs to know of an instance of a particular app,\n    *        like Vault for escape hatch mechanism.\n    * @return AppProxy instance\n    */\n    function newPinnedAppInstance(bytes32 _appId, address _appBase, bytes _initializePayload, bool _setDefault)\n        public\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\n        returns (ERCProxy appProxy)\n    {\n        _setAppIfNew(KERNEL_APP_BASES_NAMESPACE, _appId, _appBase);\n        appProxy = newAppProxyPinned(this, _appId, _initializePayload);\n        // By calling setApp directly and not the internal functions, we make sure the params are checked\n        // and it will only succeed if sender has permissions to set something to the namespace.\n        if (_setDefault) {\n            setApp(KERNEL_APP_ADDR_NAMESPACE, _appId, appProxy);\n        }\n    }\n\n    /**\n    * @dev Set the resolving address of an app instance or base implementation\n    * @notice Set the resolving address of `_appId` in namespace `_namespace` to `_app`\n    * @param _namespace App namespace to use\n    * @param _appId Identifier for app\n    * @param _app Address of the app instance or base implementation\n    * @return ID of app\n    */\n    function setApp(bytes32 _namespace, bytes32 _appId, address _app)\n        public\n        auth(APP_MANAGER_ROLE, arr(_namespace, _appId))\n    {\n        _setApp(_namespace, _appId, _app);\n    }\n\n    /**\n    * @dev Set the default vault id for the escape hatch mechanism\n    * @param _recoveryVaultAppId Identifier of the recovery vault app\n    */\n    function setRecoveryVaultAppId(bytes32 _recoveryVaultAppId)\n        public\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_ADDR_NAMESPACE, _recoveryVaultAppId))\n    {\n        recoveryVaultAppId = _recoveryVaultAppId;\n    }\n\n    // External access to default app id and namespace constants to mimic default getters for constants\n    /* solium-disable function-order, mixedcase */\n    function CORE_NAMESPACE() external pure returns (bytes32) { return KERNEL_CORE_NAMESPACE; }\n    function APP_BASES_NAMESPACE() external pure returns (bytes32) { return KERNEL_APP_BASES_NAMESPACE; }\n    function APP_ADDR_NAMESPACE() external pure returns (bytes32) { return KERNEL_APP_ADDR_NAMESPACE; }\n    function KERNEL_APP_ID() external pure returns (bytes32) { return KERNEL_CORE_APP_ID; }\n    function DEFAULT_ACL_APP_ID() external pure returns (bytes32) { return KERNEL_DEFAULT_ACL_APP_ID; }\n    /* solium-enable function-order, mixedcase */\n\n    /**\n    * @dev Get the address of an app instance or base implementation\n    * @param _namespace App namespace to use\n    * @param _appId Identifier for app\n    * @return Address of the app\n    */\n    function getApp(bytes32 _namespace, bytes32 _appId) public view returns (address) {\n        return apps[_namespace][_appId];\n    }\n\n    /**\n    * @dev Get the address of the recovery Vault instance (to recover funds)\n    * @return Address of the Vault\n    */\n    function getRecoveryVault() public view returns (address) {\n        return apps[KERNEL_APP_ADDR_NAMESPACE][recoveryVaultAppId];\n    }\n\n    /**\n    * @dev Get the installed ACL app\n    * @return ACL app\n    */\n    function acl() public view returns (IACL) {\n        return IACL(getApp(KERNEL_APP_ADDR_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID));\n    }\n\n    /**\n    * @dev Function called by apps to check ACL on kernel or to check permission status\n    * @param _who Sender of the original call\n    * @param _where Address of the app\n    * @param _what Identifier for a group of actions in app\n    * @param _how Extra data for ACL auth\n    * @return Boolean indicating whether the ACL allows the role or not.\n    *         Always returns false if the kernel hasn't been initialized yet.\n    */\n    function hasPermission(address _who, address _where, bytes32 _what, bytes _how) public view returns (bool) {\n        IACL defaultAcl = acl();\n        return address(defaultAcl) != address(0) && // Poor man's initialization check (saves gas)\n            defaultAcl.hasPermission(_who, _where, _what, _how);\n    }\n\n    function _setApp(bytes32 _namespace, bytes32 _appId, address _app) internal {\n        require(isContract(_app), ERROR_APP_NOT_CONTRACT);\n        apps[_namespace][_appId] = _app;\n        emit SetApp(_namespace, _appId, _app);\n    }\n\n    function _setAppIfNew(bytes32 _namespace, bytes32 _appId, address _app) internal {\n        address app = getApp(_namespace, _appId);\n        if (app != address(0)) {\n            // The only way to set an app is if it passes the isContract check, so no need to check it again\n            require(app == _app, ERROR_INVALID_APP_CHANGE);\n        } else {\n            _setApp(_namespace, _appId, _app);\n        }\n    }\n\n    modifier auth(bytes32 _role, uint256[] memory _params) {\n        require(\n            hasPermission(msg.sender, address(this), _role, ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)),\n            ERROR_AUTH_FAILED\n        );\n        _;\n    }\n}\n"
    },
    "@aragon/os/contracts/kernel/KernelStorage.sol": {
      "content": "pragma solidity 0.4.24;\n\n\ncontract KernelStorage {\n    // namespace => app id => address\n    mapping (bytes32 => mapping (bytes32 => address)) public apps;\n    bytes32 public recoveryVaultAppId;\n}\n"
    },
    "@aragon/os/contracts/factory/AppProxyFactory.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"../apps/AppProxyUpgradeable.sol\";\nimport \"../apps/AppProxyPinned.sol\";\n\n\ncontract AppProxyFactory {\n    event NewAppProxy(address proxy, bool isUpgradeable, bytes32 appId);\n\n    /**\n    * @notice Create a new upgradeable app instance on `_kernel` with identifier `_appId`\n    * @param _kernel App's Kernel reference\n    * @param _appId Identifier for app\n    * @return AppProxyUpgradeable\n    */\n    function newAppProxy(IKernel _kernel, bytes32 _appId) public returns (AppProxyUpgradeable) {\n        return newAppProxy(_kernel, _appId, new bytes(0));\n    }\n\n    /**\n    * @notice Create a new upgradeable app instance on `_kernel` with identifier `_appId` and initialization payload `_initializePayload`\n    * @param _kernel App's Kernel reference\n    * @param _appId Identifier for app\n    * @return AppProxyUpgradeable\n    */\n    function newAppProxy(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyUpgradeable) {\n        AppProxyUpgradeable proxy = new AppProxyUpgradeable(_kernel, _appId, _initializePayload);\n        emit NewAppProxy(address(proxy), true, _appId);\n        return proxy;\n    }\n\n    /**\n    * @notice Create a new pinned app instance on `_kernel` with identifier `_appId`\n    * @param _kernel App's Kernel reference\n    * @param _appId Identifier for app\n    * @return AppProxyPinned\n    */\n    function newAppProxyPinned(IKernel _kernel, bytes32 _appId) public returns (AppProxyPinned) {\n        return newAppProxyPinned(_kernel, _appId, new bytes(0));\n    }\n\n    /**\n    * @notice Create a new pinned app instance on `_kernel` with identifier `_appId` and initialization payload `_initializePayload`\n    * @param _kernel App's Kernel reference\n    * @param _appId Identifier for app\n    * @param _initializePayload Proxy initialization payload\n    * @return AppProxyPinned\n    */\n    function newAppProxyPinned(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyPinned) {\n        AppProxyPinned proxy = new AppProxyPinned(_kernel, _appId, _initializePayload);\n        emit NewAppProxy(address(proxy), false, _appId);\n        return proxy;\n    }\n}\n"
    },
    "@aragon/os/contracts/apps/AppProxyUpgradeable.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"./AppProxyBase.sol\";\n\n\ncontract AppProxyUpgradeable is AppProxyBase {\n    /**\n    * @dev Initialize AppProxyUpgradeable (makes it an upgradeable Aragon app)\n    * @param _kernel Reference to organization kernel for the app\n    * @param _appId Identifier for app\n    * @param _initializePayload Payload for call to be made after setup to initialize\n    */\n    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\n        AppProxyBase(_kernel, _appId, _initializePayload)\n        public // solium-disable-line visibility-first\n    {\n        // solium-disable-previous-line no-empty-blocks\n    }\n\n    /**\n     * @dev ERC897, the address the proxy would delegate calls to\n     */\n    function implementation() public view returns (address) {\n        return getAppBase(appId());\n    }\n\n    /**\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\n     */\n    function proxyType() public pure returns (uint256 proxyTypeId) {\n        return UPGRADEABLE;\n    }\n}\n"
    },
    "@aragon/os/contracts/apps/AppProxyBase.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"./AppStorage.sol\";\nimport \"../common/DepositableDelegateProxy.sol\";\nimport \"../kernel/KernelConstants.sol\";\nimport \"../kernel/IKernel.sol\";\n\n\ncontract AppProxyBase is AppStorage, DepositableDelegateProxy, KernelNamespaceConstants {\n    /**\n    * @dev Initialize AppProxy\n    * @param _kernel Reference to organization kernel for the app\n    * @param _appId Identifier for app\n    * @param _initializePayload Payload for call to be made after setup to initialize\n    */\n    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public {\n        setKernel(_kernel);\n        setAppId(_appId);\n\n        // Implicit check that kernel is actually a Kernel\n        // The EVM doesn't actually provide a way for us to make sure, but we can force a revert to\n        // occur if the kernel is set to 0x0 or a non-code address when we try to call a method on\n        // it.\n        address appCode = getAppBase(_appId);\n\n        // If initialize payload is provided, it will be executed\n        if (_initializePayload.length > 0) {\n            require(isContract(appCode));\n            // Cannot make delegatecall as a delegateproxy.delegatedFwd as it\n            // returns ending execution context and halts contract deployment\n            require(appCode.delegatecall(_initializePayload));\n        }\n    }\n\n    function getAppBase(bytes32 _appId) internal view returns (address) {\n        return kernel().getApp(KERNEL_APP_BASES_NAMESPACE, _appId);\n    }\n}\n"
    },
    "@aragon/os/contracts/common/DepositableDelegateProxy.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"./DelegateProxy.sol\";\nimport \"./DepositableStorage.sol\";\n\n\ncontract DepositableDelegateProxy is DepositableStorage, DelegateProxy {\n    event ProxyDeposit(address sender, uint256 value);\n\n    function () external payable {\n        // send / transfer\n        if (gasleft() < FWD_GAS_LIMIT) {\n            require(msg.value > 0 && msg.data.length == 0);\n            require(isDepositable());\n            emit ProxyDeposit(msg.sender, msg.value);\n        } else { // all calls except for send or transfer\n            address target = implementation();\n            delegatedFwd(target, msg.data);\n        }\n    }\n}\n"
    },
    "@aragon/os/contracts/common/DelegateProxy.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"../common/IsContract.sol\";\nimport \"../lib/misc/ERCProxy.sol\";\n\n\ncontract DelegateProxy is ERCProxy, IsContract {\n    uint256 internal constant FWD_GAS_LIMIT = 10000;\n\n    /**\n    * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\n    * @param _dst Destination address to perform the delegatecall\n    * @param _calldata Calldata for the delegatecall\n    */\n    function delegatedFwd(address _dst, bytes _calldata) internal {\n        require(isContract(_dst));\n        uint256 fwdGasLimit = FWD_GAS_LIMIT;\n\n        assembly {\n            let result := delegatecall(sub(gas, fwdGasLimit), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)\n            let size := returndatasize\n            let ptr := mload(0x40)\n            returndatacopy(ptr, 0, size)\n\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\n            // if the call returned error data, forward it\n            switch result case 0 { revert(ptr, size) }\n            default { return(ptr, size) }\n        }\n    }\n}\n"
    },
    "@aragon/os/contracts/lib/misc/ERCProxy.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ncontract ERCProxy {\n    uint256 internal constant FORWARDING = 1;\n    uint256 internal constant UPGRADEABLE = 2;\n\n    function proxyType() public pure returns (uint256 proxyTypeId);\n    function implementation() public view returns (address codeAddr);\n}\n"
    },
    "@aragon/os/contracts/apps/AppProxyPinned.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"../common/UnstructuredStorage.sol\";\nimport \"../common/IsContract.sol\";\nimport \"./AppProxyBase.sol\";\n\n\ncontract AppProxyPinned is IsContract, AppProxyBase {\n    using UnstructuredStorage for bytes32;\n\n    // keccak256(\"aragonOS.appStorage.pinnedCode\")\n    bytes32 internal constant PINNED_CODE_POSITION = 0xdee64df20d65e53d7f51cb6ab6d921a0a6a638a91e942e1d8d02df28e31c038e;\n\n    /**\n    * @dev Initialize AppProxyPinned (makes it an un-upgradeable Aragon app)\n    * @param _kernel Reference to organization kernel for the app\n    * @param _appId Identifier for app\n    * @param _initializePayload Payload for call to be made after setup to initialize\n    */\n    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\n        AppProxyBase(_kernel, _appId, _initializePayload)\n        public // solium-disable-line visibility-first\n    {\n        setPinnedCode(getAppBase(_appId));\n        require(isContract(pinnedCode()));\n    }\n\n    /**\n     * @dev ERC897, the address the proxy would delegate calls to\n     */\n    function implementation() public view returns (address) {\n        return pinnedCode();\n    }\n\n    /**\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\n     */\n    function proxyType() public pure returns (uint256 proxyTypeId) {\n        return FORWARDING;\n    }\n\n    function setPinnedCode(address _pinnedCode) internal {\n        PINNED_CODE_POSITION.setStorageAddress(_pinnedCode);\n    }\n\n    function pinnedCode() internal view returns (address) {\n        return PINNED_CODE_POSITION.getStorageAddress();\n    }\n}\n"
    },
    "@aragon/os/contracts/lib/ens/ENS.sol": {
      "content": "// See https://github.com/ensdomains/ens/blob/7e377df83f/contracts/ENS.sol\n\npragma solidity ^0.4.0;\n\n\nimport \"./AbstractENS.sol\";\n\n/**\n * The ENS registry contract.\n */\ncontract ENS is AbstractENS {\n    struct Record {\n        address owner;\n        address resolver;\n        uint64 ttl;\n    }\n\n    mapping(bytes32=>Record) records;\n\n    // Permits modifications only by the owner of the specified node.\n    modifier only_owner(bytes32 node) {\n        if (records[node].owner != msg.sender) throw;\n        _;\n    }\n\n    /**\n     * Constructs a new ENS registrar.\n     */\n    function ENS() public {\n        records[0].owner = msg.sender;\n    }\n\n    /**\n     * Returns the address that owns the specified node.\n     */\n    function owner(bytes32 node) public constant returns (address) {\n        return records[node].owner;\n    }\n\n    /**\n     * Returns the address of the resolver for the specified node.\n     */\n    function resolver(bytes32 node) public constant returns (address) {\n        return records[node].resolver;\n    }\n\n    /**\n     * Returns the TTL of a node, and any records associated with it.\n     */\n    function ttl(bytes32 node) public constant returns (uint64) {\n        return records[node].ttl;\n    }\n\n    /**\n     * Transfers ownership of a node to a new address. May only be called by the current\n     * owner of the node.\n     * @param node The node to transfer ownership of.\n     * @param owner The address of the new owner.\n     */\n    function setOwner(bytes32 node, address owner) only_owner(node) public {\n        Transfer(node, owner);\n        records[node].owner = owner;\n    }\n\n    /**\n     * Transfers ownership of a subnode keccak256(node, label) to a new address. May only be\n     * called by the owner of the parent node.\n     * @param node The parent node.\n     * @param label The hash of the label specifying the subnode.\n     * @param owner The address of the new owner.\n     */\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) only_owner(node) public {\n        var subnode = keccak256(node, label);\n        NewOwner(node, label, owner);\n        records[subnode].owner = owner;\n    }\n\n    /**\n     * Sets the resolver address for the specified node.\n     * @param node The node to update.\n     * @param resolver The address of the resolver.\n     */\n    function setResolver(bytes32 node, address resolver) only_owner(node) public {\n        NewResolver(node, resolver);\n        records[node].resolver = resolver;\n    }\n\n    /**\n     * Sets the TTL for the specified node.\n     * @param node The node to update.\n     * @param ttl The TTL in seconds.\n     */\n    function setTTL(bytes32 node, uint64 ttl) only_owner(node) public {\n        NewTTL(node, ttl);\n        records[node].ttl = ttl;\n    }\n}\n"
    },
    "@aragon/os/contracts/lib/ens/AbstractENS.sol": {
      "content": "// See https://github.com/ensdomains/ens/blob/7e377df83f/contracts/AbstractENS.sol\n\npragma solidity ^0.4.15;\n\n\ninterface AbstractENS {\n    function owner(bytes32 _node) public constant returns (address);\n    function resolver(bytes32 _node) public constant returns (address);\n    function ttl(bytes32 _node) public constant returns (uint64);\n    function setOwner(bytes32 _node, address _owner) public;\n    function setSubnodeOwner(bytes32 _node, bytes32 label, address _owner) public;\n    function setResolver(bytes32 _node, address _resolver) public;\n    function setTTL(bytes32 _node, uint64 _ttl) public;\n\n    // Logged when the owner of a node assigns a new owner to a subnode.\n    event NewOwner(bytes32 indexed _node, bytes32 indexed _label, address _owner);\n\n    // Logged when the owner of a node transfers ownership to a new account.\n    event Transfer(bytes32 indexed _node, address _owner);\n\n    // Logged when the resolver for a node changes.\n    event NewResolver(bytes32 indexed _node, address _resolver);\n\n    // Logged when the TTL of a node changes\n    event NewTTL(bytes32 indexed _node, uint64 _ttl);\n}\n"
    },
    "@aragon/os/contracts/lib/ens/PublicResolver.sol": {
      "content": "// See https://github.com/ensdomains/ens/blob/7e377df83f/contracts/PublicResolver.sol\n\npragma solidity ^0.4.0;\n\nimport \"./AbstractENS.sol\";\n\n/**\n * A simple resolver anyone can use; only allows the owner of a node to set its\n * address.\n */\ncontract PublicResolver {\n    bytes4 constant INTERFACE_META_ID = 0x01ffc9a7;\n    bytes4 constant ADDR_INTERFACE_ID = 0x3b3b57de;\n    bytes4 constant CONTENT_INTERFACE_ID = 0xd8389dc5;\n    bytes4 constant NAME_INTERFACE_ID = 0x691f3431;\n    bytes4 constant ABI_INTERFACE_ID = 0x2203ab56;\n    bytes4 constant PUBKEY_INTERFACE_ID = 0xc8690233;\n    bytes4 constant TEXT_INTERFACE_ID = 0x59d1d43c;\n\n    event AddrChanged(bytes32 indexed node, address a);\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\n    event NameChanged(bytes32 indexed node, string name);\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\n\n    struct PublicKey {\n        bytes32 x;\n        bytes32 y;\n    }\n\n    struct Record {\n        address addr;\n        bytes32 content;\n        string name;\n        PublicKey pubkey;\n        mapping(string=>string) text;\n        mapping(uint256=>bytes) abis;\n    }\n\n    AbstractENS ens;\n    mapping(bytes32=>Record) records;\n\n    modifier only_owner(bytes32 node) {\n        if (ens.owner(node) != msg.sender) throw;\n        _;\n    }\n\n    /**\n     * Constructor.\n     * @param ensAddr The ENS registrar contract.\n     */\n    function PublicResolver(AbstractENS ensAddr) public {\n        ens = ensAddr;\n    }\n\n    /**\n     * Returns true if the resolver implements the interface specified by the provided hash.\n     * @param interfaceID The ID of the interface to check for.\n     * @return True if the contract implements the requested interface.\n     */\n    function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\n        return interfaceID == ADDR_INTERFACE_ID ||\n               interfaceID == CONTENT_INTERFACE_ID ||\n               interfaceID == NAME_INTERFACE_ID ||\n               interfaceID == ABI_INTERFACE_ID ||\n               interfaceID == PUBKEY_INTERFACE_ID ||\n               interfaceID == TEXT_INTERFACE_ID ||\n               interfaceID == INTERFACE_META_ID;\n    }\n\n    /**\n     * Returns the address associated with an ENS node.\n     * @param node The ENS node to query.\n     * @return The associated address.\n     */\n    function addr(bytes32 node) public constant returns (address ret) {\n        ret = records[node].addr;\n    }\n\n    /**\n     * Sets the address associated with an ENS node.\n     * May only be called by the owner of that node in the ENS registry.\n     * @param node The node to update.\n     * @param addr The address to set.\n     */\n    function setAddr(bytes32 node, address addr) only_owner(node) public {\n        records[node].addr = addr;\n        AddrChanged(node, addr);\n    }\n\n    /**\n     * Returns the content hash associated with an ENS node.\n     * Note that this resource type is not standardized, and will likely change\n     * in future to a resource type based on multihash.\n     * @param node The ENS node to query.\n     * @return The associated content hash.\n     */\n    function content(bytes32 node) public constant returns (bytes32 ret) {\n        ret = records[node].content;\n    }\n\n    /**\n     * Sets the content hash associated with an ENS node.\n     * May only be called by the owner of that node in the ENS registry.\n     * Note that this resource type is not standardized, and will likely change\n     * in future to a resource type based on multihash.\n     * @param node The node to update.\n     * @param hash The content hash to set\n     */\n    function setContent(bytes32 node, bytes32 hash) only_owner(node) public {\n        records[node].content = hash;\n        ContentChanged(node, hash);\n    }\n\n    /**\n     * Returns the name associated with an ENS node, for reverse records.\n     * Defined in EIP181.\n     * @param node The ENS node to query.\n     * @return The associated name.\n     */\n    function name(bytes32 node) public constant returns (string ret) {\n        ret = records[node].name;\n    }\n\n    /**\n     * Sets the name associated with an ENS node, for reverse records.\n     * May only be called by the owner of that node in the ENS registry.\n     * @param node The node to update.\n     * @param name The name to set.\n     */\n    function setName(bytes32 node, string name) only_owner(node) public {\n        records[node].name = name;\n        NameChanged(node, name);\n    }\n\n    /**\n     * Returns the ABI associated with an ENS node.\n     * Defined in EIP205.\n     * @param node The ENS node to query\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\n     * @return contentType The content type of the return value\n     * @return data The ABI data\n     */\n    function ABI(bytes32 node, uint256 contentTypes) public constant returns (uint256 contentType, bytes data) {\n        var record = records[node];\n        for(contentType = 1; contentType <= contentTypes; contentType <<= 1) {\n            if ((contentType & contentTypes) != 0 && record.abis[contentType].length > 0) {\n                data = record.abis[contentType];\n                return;\n            }\n        }\n        contentType = 0;\n    }\n\n    /**\n     * Sets the ABI associated with an ENS node.\n     * Nodes may have one ABI of each content type. To remove an ABI, set it to\n     * the empty string.\n     * @param node The node to update.\n     * @param contentType The content type of the ABI\n     * @param data The ABI data.\n     */\n    function setABI(bytes32 node, uint256 contentType, bytes data) only_owner(node) public {\n        // Content types must be powers of 2\n        if (((contentType - 1) & contentType) != 0) throw;\n\n        records[node].abis[contentType] = data;\n        ABIChanged(node, contentType);\n    }\n\n    /**\n     * Returns the SECP256k1 public key associated with an ENS node.\n     * Defined in EIP 619.\n     * @param node The ENS node to query\n     * @return x, y the X and Y coordinates of the curve point for the public key.\n     */\n    function pubkey(bytes32 node) public constant returns (bytes32 x, bytes32 y) {\n        return (records[node].pubkey.x, records[node].pubkey.y);\n    }\n\n    /**\n     * Sets the SECP256k1 public key associated with an ENS node.\n     * @param node The ENS node to query\n     * @param x the X coordinate of the curve point for the public key.\n     * @param y the Y coordinate of the curve point for the public key.\n     */\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) only_owner(node) public {\n        records[node].pubkey = PublicKey(x, y);\n        PubkeyChanged(node, x, y);\n    }\n\n    /**\n     * Returns the text data associated with an ENS node and key.\n     * @param node The ENS node to query.\n     * @param key The text data key to query.\n     * @return The associated text data.\n     */\n    function text(bytes32 node, string key) public constant returns (string ret) {\n        ret = records[node].text[key];\n    }\n\n    /**\n     * Sets the text data associated with an ENS node and key.\n     * May only be called by the owner of that node in the ENS registry.\n     * @param node The node to update.\n     * @param key The key to set.\n     * @param value The text data value to set.\n     */\n    function setText(bytes32 node, string key, string value) only_owner(node) public {\n        records[node].text[key] = value;\n        TextChanged(node, key, key);\n    }\n}\n"
    },
    "@aragon/os/contracts/factory/DAOFactory.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"../kernel/IKernel.sol\";\nimport \"../kernel/Kernel.sol\";\nimport \"../kernel/KernelProxy.sol\";\n\nimport \"../acl/IACL.sol\";\nimport \"../acl/ACL.sol\";\n\nimport \"./EVMScriptRegistryFactory.sol\";\n\n\ncontract DAOFactory {\n    IKernel public baseKernel;\n    IACL public baseACL;\n    EVMScriptRegistryFactory public regFactory;\n\n    event DeployDAO(address dao);\n    event DeployEVMScriptRegistry(address reg);\n\n    /**\n    * @notice Create a new DAOFactory, creating DAOs with Kernels proxied to `_baseKernel`, ACLs proxied to `_baseACL`, and new EVMScriptRegistries created from `_regFactory`.\n    * @param _baseKernel Base Kernel\n    * @param _baseACL Base ACL\n    * @param _regFactory EVMScriptRegistry factory\n    */\n    constructor(IKernel _baseKernel, IACL _baseACL, EVMScriptRegistryFactory _regFactory) public {\n        // No need to init as it cannot be killed by devops199\n        if (address(_regFactory) != address(0)) {\n            regFactory = _regFactory;\n        }\n\n        baseKernel = _baseKernel;\n        baseACL = _baseACL;\n    }\n\n    /**\n    * @notice Create a new DAO with `_root` set as the initial admin\n    * @param _root Address that will be granted control to setup DAO permissions\n    * @return Newly created DAO\n    */\n    function newDAO(address _root) public returns (Kernel) {\n        Kernel dao = Kernel(new KernelProxy(baseKernel));\n\n        if (address(regFactory) == address(0)) {\n            dao.initialize(baseACL, _root);\n        } else {\n            dao.initialize(baseACL, this);\n\n            ACL acl = ACL(dao.acl());\n            bytes32 permRole = acl.CREATE_PERMISSIONS_ROLE();\n            bytes32 appManagerRole = dao.APP_MANAGER_ROLE();\n\n            acl.grantPermission(regFactory, acl, permRole);\n\n            acl.createPermission(regFactory, dao, appManagerRole, this);\n\n            EVMScriptRegistry reg = regFactory.newEVMScriptRegistry(dao);\n            emit DeployEVMScriptRegistry(address(reg));\n\n            // Clean up permissions\n            // First, completely reset the APP_MANAGER_ROLE\n            acl.revokePermission(regFactory, dao, appManagerRole);\n            acl.removePermissionManager(dao, appManagerRole);\n\n            // Then, make root the only holder and manager of CREATE_PERMISSIONS_ROLE\n            acl.revokePermission(regFactory, acl, permRole);\n            acl.revokePermission(this, acl, permRole);\n            acl.grantPermission(_root, acl, permRole);\n            acl.setPermissionManager(_root, acl, permRole);\n        }\n\n        emit DeployDAO(address(dao));\n\n        return dao;\n    }\n}\n"
    },
    "@aragon/os/contracts/kernel/KernelProxy.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"./IKernel.sol\";\nimport \"./KernelConstants.sol\";\nimport \"./KernelStorage.sol\";\nimport \"../common/DepositableDelegateProxy.sol\";\nimport \"../common/IsContract.sol\";\n\n\ncontract KernelProxy is IKernelEvents, KernelStorage, KernelAppIds, KernelNamespaceConstants, IsContract, DepositableDelegateProxy {\n    /**\n    * @dev KernelProxy is a proxy contract to a kernel implementation. The implementation\n    *      can update the reference, which effectively upgrades the contract\n    * @param _kernelImpl Address of the contract used as implementation for kernel\n    */\n    constructor(IKernel _kernelImpl) public {\n        require(isContract(address(_kernelImpl)));\n        apps[KERNEL_CORE_NAMESPACE][KERNEL_CORE_APP_ID] = _kernelImpl;\n\n        // Note that emitting this event is important for verifying that a KernelProxy instance\n        // was never upgraded to a malicious Kernel logic contract over its lifespan.\n        // This starts the \"chain of trust\", that can be followed through later SetApp() events\n        // emitted during kernel upgrades.\n        emit SetApp(KERNEL_CORE_NAMESPACE, KERNEL_CORE_APP_ID, _kernelImpl);\n    }\n\n    /**\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\n     */\n    function proxyType() public pure returns (uint256 proxyTypeId) {\n        return UPGRADEABLE;\n    }\n\n    /**\n    * @dev ERC897, the address the proxy would delegate calls to\n    */\n    function implementation() public view returns (address) {\n        return apps[KERNEL_CORE_NAMESPACE][KERNEL_CORE_APP_ID];\n    }\n}\n"
    },
    "@aragon/os/contracts/factory/EVMScriptRegistryFactory.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"../evmscript/IEVMScriptExecutor.sol\";\nimport \"../evmscript/EVMScriptRegistry.sol\";\n\nimport \"../evmscript/executors/CallsScript.sol\";\n\nimport \"../kernel/Kernel.sol\";\nimport \"../acl/ACL.sol\";\n\n\ncontract EVMScriptRegistryFactory is EVMScriptRegistryConstants {\n    EVMScriptRegistry public baseReg;\n    IEVMScriptExecutor public baseCallScript;\n\n    /**\n    * @notice Create a new EVMScriptRegistryFactory.\n    */\n    constructor() public {\n        baseReg = new EVMScriptRegistry();\n        baseCallScript = IEVMScriptExecutor(new CallsScript());\n    }\n\n    /**\n    * @notice Install a new pinned instance of EVMScriptRegistry on `_dao`.\n    * @param _dao Kernel\n    * @return Installed EVMScriptRegistry\n    */\n    function newEVMScriptRegistry(Kernel _dao) public returns (EVMScriptRegistry reg) {\n        bytes memory initPayload = abi.encodeWithSelector(reg.initialize.selector);\n        reg = EVMScriptRegistry(_dao.newPinnedAppInstance(EVMSCRIPT_REGISTRY_APP_ID, baseReg, initPayload, true));\n\n        ACL acl = ACL(_dao.acl());\n\n        acl.createPermission(this, reg, reg.REGISTRY_ADD_EXECUTOR_ROLE(), this);\n\n        reg.addScriptExecutor(baseCallScript);     // spec 1 = CallsScript\n\n        // Clean up the permissions\n        acl.revokePermission(this, reg, reg.REGISTRY_ADD_EXECUTOR_ROLE());\n        acl.removePermissionManager(reg, reg.REGISTRY_ADD_EXECUTOR_ROLE());\n\n        return reg;\n    }\n}\n"
    },
    "@aragon/os/contracts/evmscript/EVMScriptRegistry.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"../apps/AragonApp.sol\";\nimport \"./ScriptHelpers.sol\";\nimport \"./IEVMScriptExecutor.sol\";\nimport \"./IEVMScriptRegistry.sol\";\n\n\n/* solium-disable function-order */\n// Allow public initialize() to be first\ncontract EVMScriptRegistry is IEVMScriptRegistry, EVMScriptRegistryConstants, AragonApp {\n    using ScriptHelpers for bytes;\n\n    /* Hardcoded constants to save gas\n    bytes32 public constant REGISTRY_ADD_EXECUTOR_ROLE = keccak256(\"REGISTRY_ADD_EXECUTOR_ROLE\");\n    bytes32 public constant REGISTRY_MANAGER_ROLE = keccak256(\"REGISTRY_MANAGER_ROLE\");\n    */\n    bytes32 public constant REGISTRY_ADD_EXECUTOR_ROLE = 0xc4e90f38eea8c4212a009ca7b8947943ba4d4a58d19b683417f65291d1cd9ed2;\n    // WARN: Manager can censor all votes and the like happening in an org\n    bytes32 public constant REGISTRY_MANAGER_ROLE = 0xf7a450ef335e1892cb42c8ca72e7242359d7711924b75db5717410da3f614aa3;\n\n    uint256 internal constant SCRIPT_START_LOCATION = 4;\n\n    string private constant ERROR_INEXISTENT_EXECUTOR = \"EVMREG_INEXISTENT_EXECUTOR\";\n    string private constant ERROR_EXECUTOR_ENABLED = \"EVMREG_EXECUTOR_ENABLED\";\n    string private constant ERROR_EXECUTOR_DISABLED = \"EVMREG_EXECUTOR_DISABLED\";\n    string private constant ERROR_SCRIPT_LENGTH_TOO_SHORT = \"EVMREG_SCRIPT_LENGTH_TOO_SHORT\";\n\n    struct ExecutorEntry {\n        IEVMScriptExecutor executor;\n        bool enabled;\n    }\n\n    uint256 private executorsNextIndex;\n    mapping (uint256 => ExecutorEntry) public executors;\n\n    event EnableExecutor(uint256 indexed executorId, address indexed executorAddress);\n    event DisableExecutor(uint256 indexed executorId, address indexed executorAddress);\n\n    modifier executorExists(uint256 _executorId) {\n        require(_executorId > 0 && _executorId < executorsNextIndex, ERROR_INEXISTENT_EXECUTOR);\n        _;\n    }\n\n    /**\n    * @notice Initialize the registry\n    */\n    function initialize() public onlyInit {\n        initialized();\n        // Create empty record to begin executor IDs at 1\n        executorsNextIndex = 1;\n    }\n\n    /**\n    * @notice Add a new script executor with address `_executor` to the registry\n    * @param _executor Address of the IEVMScriptExecutor that will be added to the registry\n    * @return id Identifier of the executor in the registry\n    */\n    function addScriptExecutor(IEVMScriptExecutor _executor) external auth(REGISTRY_ADD_EXECUTOR_ROLE) returns (uint256 id) {\n        uint256 executorId = executorsNextIndex++;\n        executors[executorId] = ExecutorEntry(_executor, true);\n        emit EnableExecutor(executorId, _executor);\n        return executorId;\n    }\n\n    /**\n    * @notice Disable script executor with ID `_executorId`\n    * @param _executorId Identifier of the executor in the registry\n    */\n    function disableScriptExecutor(uint256 _executorId)\n        external\n        authP(REGISTRY_MANAGER_ROLE, arr(_executorId))\n    {\n        // Note that we don't need to check for an executor's existence in this case, as only\n        // existing executors can be enabled\n        ExecutorEntry storage executorEntry = executors[_executorId];\n        require(executorEntry.enabled, ERROR_EXECUTOR_DISABLED);\n        executorEntry.enabled = false;\n        emit DisableExecutor(_executorId, executorEntry.executor);\n    }\n\n    /**\n    * @notice Enable script executor with ID `_executorId`\n    * @param _executorId Identifier of the executor in the registry\n    */\n    function enableScriptExecutor(uint256 _executorId)\n        external\n        authP(REGISTRY_MANAGER_ROLE, arr(_executorId))\n        executorExists(_executorId)\n    {\n        ExecutorEntry storage executorEntry = executors[_executorId];\n        require(!executorEntry.enabled, ERROR_EXECUTOR_ENABLED);\n        executorEntry.enabled = true;\n        emit EnableExecutor(_executorId, executorEntry.executor);\n    }\n\n    /**\n    * @dev Get the script executor that can execute a particular script based on its first 4 bytes\n    * @param _script EVMScript being inspected\n    */\n    function getScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\n        require(_script.length >= SCRIPT_START_LOCATION, ERROR_SCRIPT_LENGTH_TOO_SHORT);\n        uint256 id = _script.getSpecId();\n\n        // Note that we don't need to check for an executor's existence in this case, as only\n        // existing executors can be enabled\n        ExecutorEntry storage entry = executors[id];\n        return entry.enabled ? entry.executor : IEVMScriptExecutor(0);\n    }\n}\n"
    },
    "@aragon/os/contracts/evmscript/ScriptHelpers.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\nlibrary ScriptHelpers {\n    function getSpecId(bytes _script) internal pure returns (uint32) {\n        return uint32At(_script, 0);\n    }\n\n    function uint256At(bytes _data, uint256 _location) internal pure returns (uint256 result) {\n        assembly {\n            result := mload(add(_data, add(0x20, _location)))\n        }\n    }\n\n    function addressAt(bytes _data, uint256 _location) internal pure returns (address result) {\n        uint256 word = uint256At(_data, _location);\n\n        assembly {\n            result := div(and(word, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000),\n            0x1000000000000000000000000)\n        }\n    }\n\n    function uint32At(bytes _data, uint256 _location) internal pure returns (uint32 result) {\n        uint256 word = uint256At(_data, _location);\n\n        assembly {\n            result := div(and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000),\n            0x100000000000000000000000000000000000000000000000000000000)\n        }\n    }\n\n    function locationOf(bytes _data, uint256 _location) internal pure returns (uint256 result) {\n        assembly {\n            result := add(_data, add(0x20, _location))\n        }\n    }\n\n    function toBytes(bytes4 _sig) internal pure returns (bytes) {\n        bytes memory payload = new bytes(4);\n        assembly { mstore(add(payload, 0x20), _sig) }\n        return payload;\n    }\n}\n"
    },
    "@aragon/os/contracts/evmscript/executors/CallsScript.sol": {
      "content": "pragma solidity 0.4.24;\n\n// Inspired by https://github.com/reverendus/tx-manager\n\nimport \"../ScriptHelpers.sol\";\nimport \"./BaseEVMScriptExecutor.sol\";\n\n\ncontract CallsScript is BaseEVMScriptExecutor {\n    using ScriptHelpers for bytes;\n\n    /* Hardcoded constants to save gas\n    bytes32 internal constant EXECUTOR_TYPE = keccak256(\"CALLS_SCRIPT\");\n    */\n    bytes32 internal constant EXECUTOR_TYPE = 0x2dc858a00f3e417be1394b87c07158e989ec681ce8cc68a9093680ac1a870302;\n\n    string private constant ERROR_BLACKLISTED_CALL = \"EVMCALLS_BLACKLISTED_CALL\";\n    string private constant ERROR_INVALID_LENGTH = \"EVMCALLS_INVALID_LENGTH\";\n\n    /* This is manually crafted in assembly\n    string private constant ERROR_CALL_REVERTED = \"EVMCALLS_CALL_REVERTED\";\n    */\n\n    event LogScriptCall(address indexed sender, address indexed src, address indexed dst);\n\n    /**\n    * @notice Executes a number of call scripts\n    * @param _script [ specId (uint32) ] many calls with this structure ->\n    *    [ to (address: 20 bytes) ] [ calldataLength (uint32: 4 bytes) ] [ calldata (calldataLength bytes) ]\n    * @param _blacklist Addresses the script cannot call to, or will revert.\n    * @return Always returns empty byte array\n    */\n    function execScript(bytes _script, bytes, address[] _blacklist) external isInitialized returns (bytes) {\n        uint256 location = SCRIPT_START_LOCATION; // first 32 bits are spec id\n        while (location < _script.length) {\n            // Check there's at least address + calldataLength available\n            require(_script.length - location >= 0x18, ERROR_INVALID_LENGTH);\n\n            address contractAddress = _script.addressAt(location);\n            // Check address being called is not blacklist\n            for (uint256 i = 0; i < _blacklist.length; i++) {\n                require(contractAddress != _blacklist[i], ERROR_BLACKLISTED_CALL);\n            }\n\n            // logged before execution to ensure event ordering in receipt\n            // if failed entire execution is reverted regardless\n            emit LogScriptCall(msg.sender, address(this), contractAddress);\n\n            uint256 calldataLength = uint256(_script.uint32At(location + 0x14));\n            uint256 startOffset = location + 0x14 + 0x04;\n            uint256 calldataStart = _script.locationOf(startOffset);\n\n            // compute end of script / next location\n            location = startOffset + calldataLength;\n            require(location <= _script.length, ERROR_INVALID_LENGTH);\n\n            bool success;\n            assembly {\n                success := call(\n                    sub(gas, 5000),       // forward gas left - 5000\n                    contractAddress,      // address\n                    0,                    // no value\n                    calldataStart,        // calldata start\n                    calldataLength,       // calldata length\n                    0,                    // don't write output\n                    0                     // don't write output\n                )\n\n                switch success\n                case 0 {\n                    let ptr := mload(0x40)\n\n                    switch returndatasize\n                    case 0 {\n                        // No error data was returned, revert with \"EVMCALLS_CALL_REVERTED\"\n                        // See remix: doing a `revert(\"EVMCALLS_CALL_REVERTED\")` always results in\n                        // this memory layout\n                        mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\n                        mstore(add(ptr, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\n                        mstore(add(ptr, 0x24), 0x0000000000000000000000000000000000000000000000000000000000000016) // reason length\n                        mstore(add(ptr, 0x44), 0x45564d43414c4c535f43414c4c5f524556455254454400000000000000000000) // reason\n\n                        revert(ptr, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\n                    }\n                    default {\n                        // Forward the full error data\n                        returndatacopy(ptr, 0, returndatasize)\n                        revert(ptr, returndatasize)\n                    }\n                }\n                default { }\n            }\n        }\n        // No need to allocate empty bytes for the return as this can only be called via an delegatecall\n        // (due to the isInitialized modifier)\n    }\n\n    function executorType() external pure returns (bytes32) {\n        return EXECUTOR_TYPE;\n    }\n}\n"
    },
    "@aragon/os/contracts/evmscript/executors/BaseEVMScriptExecutor.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"../../common/Autopetrified.sol\";\nimport \"../IEVMScriptExecutor.sol\";\n\n\ncontract BaseEVMScriptExecutor is IEVMScriptExecutor, Autopetrified {\n    uint256 internal constant SCRIPT_START_LOCATION = 4;\n}\n"
    },
    "@aragon/id/contracts/IFIFSResolvingRegistrar.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"./ens/IPublicResolver.sol\";\n\n\ninterface IFIFSResolvingRegistrar {\n    function register(bytes32 _subnode, address _owner) external;\n    function registerWithResolver(bytes32 _subnode, address _owner, IPublicResolver _resolver) public;\n}\n"
    },
    "@aragon/id/contracts/ens/IPublicResolver.sol": {
      "content": "pragma solidity ^0.4.0;\n\n\ninterface IPublicResolver {\n    function supportsInterface(bytes4 interfaceID) constant returns (bool);\n    function addr(bytes32 node) constant returns (address ret);\n    function setAddr(bytes32 node, address addr);\n    function hash(bytes32 node) constant returns (bytes32 ret);\n    function setHash(bytes32 node, bytes32 hash);\n}\n"
    },
    "contracts/tps/AddressBook.sol": {
      "content": "/*\n * SPDX-License-Identitifer: GPL-3.0-or-later\n */\n\npragma solidity 0.4.24;\n\nimport \"@aragon/os/contracts/apps/AragonApp.sol\";\n\n\n/**\n * @title AddressBook App\n * @author Autark\n * @dev Defines an address book (registry) that allows the\n * association of an ethereum address with an IPFS CID pointing to JSON content\n */\ncontract AddressBook is AragonApp {\n\n    /// Hardcoded constants to save gas\n    /// bytes32 public constant ADD_ENTRY_ROLE = keccak256(\"ADD_ENTRY_ROLE\");\n    bytes32 public constant ADD_ENTRY_ROLE = 0x4a167688760e93a8dd0a899c70e125af7d665ed37fd06496b8c83ce9fdac41bd;\n    /// bytes32 public constant REMOVE_ENTRY_ROLE = keccak256(\"REMOVE_ENTRY_ROLE\");\n    bytes32 public constant REMOVE_ENTRY_ROLE = 0x4bf67e2ff5501162fc2ee020c851b17118c126a125e7f189b1c10056a35a8ed1;\n    /// bytes32 public constant UPDATE_ENTRY_ROLE = keccak256(\"UPDATE_ENTRY_ROLE\");\n    bytes32 public constant UPDATE_ENTRY_ROLE = 0x6838798f8ade371d93fbc95e535888e5fdc0abba71f87ab7320dd9c8220b4da0;\n\n    /// Error string constants\n    string private constant ERROR_NOT_FOUND = \"ENTRY_DOES_NOT_EXIST\";\n    string private constant ERROR_EXISTS = \"ENTRY_ALREADY_EXISTS\";\n    string private constant ERROR_CID_MALFORMED = \"CID_MALFORMED\";\n    string private constant ERROR_CID_LENGTH = \"CID_LENGTH_INCORRECT\";\n    string private constant ERROR_NO_CID = \"CID_DOES_NOT_MATCH\";\n\n    struct Entry {\n        string data;\n        uint256 index;\n    }\n\n    /// The entries in the registry\n    mapping(address => Entry) public entries;\n\n    /// Array-like struct to access all addresses\n    mapping(uint256 => address) public entryArr;\n    uint256 public entryArrLength;\n\n    /// Events\n    event EntryAdded(address addr); /// Fired when an entry is added to the registry\n    event EntryRemoved(address addr); /// Fired when an entry is removed from the registry\n    event EntryUpdated(address addr); /// Fired when an entry is updated with a new CID.\n\n    /**\n     * @dev Guard to check existence of address in the registry\n     * @param _addr The address to enforce its existence in the registry\n     */\n    modifier entryExists(address _addr) {\n        require(isEntryAdded(_addr), ERROR_NOT_FOUND);\n        _;\n    }\n\n    /**\n     * @dev Guard to ensure the CID is 46 chars long according to base58 encoding\n     * @param _cid The IPFS hash of the entry to add to the registry\n     */\n    modifier cidIsValid(string _cid) {\n        bytes memory cidBytes = bytes(_cid);\n        require(cidBytes[0] == \"Q\" && cidBytes[1] == \"m\", ERROR_CID_MALFORMED);\n        require(cidBytes.length == 46, ERROR_CID_LENGTH);\n        _;\n    }\n\n    /**\n     * @notice Initialize AddressBook app\n     * @dev Initializes the app, this is the Aragon custom constructor\n     */\n    function initialize() external onlyInit {\n        initialized();\n    }\n\n    /**\n     * @notice Add the entity `_cid` with address `_addr` to the registry.\n     * @dev CIDs must be base58-encoded in order to work with this function\n     * @param _addr The address of the entry to add to the registry\n     * @param _cid The IPFS hash of the entry to add to the registry\n     */\n    function addEntry(address _addr, string _cid) external cidIsValid(_cid) auth(ADD_ENTRY_ROLE) {\n        require(bytes(entries[_addr].data).length == 0, ERROR_EXISTS);\n        // This is auth-guarded, so it'll overflow well after the app becomes unusable\n        // due to the quantity of entries\n        uint256 entryIndex = entryArrLength++;\n        entryArr[entryIndex] = _addr;\n        entries[_addr] = Entry(_cid, entryIndex);\n        emit EntryAdded(_addr);\n    }\n\n    /**\n     * @notice Remove entity `_cid` with address `_addr` from the registry.\n     * @dev this function only supports CIDs that are base58-encoded\n     * @param _addr The ID of the entry to remove\n     * @param _cid The IPFS hash of the entry to remove from the registry; used only for radspec here\n     */\n    function removeEntry(address _addr, string _cid) external entryExists(_addr) auth(REMOVE_ENTRY_ROLE) {\n        require(keccak256(bytes(_cid)) == keccak256(bytes(entries[_addr].data)), ERROR_NO_CID);\n        uint256 rowToDelete = entries[_addr].index;\n        if (entryArrLength != 1) {\n            address entryToMove = entryArr[entryArrLength - 1];\n            entryArr[rowToDelete] = entryToMove;\n            entries[entryToMove].index = rowToDelete;\n        }\n        delete entries[_addr];\n        // Doesn't require underflow checking because entry existence is verified\n        entryArrLength--;\n        emit EntryRemoved(_addr);\n    }\n\n    /**\n     * @notice Update address `_addr` from `_oldCid` to `_newCid` in the registry.\n     * @dev this function only supports CIDs that are base58-encoded\n     * @param _addr The ID of the entry to update\n     * @param _oldCid The CID of the existing information\n     * @param _newCid The new CID of updated entity info\n     */\n    function updateEntry(\n        address _addr,\n        string _oldCid,\n        string _newCid\n    ) external auth(UPDATE_ENTRY_ROLE) entryExists(_addr) cidIsValid(_newCid)\n    {\n        require(keccak256(bytes(_oldCid)) == keccak256(bytes(entries[_addr].data)), ERROR_NO_CID);\n        entries[_addr].data = _newCid;\n        emit EntryUpdated(_addr);\n    }\n\n    /**\n     * @notice Get data associated to entry `_addr` from the registry.\n     * @dev getter for the entries mapping to IPFS data\n     * @param _addr The ID of the entry to get\n     * @return contentId pointing to the IPFS structured content object for the entry\n     */\n    function getEntry(address _addr) external view isInitialized returns (string contentId) {\n        contentId = entries[_addr].data;\n    }\n\n    /**\n     * @notice Get index associated to entry `_addr` from the registry.\n     * @dev getter for the entries mapping for an index in entryArr\n     * @param _addr The ID of the entry to get\n     * @return contentId pointing to the IPFS structured content object for the entry\n     */\n    function getEntryIndex(address _addr) external view isInitialized entryExists(_addr) returns (uint256 index) {\n        index = entries[_addr].index;\n    }\n\n    /**\n     * @notice Checks if an entry exists in the registry\n     * @param _entry the address to check\n     * @return _repoId Id for entry in entryArr\n     */\n    function isEntryAdded(address _entry) public view returns (bool isAdded) {\n        if (entryArrLength == 0) {\n            return false;\n        }\n\n        if (entries[_entry].index >= entryArrLength) {\n            return false;\n        }\n\n        return (entryArr[entries[_entry].index] == _entry);\n    }\n}\n"
    },
    "contracts/tps/Allocations.sol": {
      "content": "pragma solidity ^0.4.24;\n\nimport \"@aragon/os/contracts/apps/AragonApp.sol\";\n\nimport \"./AddressBook.sol\";\n\nimport \"@aragon/os/contracts/lib/math/SafeMath.sol\";\n\nimport \"@aragon/os/contracts/lib/math/SafeMath64.sol\";\n\nimport \"@aragon/apps-vault/contracts/Vault.sol\";\n\n\n/*******************************************************************************\n    Copyright 2018, That Planning Suite\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*******************************************************************************/\n\n/*******************************************************************************\n* @title IsFundable\n* @author Arthur Lunn\n* @dev Basic interface to show something as fundable\n*******************************************************************************/\ninterface Fundable {\n    function fund(uint256 id) external payable;\n}\n\n\n/*******************************************************************************\n* @title FundForwarder\n* @author Arthur Lunn\n* @dev This will 100% break if the contract is upgraded. Basically just a proxy\n*      to receive funds from an address and \"piece it out\" to a layered contract\n*      Any advice on best practice for this would be welcome.\n*******************************************************************************/\ncontract FundForwarder {\n    Fundable fundable;\n    uint256 id;\n\n    constructor(uint256 _id, Fundable _fundable) public {\n        fundable = _fundable;\n        id = _id;\n    }\n\n    function () external payable {\n        fundable.fund.value(msg.value)(id);\n    }\n}\n\n\n/*******************************************************************************\n* @title Allocations Contract\n* @author Arthur Lunn\n* @dev This contract is meant to handle tasks like basic budgeting,\n*      and any time that tokens need to be distributed based on a certain\n*      percentage breakdown to an array of addresses. Currently it works with ETH\n*      needs to be adapted to work with tokens.\n*******************************************************************************/\ncontract Allocations is AragonApp, Fundable {\n\n    using SafeMath for uint256;\n\n    struct Payout {\n        bytes32[] candidateKeys;\n        address[] candidateAddresses;\n        uint256[] supports;\n        string metadata;\n        address token;\n        //uint256 limit;\n        bool recurring;\n        //bool informational;\n        uint256 period;\n        //uint256 balance;\n        uint256 amount;\n        uint256 startTime;\n        bool distSet;\n        //address token;\n        //address proxy;\n        string description;\n    }\n\n    struct Account {\n        Payout[] payouts;\n        string metadata;\n        //uint limit;\n        uint balance;\n        address proxy;\n    }\n\n\n    AddressBook public addressBook;\n    Vault public vault;\n    Account[] accounts;\n    Payout[] payouts;\n    mapping(address => uint) accountProxies; // proxy address -> account Id\n\n    bytes32 constant public CREATE_ACCOUNT_ROLE = keccak256(\"CREATE_ACCOUNT_ROLE\");\n    bytes32 constant public CREATE_ALLOCATION_ROLE = keccak256(\"CREATE_ALLOCATION_ROLE\");\n    bytes32 constant public EXECUTE_ALLOCATION_ROLE = keccak256(\"EXECUTE_ALLOCATION_ROLE\");\n\n    event PayoutExecuted(uint256 accountId, uint payoutId);\n    event NewAccount(uint256 accountId);\n    event FundAccount(uint256 accountId);\n    event SetDistribution(uint256 accountId, uint payoutId);\n\n    /**\n    * @dev This is the function that sets up who the candidates will be, and\n    *      where the funds will go for the payout. This is where the payout\n    *      object needs to be created in the payouts array.\n    * @notice Start a payout with the specified candidates and addresses.\n    *         None of the distribution or payments are handled in this step.\n    */\n    function initialize(\n        AddressBook _addressBook,\n        Vault _vault\n    ) external onlyInit\n    {\n        addressBook = _addressBook;\n        vault = _vault;\n        accounts.length++;  // position 0 is reserved and unused\n        initialized();\n    }\n\n///////////////////////\n// Getter functions\n///////////////////////\n    function getAccount(uint256 _accountId) external view\n    returns(uint256 balance, string metadata, address proxy)\n    {\n        Account storage account = accounts[_accountId];\n        //limit = account.limit;\n        balance = account.balance;\n        metadata = account.metadata;\n        proxy = account.proxy;\n    }\n\n    function getPayout(uint _accountId, uint _payoutId) external view\n    returns(uint amount, bool recurring, uint startTime, uint period, bool distSet, address token)\n    {\n        Payout storage payout = accounts[_accountId].payouts[_payoutId];\n        token = payout.token;\n        amount = payout.amount;\n        startTime = payout.startTime;\n        recurring = payout.recurring;\n        period = payout.period;\n        distSet = payout.distSet;\n    }\n\n    function getPayoutDescription(uint _accountId, uint _payoutId) external view returns(string description) {\n        Payout storage payout = accounts[_accountId].payouts[_payoutId];\n        description = payout.description;\n    }\n\n    function getNumberOfCandidates(uint _accountId, uint _payoutId) external view\n    returns(uint256 numCandidates)\n    {\n        Payout storage payout = accounts[_accountId].payouts[_payoutId];\n        numCandidates = payout.supports.length;\n    }\n\n    function getPayoutDistributionValue(uint _accountId, uint256 _payoutId, uint256 idx) external view\n    returns(uint256 supports)\n    {\n        Payout storage payout = accounts[_accountId].payouts[_payoutId];\n        supports = payout.supports[idx];\n    }\n\n///////////////////////\n// Payout functions\n///////////////////////\n    /**\n    * @dev This is the function that sets up who the candidates will be, and\n    *      where the funds will go for the payout. This is where the payout\n    *      object needs to be created in the payouts array.\n    * @notice Create allocation account '`_metadata`'\n    * @param _metadata Any relevent label for the payout\n    *\n    */\n    function newAccount(\n        string _metadata\n    ) external auth(CREATE_ACCOUNT_ROLE) returns(uint256 accountId)\n    {\n        accountId = accounts.length++;\n        Account storage account = accounts[accountId];\n        account.metadata = _metadata;\n        account.balance = 0;\n        FundForwarder fund = new FundForwarder(accountId, this);\n        account.proxy = address(fund);\n        accountProxies[account.proxy] = accountId;\n        emit NewAccount(accountId);\n    }\n\n    function fund(uint256 id) external payable {\n        Account storage account = accounts[id];\n        account.balance = account.balance.add(msg.value);\n        emit FundAccount(id);\n    }\n\n    /**\n    * @dev This function distributes the payouts to the candidates in accordance with the distribution values\n    * @notice Distribute allocation `_payoutId`\n    * @param _payoutId Any relevent label for the payout\n    * @param _accountId Account the payout belongs to\n    */\n    function runPayout(uint _accountId, uint256 _payoutId) public auth(EXECUTE_ALLOCATION_ROLE) returns(bool success) {\n        success = _runPayout(_accountId, _payoutId);\n    }\n\n    /**\n    * @dev This is the function that the DotVote will call. It doesn’t need\n    *      to be called by a DotVote (options get weird if it's not)\n    *      but for our use case the “CREATE_ALLOCATION_ROLE” will be given to\n    *      the DotVote.\n    * @notice Create a `@tokenAmount(_token, _amount)` allocation for ' `_description` '\n    * @param _candidateAddresses Array of candidates to be allocated a portion of the payouut\n    * @param _supports The Array of all support values for the various candidates. These values are set in dot voting\n    * @param _accountId The Account used for the payout\n    * @param _recurring boolean used to indicate whether this is a recurring or one-time payout\n    * @param _period time interval between each recurring payout\n    * @param _amount The quantity of funds to be allocated\n    * @param _description The distributions description\n    */\n    function setDistribution(\n        address[] _candidateAddresses,\n        uint256[] _supports,\n        uint256[] /*unused_infoIndices*/,\n        string /*unused_candidateInfo*/,\n        string _description,\n        uint256[] /*unused_level 1 ID - converted to bytes32*/,\n        uint256[] /*unused_level 2 ID - converted to bytes32*/,\n        uint256 _accountId,\n        bool _recurring,\n        uint256 _period,\n        uint256 _amount,\n        address _token\n    ) public auth(CREATE_ALLOCATION_ROLE) returns(uint payoutId)\n    {\n        Account storage account = accounts[_accountId];\n        Payout storage payout = account.payouts[account.payouts.length++];\n\n        payout.token = _token;\n        payout.amount = _amount;\n\n        if (payout.token == address(0)) {\n            require(account.balance >= _amount, \"payout account underfunded\");\n        } else {\n            // Look into this\n            require(vault.balance(_token) >= _amount, \"vault underfunded\");\n        }\n\n        payout.recurring = _recurring;\n        payout.candidateAddresses = _candidateAddresses;\n\n        if (_recurring) {\n            payout.period = _period;\n            // minimum granularity is a single day\n            // This check can be disabled currently to enable testing of shorter times\n            require(payout.period > 86399,\"period too short\");\n        } else {\n            payout.period = 0;\n        }\n        payout.startTime = block.timestamp; // solium-disable-line security/no-block-members\n\n        payout.distSet = true;\n        payout.supports = _supports;\n        payout.description = _description;\n        payoutId = account.payouts.length - 1;\n        emit SetDistribution(_accountId, payoutId);\n        if (!_recurring) {\n            _runPayout(_accountId, payoutId);\n        }\n    }\n\n    function _runPayout(uint _accountId, uint256 _payoutId) internal returns(bool success) {\n        Account storage account = accounts[_accountId];\n        Payout storage payout = account.payouts[_payoutId];\n        uint256 totalSupport;\n        uint i;\n        for (i = 0; i < payout.supports.length; i++) {\n            totalSupport += payout.supports[i];\n        }\n        // Payouts are now instantiated on setDistribution\n        require(payout.distSet);\n        if (payout.recurring) {\n            // TODO create payout execution counter to ensure payout time tracks payouts\n            uint256 payoutTime = payout.startTime.add(payout.period);\n            require(payoutTime < block.timestamp,\"payout period not yet finished\"); // solium-disable-line security/no-block-members\n            payout.startTime = payoutTime;\n        } else {\n            payout.distSet = false;\n        }\n\n        uint individualPayout;\n        address token = payout.token;\n        uint length = payout.candidateAddresses.length;\n        //handle vault\n        if (token == 0x0) {\n            for (i = 0; i < payout.candidateAddresses.length; i++) {\n                individualPayout = payout.supports[i].mul(payout.amount).div(totalSupport);\n\n                if ( accountProxies[payout.candidateAddresses[i]] > 0 ) {\n                    Account storage candidateAccount = accounts[accountProxies[payout.candidateAddresses[i]]];\n                    candidateAccount.balance = candidateAccount.balance.add(individualPayout);\n                    account.balance = account.balance.sub(individualPayout);\n                    emit FundAccount(accountProxies[payout.candidateAddresses[i]]);\n                } else {\n                    payout.candidateAddresses[i].transfer(individualPayout);\n                    account.balance = account.balance.sub(individualPayout);\n                }\n            }\n        } else {\n            for (i = 0; i < length; i++) {\n                if ( accountProxies[payout.candidateAddresses[i]] == 0 ) {\n                    individualPayout = payout.supports[i].mul(payout.amount).div(totalSupport);\n                    vault.transfer(token, payout.candidateAddresses[i], individualPayout);\n                }\n            }\n        }\n        success = true;\n        emit PayoutExecuted(_accountId, _payoutId);\n    }\n\n}\n"
    },
    "contracts/tps/Rewards.sol": {
      "content": "pragma solidity ^0.4.24;\n\nimport \"@aragon/os/contracts/apps/AragonApp.sol\";\nimport \"@aragon/os/contracts/common/IsContract.sol\";\nimport \"./shared/test-helpers/contracts/lib/misc/Migrations.sol\";\nimport \"@aragon/apps-shared-minime/contracts/MiniMeToken.sol\";\nimport \"@aragon/apps-vault/contracts/Vault.sol\";\n\n\n/*******************************************************************************\n* @title Rewards App Contract\n* @author Arthur Lunn\n* @dev This contract is meant to distribute rewards in proportion to a reference\n*      asset, either as a one-off merit rewards or a scheduled dividend\n*******************************************************************************/\ncontract Rewards is IsContract, AragonApp {\n\n    event RewardAdded(uint256 rewardId);\n    event RewardClaimed(uint256 rewardId);\n\n    bytes32 public constant ADD_REWARD_ROLE =  keccak256(\"ADD_REWARD_ROLE\");\n\n    struct Reward {\n        bool isMerit;\n        MiniMeToken referenceToken;\n        address rewardToken;\n        uint256 amount;\n        uint256 duration;\n        uint256 occurances;\n        uint256 delay;\n        uint256 value;\n        uint256 blockStart;\n        string description;\n        address creator;\n        mapping (address => bool) claimed;\n        mapping (address => uint) timeClaimed;\n    }\n\n    mapping (address => uint) totalClaimedAmount;\n    uint256 public totalClaimsEach;\n\n    Reward[] rewards;\n    Vault public vault;\n\n    function initialize( Vault _vault)\n    external onlyInit\n    {\n        initialized();\n        require(isContract(_vault), \"Vault must be a contract\");\n        vault = _vault;\n    }\n\n    /**\n    * @dev This function allows a user to claim their reward (if one is available)\n    * @notice Claim my reward for #`_rewardID`\n    * @param _rewardID The ID of the reward\n    */\n    function claimReward(uint256 _rewardID) external returns(uint256 rewardAmount) {\n        Reward storage reward = rewards[_rewardID];\n        require(block.number > reward.blockStart + reward.duration + reward.delay, \"reward must be claimed after the reward duration and delay\");\n        reward.claimed[msg.sender] = true;\n        reward.timeClaimed[msg.sender] = block.timestamp; // solium-disable-line security/no-block-members\n        // Need to implement solution to occurances\n        if (reward.isMerit) {\n            rewardAmount = calculateMeritReward(reward);\n        } else {\n            rewardAmount = calculateDividendReward(reward);\n        }\n        if (rewardAmount == 0) {\n            return 0;\n        }\n        require(vault.balance(reward.rewardToken) > rewardAmount, \"Vault does not have enough funds to cover this reward\");\n        vault.transfer(reward.rewardToken, msg.sender, rewardAmount);\n        totalClaimedAmount[reward.rewardToken] += rewardAmount;\n        totalClaimsEach++;\n        emit RewardClaimed(_rewardID);\n    }\n\n    function getRewardsLength() external view returns (uint256 rewardsLength) {\n        rewardsLength = rewards.length;\n    }\n\n    function getReward(uint256 rewardID) external view returns(\n        string description,\n        bool isMerit,\n        address referenceToken,\n        address rewardToken,\n        uint256 amount,\n        uint256 startBlock,\n        uint256 endBlock,\n        uint256 duration,\n        uint256 delay,\n        uint256 rewardAmount,\n        bool claimed,\n        uint256 timeClaimed,\n        address creator\n    )\n    {\n        Reward storage reward = rewards[rewardID];\n        description = reward.description;\n        isMerit = reward.isMerit;\n        referenceToken = reward.referenceToken;\n        rewardToken = reward.rewardToken;\n        amount = reward.amount;\n        endBlock = reward.blockStart + reward.duration;\n        startBlock = reward.blockStart;\n        duration = reward.duration;\n        delay = reward.delay;\n        claimed = reward.claimed[msg.sender];\n        timeClaimed = reward.timeClaimed[msg.sender];\n        creator = reward.creator;\n        if (reward.isMerit) {\n            rewardAmount = calculateMeritReward(reward);\n        } else {\n            rewardAmount = calculateDividendReward(reward);\n        }\n    }\n\n    function getTotalAmountClaimed(address _token)\n    external view isInitialized returns (uint256 totalAmountClaimed)\n    {\n        totalAmountClaimed = totalClaimedAmount[_token];\n    }\n\n    /**\n    * @dev This function creates a reward instance to be added to the rewards array. ID's\n    *      are assigned the new intance's index of that array\n    * @notice Create a new `_isMerit ? 'merit reward' : 'dividend'` of `@tokenAmount(_rewardToken, _amount)` for `_referenceToken.symbol(): string` holders (`_description`)\n    * @param _description description of the reward\n    * @param _isMerit Recurring dividend reward or one-off merit reward\n    * @param _referenceToken the token used to calculate reward distributions for each holder\n    * @param _rewardToken currency received as reward\n    * @param _amount the reward amount to be distributed\n    * @param _startBlock block in which token transactions will begin to be tracked\n    * @param _duration the time duration over which reference token earnings are calculated\n    * @param _occurances the number of occurences of a dividend reward\n    * @param _delay the waiting time after the end of the period that the reward can be claimed\n    */\n    function newReward(\n        string _description,\n        bool _isMerit,\n        address _referenceToken,\n        address _rewardToken,\n        uint256 _amount,\n        uint256 _startBlock,\n        uint256 _duration,\n        uint256 _occurances,\n        uint256 _delay\n    ) public auth(ADD_REWARD_ROLE) returns (uint256 rewardId)\n    {\n        require(isContract(_referenceToken), \"_referenceToken must be a contract\");\n        if (_rewardToken != address(0)) {\n            require(isContract(_rewardToken), \"_rewardToken must be a contract\");\n        }\n        require(!_isMerit || _occurances == 1, \"merit rewards must only occur once\");\n        require(_occurances < 42, \"Maximum number of occurances is 41\");\n        require(_startBlock > MiniMeToken(_referenceToken).creationBlock(),\"cannot start period prior to the creation block\");\n        rewardId = rewards.length++;\n        Reward storage reward = rewards[rewards.length - 1];\n        reward.description = _description;\n        reward.isMerit = _isMerit;\n        reward.referenceToken = MiniMeToken(_referenceToken);\n        reward.rewardToken = _rewardToken;\n        reward.amount = _amount;\n        reward.duration = _duration;\n        reward.occurances = _occurances;\n        reward.delay = _delay;\n        reward.blockStart = _startBlock;\n        reward.creator = msg.sender;\n        emit RewardAdded(rewardId);\n        if (_occurances > 1) {\n            newReward(\n                _description,\n                _isMerit,\n                _referenceToken,\n                _rewardToken,\n                _amount,\n                _startBlock + _duration,\n                _duration,\n                _occurances - 1,\n                _delay\n            );\n        }\n    }\n\n    function calculateDividendReward(Reward reward) internal view returns(uint256 rewardAmount) {\n        uint256 balance;\n        uint256 supply;\n        balance = reward.referenceToken.balanceOfAt(msg.sender, reward.blockStart + reward.duration);\n        supply = reward.referenceToken.totalSupplyAt(reward.blockStart + reward.duration);\n        rewardAmount = reward.amount * balance / supply;\n    }\n\n    function calculateMeritReward(Reward reward)internal view returns(uint256 rewardAmount) {\n        uint256 supply;\n        uint256 balance;\n        uint256 initialSupply = reward.referenceToken.totalSupplyAt(reward.blockStart);\n        uint256 endingSupply = reward.referenceToken.totalSupplyAt(reward.blockStart + reward.duration);\n        supply = endingSupply - initialSupply;\n        if (supply == 0) {\n            return 0;\n        }\n\n        uint256 initialBalance = reward.referenceToken.balanceOfAt(msg.sender, reward.blockStart);\n        uint256 endingBalance = reward.referenceToken.balanceOfAt(msg.sender, reward.blockStart + reward.duration);\n        //require(initialSupply < endingSupply, \"The supply must have increased over the period\");\n        //require(initialBalance < endingBalance, \"The user must have earned tokens over the period\");\n\n        balance = endingBalance - initialBalance;\n        rewardAmount = reward.amount * balance / supply;\n    }\n}\n"
    },
    "contracts/tps/shared/test-helpers/contracts/lib/misc/Migrations.sol": {
      "content": "pragma solidity ^0.4.24;\n\n\ncontract Migrations {\n    address public owner;\n    uint public lastCompletedMigration;\n\n    modifier restricted() {\n        if (msg.sender == owner)\n            _;\n    }\n\n    constructor()  public {\n        owner = msg.sender;\n    }\n\n    function setCompleted(uint completed) public restricted {\n        lastCompletedMigration = completed;\n    }\n\n    function upgrade(address newAddress) public restricted {\n        Migrations upgraded = Migrations(newAddress);\n        upgraded.setCompleted(lastCompletedMigration);\n    }\n}\n"
    },
    "contracts/tps/DotVoting.sol": {
      "content": "/*\n * SPDX-License-Identitifer: GPL-3.0-or-later\n */\n\npragma solidity 0.4.24;\n\nimport \"@aragon/os/contracts/apps/AragonApp.sol\";\nimport \"@aragon/apps-shared-minime/contracts/MiniMeToken.sol\";\n\n// TODO: Revert import path when changes get merged into aragon/os\n// import \"@aragon/os/contracts/common/ADynamicForwarder.sol\";\nimport \"./shared/test-helpers/contracts/common/ADynamicForwarder.sol\";\n\n\n/**\n  * @title DotVoting App\n  * @author Autark\n* @dev This vote is meant to take a set of options and then let\n  * holders of a specific token distribute their current voting\n  * weight along all options. The code is designed to work as an\n  * Aragon app [much thanks to the team for much of the codes structure]\n  * but could easily be adapted to other systems.\n  * Attention was paid to make the program as generalized as possible.\n  */\ncontract DotVoting is ADynamicForwarder, AragonApp {\n\n    MiniMeToken public token;\n    uint256 public globalCandidateSupportPct;\n    uint256 public globalMinQuorum;\n    uint64 public voteTime;\n    uint256 voteLength;\n\n    uint256 constant public PCT_BASE = 10 ** 18; // 0% = 0; 1% = 10^16; 100% = 10^18\n\n    bytes32 constant public ROLE_ADD_CANDIDATES = keccak256(\"ROLE_ADD_CANDIDATES\");\n    bytes32 constant public ROLE_CREATE_VOTES = keccak256(\"ROLE_CREATE_VOTES\");\n    bytes32 constant public ROLE_MODIFY_QUORUM = keccak256(\"ROLE_MODIFY_QUORUM\");\n    bytes32 constant public ROLE_MODIFY_CANDIDATE_SUPPORT = keccak256(\"ROLE_MODIFY_CANDIDATE_SUPPORT\");\n    string private constant ERROR_CAN_VOTE = \"ERROR_CAN_VOTE\";\n    string private constant ERROR_MIN_QUORUM = \"ERROR_MIN_QUORUM\";\n    string private constant ERROR_VOTE_LENGTH = \"ERROR_VOTE_LENGTH\";\n\n    struct Vote {\n        string metadata;\n        address creator;\n        uint64 startDate;\n        uint256 snapshotBlock;\n        uint256 candidateSupportPct;\n        uint256 minQuorum;\n        uint256 totalVoters;\n        uint256 totalParticipation;\n        mapping (address => uint256[]) voters;\n        uint256 actionId;\n    }\n\n    mapping (uint256 => Vote) votes;\n\n    event StartVote(uint256 indexed voteId);\n    event CastVote(uint256 indexed voteId);\n    event UpdateCandidateSupport(string indexed candidateKey, uint256 support);\n    event ExecuteVote(uint256 indexed voteId);\n    event ExecutionScript(bytes script, uint256 data);\n    // Add hash info\n    event ExternalContract(uint256 indexed voteId, address addr, bytes32 funcSig);\n    event AddCandidate(uint256 voteId, address candidate, uint length);\n    event Metadata(string metadata);\n    event Location(uint256 currentLocation);\n    event Address(address candidate);\n    event CandidateQty(uint256 numberOfCandidates);\n    event UpdateQuorum(uint256 quorum);\n    event UpdateMinimumSupport(uint256 minSupport);\n\n////////////////\n// Constructor\n////////////////\n\n   /**\n    * @notice Initializes DotVoting app with `_token.symbol(): string` for\n    *         governance, minimum quorum of\n    *         `(_minQuorum - _minQuorum % 10^14)\n    *         / 10^16`, minimal candidate acceptance of\n    *         `(_candidateSupportPct - _candidateSupportPct % 10^14) / 10^16`\n    *         and vote duations of `(_voteTime - _voteTime % 86400) / 86400`\n    *         day `_voteTime >= 172800 ? 's' : ''`\n    * @param _token MiniMeToken address that will be used as governance token\n    * @param _minQuorum Percentage of voters that must participate in\n    *        a vote for it to succeed (expressed as a 10^18 percentage,\n    *        (eg 10^16 = 1%, 10^18 = 100%)\n    * @param _candidateSupportPct Percentage of cast voting power that must\n    *        support a candidate for it to be counted (expressed as a 10^18\n    *        percentage, (eg 10^16 = 1%, 10^18 = 100%)\n    * @param _voteTime Seconds that a vote will be open for token holders to\n    *        vote (unless it is impossible for the fate of the vote to change)\n    */\n    function initialize(\n        MiniMeToken _token,\n        uint256 _minQuorum,\n        uint256 _candidateSupportPct,\n        uint64 _voteTime\n    ) external onlyInit\n    {\n        initialized();\n        require(_minQuorum > 0, ERROR_MIN_QUORUM);\n        require(_minQuorum <= PCT_BASE, ERROR_MIN_QUORUM);\n        require(_minQuorum >= _candidateSupportPct, ERROR_MIN_QUORUM);\n        token = _token;\n        globalMinQuorum = _minQuorum;\n        globalCandidateSupportPct = _candidateSupportPct;\n        voteTime = _voteTime;\n        voteLength = 1;\n    }\n\n///////////////////////\n// Voting functions\n///////////////////////\n\n\n    /**\n    * @notice Create a new dot vote about \"`_metadata`\"\n    * @param _executionScript EVM script to be executed on approval\n    * @param _metadata Vote metadata\n    * @return voteId Id for newly created vote\n    */\n    function newVote(bytes _executionScript, string _metadata)\n        external auth(ROLE_CREATE_VOTES) returns (uint256 voteId)\n    {\n        voteId = _newVote(_executionScript, _metadata); /*, true);*/\n    }\n\n    /**\n    * @notice Cast a dot vote.\n    * @param _voteId id for vote structure this 'ballot action' is connected to\n    * @param _supports Array of support weights in order of their order in\n    *                  `votes[_voteId].candidateKeys`, sum of all supports\n    *                  must be less than `token.balance[msg.sender]`.\n    */\n    function vote(uint256 _voteId, uint256[] _supports)  external isInitialized {\n        require(canVote(_voteId, msg.sender), ERROR_CAN_VOTE);\n        _vote(_voteId, _supports, msg.sender);\n    }\n\n    /**\n    * @notice Execute dot vote `_voteId`\n    * @param _voteId Id for vote\n    */\n    function executeVote(uint256 _voteId) external isInitialized {\n        require(canExecute(_voteId), ERROR_CAN_VOTE);\n        _executeVote(_voteId);\n    }\n\n    /**\n    * @notice `getCandidate` serves as a basic getter using the description\n    *         to return the struct data.\n    * @param _voteId id for vote structure this 'ballot action' is connected to\n    * @param _candidateIndex The candidate descrciption of the candidate.\n    */\n    function getCandidate(uint256 _voteId, uint256 _candidateIndex)\n    external view isInitialized returns(address candidateAddress, uint256 voteSupport, string metadata, bytes32 externalId1, bytes32 externalId2)\n    {\n        require(_voteId < voteLength, ERROR_VOTE_LENGTH);//, \"Vote ID outside of current vote range\");\n        uint256 actionId = votes[_voteId].actionId;\n        Action storage action = actions[actionId];\n        uint256 candidateLength = action.optionKeys.length;\n        require(_candidateIndex < candidateLength); // solium-disable-line error-reason\n        OptionState storage candidate = action.options[action.optionKeys[_candidateIndex]];\n        candidateAddress = optionAddresses[action.optionKeys[_candidateIndex]];\n        voteSupport = candidate.actionSupport;\n        metadata = candidate.metadata;\n        externalId1 = candidate.externalId1;\n        externalId2 = candidate.externalId2;\n    }\n\n    /**\n    * @notice `setglobalCandidateSupportPct` serves as a basic getter using the description\n    *         to return the struct data.\n    * @param _globalCandidateSupportPct Percentage of cast voting power that must\n    *        support a candidate for it to be counted (expressed as a 10^18\n    *        percentage, (eg 10^16 = 1%, 10^18 = 100%)\n    */\n    function setglobalCandidateSupportPct(uint256 _globalCandidateSupportPct)\n    external auth(ROLE_MODIFY_CANDIDATE_SUPPORT)\n    {\n        require(globalMinQuorum >= _globalCandidateSupportPct); // solium-disable-line error-reason\n        globalCandidateSupportPct = _globalCandidateSupportPct;\n        emit UpdateMinimumSupport(globalCandidateSupportPct);\n    }\n\n    /**\n    * @notice `setGlobalQuorum` serves as a basic setter for the qourum.\n    * @param _minQuorum Percentage of voters that must participate in\n    *        a vote for it to succeed (expressed as a 10^18 percentage,\n    *        (eg 10^16 = 1%, 10^18 = 100%)\n    */\n    function setGlobalQuorum(uint256 _minQuorum)\n    external auth(ROLE_MODIFY_QUORUM)\n    {\n        require(_minQuorum > 0); // solium-disable-line error-reason\n        require(_minQuorum <= PCT_BASE); // solium-disable-line error-reason\n        require(_minQuorum >= globalCandidateSupportPct); // solium-disable-line error-reason\n        globalMinQuorum = _minQuorum;\n        emit UpdateQuorum(globalMinQuorum);\n    }\n\n    /**\n    * @notice `addCandidate` allows the `ROLE_ADD_CANDIDATES` to add candidates\n    *         (or options) to the current dot vote.\n    * @param _voteId id for vote structure this 'ballot action' is connected to\n    * @param _metadata Any additional information about the candidate.\n    *        Base implementation does not use this parameter.\n    * @param _description This is the address that will be displayed along the\n    *        option when voting\n    * @param _eId1 External ID 1, can be used for basic candidate information\n    * @param _eId2 External ID 2, can be used for basic candidate information\n    */\n    function addCandidate(uint256 _voteId, string _metadata, address _description, bytes32 _eId1, bytes32 _eId2)\n    public auth(ROLE_ADD_CANDIDATES)\n    {\n        Vote storage voteInstance = votes[_voteId];\n        require(_voteId < voteLength, ERROR_VOTE_LENGTH);\n        require(_isVoteOpen(voteInstance)); // solium-disable-line error-reason\n        addOption(votes[_voteId].actionId, _metadata, _description, _eId1, _eId2);\n    }\n\n///////////////////////\n// IForwarder functions\n///////////////////////\n\n    /**\n    * @notice `isForwarder` is a basic helper function used to determine\n    *         if a function implements the IForwarder interface\n    * @dev IForwarder interface conformance\n    * @return always returns true\n    */\n    function isForwarder() public pure returns (bool) {\n        return true;\n    }\n\n    /**\n    * @notice Used to ensure that the permissions are being handled properly\n    *         for the dot vote forwarding\n    * @dev IForwarder interface conformance\n    * @param _sender Address of the entity trying to forward\n    * @return True is `_sender` has correct permissions\n    */\n    function canForward(address _sender, bytes /*_evmCallScript*/) public view returns (bool) {\n        return canPerform(_sender, ROLE_CREATE_VOTES, arr());\n    }\n\n    // * @param _evmCallScript Not used in this implementation\n\n        /**\n    * @notice Creates a vote to execute the desired action\n    * @dev IForwarder interface conformance\n    * @param _evmScript Start vote with script\n    */\n    function forward(bytes _evmScript) public { // solium-disable-line function-order\n        require(canForward(msg.sender, _evmScript)); // solium-disable-line error-reason\n        _newVote(_evmScript, \"\"); /*, true);*/\n    }\n\n///////////////////////\n// View state functions\n///////////////////////\n\n    /**\n    * @notice `canVote` is used to check whether an address is elligible to\n    *         cast a dot vote in a given dot vote action.\n    * @param _voteId The ID of the Vote on which the vote would be cast.\n    * @param _voter The address of the entity trying to vote\n    * @return True is `_voter` has a vote token balance and vote is open\n    */\n    function canVote(uint256 _voteId, address _voter) public view isInitialized returns (bool) {\n        require(_voteId < voteLength, ERROR_VOTE_LENGTH);\n        Vote storage voteInstance = votes[_voteId];\n        return _isVoteOpen(voteInstance) && token.balanceOfAt(_voter, voteInstance.snapshotBlock) > 0;\n    }\n\n    /**\n    * @notice `canExecute` is used to check that the participation has been met\n    *         and the vote has reached it's end before the execute\n    *         function is called.\n    * @param _voteId id for vote structure this 'ballot action' is connected to\n    * @return True if the vote is elligible for execution.\n    */\n    function canExecute(uint256 _voteId) public view isInitialized returns (bool) {\n        require(_voteId < voteLength, ERROR_VOTE_LENGTH);\n        Vote storage voteInstance = votes[_voteId];\n        Action storage action = actions[voteInstance.actionId];\n        if (action.executed)\n            return false;\n         // vote ended?\n        if (_isVoteOpen(voteInstance))\n          return false;\n         // has minimum participation threshold been reached?\n        if (!_isValuePct(voteInstance.totalParticipation, voteInstance.totalVoters, voteInstance.minQuorum))\n            return false;\n        return true;\n    }\n\n    /**\n    * @notice `getVote` simply splits all of the data elements out of a vote\n    *         struct and returns the individual values.\n    * @param _voteId The ID of the Vote struct in the `votes` array\n    */\n    function getVote(uint256 _voteId) public view isInitialized returns\n    (\n        bool open,\n        address creator,\n        uint64 startDate,\n        uint256 snapshotBlock,\n        uint256 candidateSupport,\n        uint256 totalVoters,\n        uint256 totalParticipation,\n        uint256 externalId,\n        bytes executionScript, // script,\n        bool executed,\n        string voteDescription\n    ) { // solium-disable-line lbrace\n        require(_voteId < voteLength, ERROR_VOTE_LENGTH);\n        Vote storage voteInstance = votes[_voteId];\n        Action memory action = actions[voteInstance.actionId];\n        open = _isVoteOpen(voteInstance);\n        creator = voteInstance.creator;\n        startDate = voteInstance.startDate;\n        snapshotBlock = voteInstance.snapshotBlock;\n        candidateSupport = voteInstance.candidateSupportPct;\n        totalVoters = voteInstance.totalVoters;\n        totalParticipation = voteInstance.totalParticipation;\n        executionScript = action.executionScript;\n        executed = action.executed;\n        externalId = action.externalId;\n        voteDescription = action.description;\n    }\n\n        /**\n    * @notice `getCandidateLength` returns the total number of candidates for\n    *         a given vote.\n    * @param _voteId The ID of the Vote struct in the `votes` array\n    */\n    function getCandidateLength(uint256 _voteId) public view isInitialized returns\n    ( uint totalCandidates ) { // solium-disable-line lbrace\n        require(_voteId < voteLength, ERROR_VOTE_LENGTH);\n        uint256 actionId = votes[_voteId].actionId;\n        totalCandidates = actions[actionId].optionKeys.length;\n    }\n\n    /**\n    * @notice `getVoteMetadata` simply pulls the vote metadata out of a vote\n    *         struct and returns the individual value.\n    * @param _voteId The ID of the Vote struct in the `votes` array\n    */\n    function getVoteMetadata(uint256 _voteId) public view isInitialized returns (string) {\n        require(_voteId < voteLength, ERROR_VOTE_LENGTH);\n        return votes[_voteId].metadata;\n    }\n\n    /**\n    * @notice `getVoterState` allows a user to get the vote weights for a given\n    *         voter.\n    * @param _voteId The ID of the Vote struct in the `votes` array.\n    * @param _voter The voter whose weights will be returned\n    */\n    function getVoterState(uint256 _voteId, address _voter) public view isInitialized returns (uint256[]) {\n        require(_voteId < voteLength, ERROR_VOTE_LENGTH);\n        return votes[_voteId].voters[_voter];\n    }\n\n///////////////////////\n// Internal functions\n///////////////////////\n\n    /**\n    * @notice `_newVote` starts a new vote and adds it to the votes array.\n    *         votes are not started with a vote from the caller, as candidates\n    *         and candidate weights need to be supplied.\n    * @param _executionScript The script that will be executed when\n    *        this vote closes. Script is of the following form:\n    *            [ specId (uint32: 4 bytes) ] many calls with this structure ->\n    *            [ to (address: 20 bytes) ]\n    *            [calldataLength (uint32: 4 bytes) ]\n    *            [ function hash (uint32: 4 bytes) ]\n    *            [ calldata (calldataLength bytes) ]\n    *        In order to work with a dot vote the execution script must contain\n    *        Arrays as its first six parameters. Non-string array lengths must all equal candidateLength\n    *        The first Array is generally a list of identifiers (address)\n    *        The second array will be composed of support value (uint256).\n    *        The third array will be end index for each candidates Information within the infoString (optional uint256)\n    *        The fourth array is a string of concatenated candidate information, the infoString (optional string)\n    *        The fifth array is used for description params (optional string)\n    *        The sixth array is an array of identification keys (optional uint256)\n    *        The seventh array is a second array of identification keys, usually mapping to a second level (optional uint256)\n    *        The eigth parameter is used as the identifier for this vote. (uint256)\n    *        See ExecutionTarget.sol in the test folder for an example  forwarded function (setSignal)\n    * @param _metadata The metadata or vote information attached to this vote\n    * @return voteId The ID(or index) of this vote in the votes array.\n    */\n    function _newVote(bytes _executionScript, string _metadata) internal\n    isInitialized returns (uint256 voteId)\n    {\n        require(_executionScript.uint32At(0x0) == 1); // solium-disable-line error-reason\n        uint256 actionId = parseScript(_executionScript);\n        voteId = voteLength++;\n        Vote storage voteInstance = votes[voteId];\n        voteInstance.creator = msg.sender;\n        voteInstance.metadata = _metadata;\n        voteInstance.actionId = actionId;\n        voteInstance.startDate = uint64(block.timestamp); // solium-disable-line security/no-block-members\n        voteInstance.snapshotBlock = getBlockNumber() - 1; // avoid double voting in this very block\n        voteInstance.totalVoters = token.totalSupplyAt(voteInstance.snapshotBlock);\n        voteInstance.candidateSupportPct = globalCandidateSupportPct;\n        voteInstance.minQuorum = globalMinQuorum;\n        // First Static Parameter in script parsed for the externalId\n        emit ExternalContract(voteId, _executionScript.addressAt(0x4),_executionScript.bytes32At(0x0));\n        emit StartVote(voteId);\n        emit ExecutionScript(_executionScript, 0);\n    }\n\n    /*\n    * @notice `_vote` is the internal function that allows a token holder to\n    *         caste a vote on the current options.\n    * @param _voteId id for vote structure this 'ballot action' is connected to\n    * @param _supports Array of support weights in order of their order in\n    *        `votes[_voteId].candidateKeys`, sum of all supports must be less\n    *        than `token.balance[msg.sender]`.\n    * @param _voter The address of the entity \"casting\" this vote action.\n    */\n    function _vote(\n        uint256 _voteId,\n        uint256[] _supports,\n        address _voter\n    ) internal\n    {\n        require(_voteId < voteLength, ERROR_VOTE_LENGTH);\n        Vote storage voteInstance = votes[_voteId];\n        Action storage action = actions[voteInstance.actionId];\n\n        // this could re-enter, though we can asume the\n        // governance token is not maliciuous\n        uint256 voterStake = token.balanceOfAt(_voter, voteInstance.snapshotBlock);\n        uint256 totalSupport = 0;\n\n        emit CastVote(_voteId);\n\n\n        uint256 voteSupport;\n        uint256[] storage oldVoteSupport = voteInstance.voters[msg.sender];\n        bytes32[] storage cKeys = action.optionKeys;\n        uint256 supportsLength = _supports.length;\n        uint256 oldSupportLength = oldVoteSupport.length;\n        uint256 totalParticipation = voteInstance.totalParticipation;\n        require(cKeys.length == supportsLength); // solium-disable-line error-reason\n        require(oldSupportLength <= supportsLength); // solium-disable-line error-reason\n        _checkTotalSupport(_supports, voterStake);\n        uint256 i = 0;\n        // This is going to cost a lot of gas... it'd be cool if there was\n        // a better way to do this.\n        //totalParticipation = _syncOldSupports(oldSupportLength, )\n        for (i; i < oldSupportLength; i++) {\n            voteSupport = action.options[cKeys[i]].actionSupport;\n            totalParticipation = totalParticipation.sub(oldVoteSupport[i]);\n            voteSupport = voteSupport.sub(oldVoteSupport[i]);\n            voteSupport = voteSupport.add(_supports[i]);\n            totalParticipation = totalParticipation.add(_supports[i]);\n            action.options[cKeys[i]].actionSupport = voteSupport;\n        }\n        for (i; i < supportsLength; i++) {\n            voteSupport = action.options[cKeys[i]].actionSupport;\n            voteSupport = voteSupport.add(_supports[i]);\n            totalParticipation = totalParticipation.add(_supports[i]);\n            action.options[cKeys[i]].actionSupport = voteSupport;\n        }\n        voteInstance.totalParticipation = totalParticipation;\n        voteInstance.voters[msg.sender] = _supports;\n    }\n\n    function _checkTotalSupport(uint256[] _supports, uint256 _voterStake) internal {\n        uint256 totalSupport;\n        for (uint64 i = 0; i < _supports.length; i++) {\n            totalSupport = totalSupport.add(_supports[i]);\n        }\n        require(totalSupport <= _voterStake); // solium-disable-line error-reason\n    }\n\n    /**\n    * @notice `_pruneVotes` trims out options that don't meet the minimum support pct.\n    */\n    function _pruneVotes(uint256 _voteId, uint256 _candidateSupportPct) internal {\n        require(_voteId < voteLength, ERROR_VOTE_LENGTH);\n        Vote storage voteInstance = votes[_voteId];\n        uint256 actionId = voteInstance.actionId;\n        Action storage action = actions[actionId];\n        bytes32[] memory candidateKeys = actions[actionId].optionKeys;\n        uint256 candidateLength = candidateKeys.length;\n        for (uint256 i = 0; i < candidateLength; i++) {\n            bytes32 key = candidateKeys[i];\n            OptionState storage candidateState = action.options[key];\n            if (!_isValuePct(candidateState.actionSupport, voteInstance.totalParticipation, voteInstance.candidateSupportPct)) {\n                voteInstance.totalParticipation -= candidateState.actionSupport;\n                candidateState.actionSupport = 0;\n            }\n        }\n    }\n\n    /**\n    * @notice `_executeVote` executes the provided script for this vote and\n    *         passes along the candidate data to the next function.\n    * @return voteId The ID(or index) of this vote in the votes array.\n    */\n    function _executeVote(uint256 _voteId) internal {\n        require(_voteId < voteLength, ERROR_VOTE_LENGTH);\n        Vote storage voteInstance = votes[_voteId];\n        uint256 actionId = voteInstance.actionId;\n        Action storage action = actions[actionId];\n        uint256 candidateSupportPct = voteInstance.candidateSupportPct;\n        if (candidateSupportPct > 0) {\n            _pruneVotes(_voteId, candidateSupportPct);\n        }\n        bytes memory script = encodeInput(voteInstance.actionId);\n        emit ExecutionScript(script, 0);\n        action.executed = true;\n        runScript(script, new bytes(0), new address[](0));\n        emit ExecuteVote(_voteId);\n    }\n\n    /**\n    * @dev Checks whether vote time has passed and whether vote has executed\n    */\n    function _isVoteOpen(Vote storage voteArg) internal view returns (bool) {\n        bool voteWithinTime = uint64(block.timestamp) < (voteArg.startDate.add(voteTime)); // solium-disable-line security/no-block-members\n        return voteWithinTime && !actions[voteArg.actionId].executed;\n    }\n\n    /**\n    * @dev Calculates whether `_value` is at least a percentage `_pct` of `_total`\n    */\n    function _isValuePct(uint256 _value, uint256 _total, uint256 _pct)\n        internal pure returns (bool)\n    {\n        // if (_total == 0) {\n        if (_value == 0 && _total > 0)\n            return false;\n        // }\n\n        uint256 m = _total.mul(_pct);\n        uint256 v = m / PCT_BASE;\n        // uint256 computedPct = _value.mul(PCT_BASE) / _total;\n\n        // return computedPct >= _pct;\n\n        // If division is exact, allow same value,\n        // otherwise require value to be greater\n        return m % PCT_BASE == 0 ? _value >= v : _value > v;\n    }\n}\n"
    },
    "contracts/tps/shared/test-helpers/contracts/common/ADynamicForwarder.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"@aragon/os/contracts/lib/math/SafeMath.sol\";\nimport \"@aragon/os/contracts/lib/math/SafeMath64.sol\";\n\n// TODO: Use @aragon/os/contracts/ version when it gets merged\nimport \"../evmscript/ScriptHelpers.sol\";\n// TODO: Research why using the @aragon/os version breaks coverage\nimport \"./IForwarder.sol\";\n\n/**\n  * @title ADynamicForwarder App\n  * @author Autark\n  * @dev This serves as an abstract contract to facilitate any voting pattern where dynamic\n  *     results must be passed out of the contract. It provides options for the voting contract\n  *     to then act upon and helpers to parce and encode evmScripts from/to options.\n  */\ncontract ADynamicForwarder is IForwarder {\n    using ScriptHelpers for bytes;\n    using SafeMath for uint256;\n    using SafeMath64 for uint64;\n\n    uint256 constant public OPTION_ADDR_PARAM_LOC = 1;\n    uint256 constant public OPTION_SUPPORT_PARAM_LOC = 2;\n    uint256 constant public INDICIES_PARAM_LOC = 3;\n    uint256 constant public OPTION_INFO_PARAM_LOC = 4;\n    uint256 constant public DESCRIPTION_PARAM_LOC = 5;\n    uint256 constant public EX_ID1_PARAM_LOC = 6;\n    uint256 constant public EX_ID2_PARAM_LOC = 7;\n    uint256 constant public TOTAL_DYNAMIC_PARAMS = 7;\n\n    struct Action {\n        uint256 externalId;\n        string description;\n        uint256 infoStringLength;\n        bytes executionScript;\n        uint256 scriptOffset;\n        uint256 scriptRemainder;\n        bool executed;\n        bytes32[] optionKeys;\n        mapping (bytes32 => OptionState) options;\n    }\n\n    struct OptionState {\n        bool added;\n        string metadata;\n        uint8 keyArrayIndex;\n        uint256 actionSupport;\n        bytes32 externalId1;\n        bytes32 externalId2;\n    }\n\n    mapping (bytes32 => address ) optionAddresses;\n    mapping (uint256 => Action) actions;\n    uint256 actionsLength = 0;\n\n    event AddOption(uint256 actionId, address optionAddress, uint256 optionQty);\n    event OptionQty(uint256 qty);\n    event Address(address currentOption);\n    event OrigScript(bytes script);\n\n    /**\n    * @notice `getOption` serves as a basic getter using the description\n    *         to return the struct data.\n    * @param _actionId id for action structure this 'ballot action' is connected to\n    * @param _optionIndex The option descrciption of the option.\n    */\n    function getOption(uint256 _actionId, uint256 _optionIndex) // solium-disable-line function-order\n    external view returns(address optionAddress, uint256 actionSupport, string metadata, bytes32 externalId1, bytes32 externalId2)\n    {\n        Action storage actionInstance = actions[_actionId];\n        OptionState storage option = actionInstance.options[actionInstance.optionKeys[_optionIndex]];\n        optionAddress = optionAddresses[actionInstance.optionKeys[_optionIndex]];\n        actionSupport = option.actionSupport;\n        metadata = option.metadata;\n        externalId1 = option.externalId1;\n        externalId2 = option.externalId2;\n    }\n\n    /**\n    * @notice `getOptionLength` returns the total number of options for\n    *         a given action.\n    * @param _actionId The ID of the Action struct in the `actions` array\n    */\n    function getOptionLength(uint256 _actionId) public view returns\n    ( uint totalOptions ) { // solium-disable-line lbrace\n        totalOptions = actions[_actionId].optionKeys.length;\n    }\n\n    /**\n    * @notice `addOption` allows internal addition of options\n    *         (or options) to the current action.\n    * @param _actionId id for action structure this 'ballot action' is connected to\n    * @param _metadata Any additional information about the option.\n    *        Base implementation does not use this parameter.\n    * @param _description This is the string that will be displayed along the\n    *        option when voting\n    */\n    function addOption(uint256 _actionId, string _metadata, address _description, bytes32 eId1, bytes32 eId2)\n    internal\n    {\n        // Get action and option into storage\n        Action storage actionInstance = actions[_actionId];\n        bytes32[] storage keys = actionInstance.optionKeys;\n        bytes32 cKey = keccak256(abi.encodePacked(_description));\n        OptionState storage option = actionInstance.options[cKey];\n        // Make sure that this option has not already been added\n        require(option.added == false); // solium-disable-line error-reason\n        // Set all data for the option\n        option.added = true;\n        option.keyArrayIndex = uint8(keys.length);\n        option.metadata = _metadata;\n        option.externalId1 = eId1;\n        option.externalId2 = eId2;\n        // double check\n        optionAddresses[cKey] = _description;\n        keys.push(cKey);\n        actionInstance.optionKeys = keys;\n        actionInstance.infoStringLength += bytes(_metadata).length;\n        emit AddOption(_actionId, optionAddresses[cKey], actionInstance.optionKeys.length);\n    }\n\n    function addDynamicElements(\n        bytes script,\n        uint256 offset,\n        uint256 numberOfOptions,\n        uint256 strLength,\n        uint256 desLength\n    ) internal pure returns(bytes)\n    {\n        uint256 secondDynamicElementLocation = 32 + offset + (numberOfOptions * 32);\n        uint256 thirdDynamicElementLocation = secondDynamicElementLocation + 32 + (numberOfOptions * 32);\n        uint256 fourthDynamicElementLocation = thirdDynamicElementLocation + 32 + (numberOfOptions * 32);\n        uint256 fifthDynamicElementLocation = fourthDynamicElementLocation + (strLength / 32) * 32 + (strLength % 32 == 0 ? 32 : 64);\n        uint256 sixthDynamicElementLocation = fifthDynamicElementLocation + (desLength / 32) * 32 + (desLength % 32 == 0 ? 32 : 64);\n        uint256 seventhDynamicElementLocation = sixthDynamicElementLocation + 32 + (numberOfOptions * 32);\n\n        assembly {\n            mstore(add(script, 96), secondDynamicElementLocation)\n            mstore(add(script, 128), thirdDynamicElementLocation)\n            mstore(add(script, 160), fourthDynamicElementLocation)\n            mstore(add(script, 192), fifthDynamicElementLocation)\n            mstore(add(script, 224), sixthDynamicElementLocation)\n            mstore(add(script, 256), seventhDynamicElementLocation)\n        }\n\n        return script;\n    }\n\n    function _goToParamOffset(uint256 _paramNum, bytes _executionScript) internal pure returns(uint256 paramOffset) {\n        /*\n        param numbers and what they map to:\n        1. option addresses\n        2. Supports values\n        3. Info String indexes\n        4. Info String length\n        5. Description\n        6. Level 1 external references\n        7. level 2 external references\n        */\n        paramOffset = _executionScript.uint256At(0x20 + (0x20 * (_paramNum - 1) )) + 0x20;\n\n    }\n\n    function substring(\n        bytes strBytes,\n        uint startIndex,\n        uint endIndex\n    ) internal pure returns (string)\n    {\n        // first char is at location 0\n        //IPFS addresses span from 0 (startindex) to 46 (endIndex)\n        bytes memory result = new bytes(endIndex-startIndex);\n        for (uint i = startIndex; i < endIndex; i++) {\n            result[i-startIndex] = strBytes[i];\n        }\n        return string(result);\n    }\n\n    function _iterateExtraction(uint256 _actionId, bytes _executionScript, uint256 _currentOffset, uint256 _optionLength) internal {\n        uint256 currentOffset = _currentOffset;\n        address currentOption;\n        string memory info;\n        uint256 infoEnd;\n        bytes32 externalId1;\n        bytes32 externalId2;\n        uint256 idOffset;\n        uint256 infoStart = _goToParamOffset(OPTION_INFO_PARAM_LOC,_executionScript) + 0x20;\n        //Location(infoStart);\n        emit OptionQty(_optionLength);\n        for (uint256 i = 0 ; i < _optionLength; i++) {\n            currentOption = _executionScript.addressAt(currentOffset + 0x0C);\n            emit Address(currentOption);\n            //find the end of the infoString using the relative arg positions\n            infoEnd = infoStart + _executionScript.uint256At(currentOffset + (0x20 * 2 * (_optionLength + 1) ));\n            info = substring(_executionScript, infoStart, infoEnd);\n            //Metadata(info);\n            //Location(infoEnd);\n            currentOffset = currentOffset + 0x20;\n            // update the index for the next iteration\n            infoStart = infoEnd;\n            // store option external IDs\n            idOffset = _goToParamOffset(EX_ID1_PARAM_LOC, _executionScript) + 0x20 * (i + 1);\n            externalId1 = bytes32(_executionScript.uint256At(idOffset));\n            idOffset = _goToParamOffset(EX_ID2_PARAM_LOC, _executionScript) + 0x20 * (i + 1);\n            externalId2 = bytes32(_executionScript.uint256At(idOffset));\n\n            addOption(_actionId, info, currentOption, externalId1, externalId2);\n        }\n    }\n\n    /**\n    * @dev This function needs to work with strings instead of addresses but it doesn't\n    *      This fits our current use case better and string manipulation is harder\n    *      since there's more like... dynamic-ness.\n            //TODO Update the above dev info\n    */\n    function _extractOptions(bytes _executionScript, uint256 _actionId) internal returns(uint256 currentOffset, uint256 calldataLength) {\n        Action storage actionInstance = actions[_actionId];\n        // in order to find out the total length of our call data we take the 3rd\n        // relevent byte chunk (after the specid and the target address)\n        calldataLength = uint256(_executionScript.uint32At(0x4 + 0x14));\n        // Since the calldataLength is 4 bytes the start offset is\n        uint256 startOffset = 0x04 + 0x14 + 0x04;\n        // The first parameter is located at a byte depth indicated by the first\n        // word in the calldata (which is located at the startOffset + 0x04 for the function signature)\n        // so we have:\n        // start offset (spec id + address + calldataLength) + param offset + function signature\n        // note:function signature length (0x04) added in both contexts: grabbing the offset value and the outer offset calculation\n        uint256 firstParamOffset = _goToParamOffset(OPTION_ADDR_PARAM_LOC, _executionScript);\n        uint256 fifthParamOffset = _goToParamOffset(DESCRIPTION_PARAM_LOC, _executionScript);\n        currentOffset = firstParamOffset;\n        // compute end of script / next location and ensure there's no\n        // shenanigans\n        require(startOffset + calldataLength == _executionScript.length); // solium-disable-line error-reason\n        // The first word in the param slot is the length of the array\n        // obtain the beginning index of the infoString\n        uint256 optionLength = _executionScript.uint256At(currentOffset);\n        currentOffset = currentOffset + 0x20;\n        // This has the potential to be too gas expensive to ever happen.\n        // Upper limit of options should be checked against this function\n        _iterateExtraction(_actionId, _executionScript, currentOffset, optionLength);\n        uint256 descriptionStart = fifthParamOffset + 0x20;\n        uint256 descriptionEnd = descriptionStart + (_executionScript.uint256At(fifthParamOffset));\n        actionInstance.description = substring(_executionScript, descriptionStart, descriptionEnd);\n        // Skip the next param since it's also determined by this contract\n        // In order to do this we move the offset one word for the length of the param\n        // and we move the offset one word for each param.\n        //currentOffset = currentOffset.add(_executionScript.uint256At(currentOffset).mul(0x20));\n        currentOffset = fifthParamOffset;\n        // The offset represents the data we've already accounted for; the rest is what will later\n        // need to be copied over.\n        calldataLength = calldataLength.sub(currentOffset);\n    }\n\n    function addAddressesAndActions(\n        uint256 _actionId,\n        bytes script,\n        uint256 numberOfOptions,\n        uint256 dynamicOffset\n        ) internal view returns(uint256 offset)\n        {\n                // Set the initial offest after the static parameters\n        offset = 64 + dynamicOffset;\n\n        assembly { // solium-disable-line security/no-inline-assembly\n            mstore(add(script, offset), numberOfOptions)\n        }\n\n        offset += 32;\n\n        // Copy all option addresses\n        for (uint256 i = 0; i < numberOfOptions; i++) {\n            bytes32 canKey = actions[_actionId].optionKeys[i];\n            uint256 optionData = uint256(optionAddresses[canKey]);\n            assembly {\n                mstore(add(script, offset), optionData)\n            }\n            offset += 32;\n        }\n\n        assembly { // solium-disable-line security/no-inline-assembly\n            mstore(add(script, offset), numberOfOptions)\n        }\n\n        offset += 32;\n\n        // Copy all support data\n        for (i = 0; i < numberOfOptions; i++) {\n            uint256 supportsData = actions[_actionId].options[actions[_actionId].optionKeys[i]].actionSupport;\n\n            assembly { // solium-disable-line security/no-inline-assembly\n                mstore(add(script, offset), supportsData)\n            }\n            offset += 32;\n        }\n        return offset;\n    }\n\n    function addInfoString(\n        uint256 _actionId,\n        bytes script,\n        uint256 numberOfOptions,\n        uint256 _offset)\n        internal view returns (uint256 newOffset)\n    {\n        Action storage actionInstance = actions[_actionId];\n        uint256 infoStringLength = actionInstance.infoStringLength;\n        bytes memory infoString = new bytes(infoStringLength);\n        bytes memory optionMetaData;\n        uint256 metaDataLength;\n        uint256 strOffset = 0;\n        newOffset = _offset;\n        // Add number of options for array size of \"infoIndicies\"\n        assembly { // solium-disable-line security/no-inline-assembly\n            mstore(add(script, newOffset), numberOfOptions)\n        }\n        // Offset \"infoIndicies\" size\n        newOffset += 32;\n\n        for (uint256 i = 0; i < numberOfOptions; i++) {\n            bytes32 canKey = actionInstance.optionKeys[i];\n            optionMetaData = bytes(actionInstance.options[canKey].metadata);\n            infoString.copy(optionMetaData.getPtr() + 32, strOffset, optionMetaData.length);\n            strOffset += optionMetaData.length;\n            metaDataLength = optionMetaData.length;\n\n            assembly { // solium-disable-line security/no-inline-assembly\n                mstore(add(script, newOffset), metaDataLength)\n            }\n\n            newOffset += 32;\n        }\n\n        assembly { // solium-disable-line security/no-inline-assembly\n                mstore(add(script, newOffset), infoStringLength)\n        }\n\n\n        script.copy(infoString.getPtr() + 32, newOffset, infoStringLength);\n\n        newOffset += (infoStringLength / 32) * 32 + (infoStringLength % 32 == 0 ? 0 : 32);\n    }\n\n    function addExternalIds(\n        uint256 _actionId,\n        bytes script,\n        uint256 numberOfOptions,\n        uint256 _offset\n        ) internal view returns(uint256 offset)\n        {\n        offset = _offset;\n        assembly { // solium-disable-line security/no-inline-assembly\n            mstore(add(script, offset), numberOfOptions)\n        }\n\n        offset += 32;\n\n        // Copy all option addresses\n        for (uint256 i = 0; i < numberOfOptions; i++) {\n            //bytes32 canKey = actions[_actionId].optionKeys[i];\n            bytes32 externalId1 = actions[_actionId].options[actions[_actionId].optionKeys[i]].externalId1;\n            assembly {\n                mstore(add(script, offset), externalId1)\n            }\n            offset += 32;\n\n        }\n\n        assembly { // solium-disable-line security/no-inline-assembly\n            mstore(add(script, offset), numberOfOptions)\n        }\n\n        offset += 32;\n\n        // Copy all support data\n        for (i = 0; i < numberOfOptions; i++) {\n            bytes32 externalId2 = actions[_actionId].options[actions[_actionId].optionKeys[i]].externalId2;\n\n            assembly { // solium-disable-line security/no-inline-assembly\n                mstore(add(script, offset), externalId2)\n            }\n            offset += 32;\n\n        }\n        return offset;\n    }\n\n    function memcpyshort(uint _dest, uint _src, uint _len) internal pure {\n        uint256 src = _src;\n        uint256 dest = _dest;\n        uint256 len = _len;\n\n        // this line is unnecessary since the _len passed in is hard-coded\n        //require(_len < 32, \"_len should be less than 32\");\n        // Copy remaining bytes\n        uint mask = 256 ** (32 - len) - 1;\n        assembly { // solium-disable-line security/no-inline-assembly\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n\n    function encodeInput(uint256 _actionId) internal returns(bytes) {\n        Action storage action = actions[_actionId];\n        uint256 optionsLength = action.optionKeys.length;\n\n        // initialize the pointer for the originally parsed script\n        bytes memory origExecScript = new bytes(32);\n        // set the pointer to the original script\n        origExecScript = action.executionScript;\n        // dynmaicOffset: The bytevalue in the script where the\n        // dynamic-length parameters will be encoded\n        // This can probably be hard-coded now that we're nailing down this specification\n        uint256 dynamicOffset = origExecScript.uint256At(32);\n        // The total length of the new script will be two 32 byte spaces\n        // for each candidate (one for support one for address)\n        // as well as 3 32 byte spaces for\n        // the header (specId 0x4, target address 0x14, calldata 0x4, function hash 0x4)\n        // and the two dynamic param locations\n        // as well as additional space for the staticParameters\n        uint256 infoStrLength = action.infoStringLength;\n        uint256 desStrLength = bytes(action.description).length;\n        // Calculate the total length of the call script to be encoded\n        // 228: The words needed to specify lengths of the various dynamic params\n        //      There are  7 dynamic params in this spec so 7 * 32 + function hash = 228\n        // dynamicOffset: the byte number where the first parameter's data area begins\n        //      This number accounts for the size of the initial parameter locations\n        // optionsLength: The quantity of options in the action script multiplied by 160\n        //      aince each option will require 5 words for it's data (160 = 32 * 5)\n        uint256 callDataLength = 228 + dynamicOffset + optionsLength * 160;\n        // add the length of the info and description strings to the total length\n        // string lengths that aren't cleanly divisible by 32 require an extra word\n        callDataLength += (infoStrLength / 32) * 32 + (infoStrLength % 32 == 0 ? 0 : 32);\n        callDataLength += (desStrLength / 32) * 32 + (desStrLength % 32 == 0 ? 0 : 32);\n        // initialize a location in memory to copy in the call data length\n        bytes memory callDataLengthMem = new bytes(32);\n        // copy the call data length into the memory location\n        assembly { // solium-disable-line security/no-inline-assembly\n            mstore(add(callDataLengthMem, 32), callDataLength)\n        }\n        // initialize the script with 28 extra bytes to account for header info:\n        //  1. specId (4 bytes)\n        //  2. target address (20 bytes)\n        //  3. callDataLength itself (4 bytes)\n        bytes memory script = new bytes(callDataLength + 28);\n        // copy the header info plus the dynamicOffset entry into the first param\n        // since it doesn't change\n        script.copy(origExecScript.getPtr() + 32,0, 64);\n        // copy the calldatalength stored in memory into the new script\n        memcpyshort((script.getPtr() + 56), callDataLengthMem.getPtr() + 60, 4);\n        // calculate and copy in the locations for all dynami elements\n        addDynamicElements(script, dynamicOffset, optionsLength, infoStrLength, desStrLength);\n        // copy over remaining static parameters\n        script.copy(origExecScript.getPtr() + 288, 256, dynamicOffset - 256);\n        // add option addresses and option values\n        // keep track of current location in the script using offset\n        uint256 offset = addAddressesAndActions(_actionId, script, optionsLength, dynamicOffset);\n\n        offset = _goToParamOffset(INDICIES_PARAM_LOC, script) + 0x20;\n        // Copy in the composite info string for all options,\n        // along with the indices for each options substring\n        offset = addInfoString(_actionId, script, optionsLength, offset);\n        //Copy over Description\n        offset = _goToParamOffset(DESCRIPTION_PARAM_LOC, script) + 0x20;\n        assembly { // solium-disable-line security/no-inline-assembly\n                mstore(add(script, offset), desStrLength)\n        }\n        script.copy(bytes(action.description).getPtr() + 32, offset, desStrLength);\n        // Copy over External References\n        offset = _goToParamOffset(EX_ID1_PARAM_LOC, script) + 0x20;\n        addExternalIds(_actionId, script, optionsLength, offset);\n        emit OrigScript(origExecScript);\n        return script;\n    }\n\n    function parseScript(bytes _executionScript) internal returns(uint256 actionId) {\n        actionId = actionsLength++;\n        Action storage actionInstance = actions[actionId];\n        actionInstance.executionScript = _executionScript;\n        actionInstance.infoStringLength = 0;\n        actionInstance.scriptOffset = 0;\n        actionInstance.scriptRemainder = 0;\n        // Spec ID must be 1\n        require(_executionScript.uint32At(0x0) == 1); // solium-disable-line error-reason\n        if (_executionScript.length != 4) {\n            uint256 scriptOffset;\n            uint256 scriptRemainder;\n            (scriptOffset, scriptRemainder) = _extractOptions(_executionScript, actionId);\n            actionInstance.scriptOffset = scriptOffset;\n            actionInstance.scriptRemainder = scriptRemainder;\n        }\n        // First Static Parameter in script parsed for the externalId\n        actionInstance.externalId = _goToParamOffset(TOTAL_DYNAMIC_PARAMS + 1, _executionScript) - 0x20;\n        emit OrigScript(_executionScript);\n    }\n}"
    },
    "contracts/tps/shared/test-helpers/contracts/evmscript/ScriptHelpers.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.18;\n\n\nlibrary ScriptHelpers {\n    // To test with JS and compare with actual encoder. Maintaining for reference.\n    // t = function() { return IEVMScriptExecutor.at('0x4bcdd59d6c77774ee7317fc1095f69ec84421e49').contract.execScript.getData(...[].slice.call(arguments)).slice(10).match(/.{1,64}/g) }\n    // run = function() { return ScriptHelpers.new().then(sh => { sh.abiEncode.call(...[].slice.call(arguments)).then(a => console.log(a.slice(2).match(/.{1,64}/g)) ) }) }\n    // This is truly not beautiful but lets no daydream to the day solidity gets reflection features\n\n    function abiEncode(bytes _a, bytes _b, address[] _c) public pure returns (bytes d) {\n        return encode(_a, _b, _c);\n    }\n\n    function encode(bytes memory _a, bytes memory _b, address[] memory _c) internal pure returns (bytes memory d) {\n        // A is positioned after the 3 position words\n        uint256 aPosition = 0x60;\n        uint256 bPosition = aPosition + 32 * abiLength(_a);\n        uint256 cPosition = bPosition + 32 * abiLength(_b);\n        uint256 length = cPosition + 32 * abiLength(_c);\n\n        d = new bytes(length);\n        assembly {\n            // Store positions\n            mstore(add(d, 0x20), aPosition)\n            mstore(add(d, 0x40), bPosition)\n            mstore(add(d, 0x60), cPosition)\n        }\n\n        // Copy memory to correct position\n        copy(d, getPtr(_a), aPosition, _a.length);\n        copy(d, getPtr(_b), bPosition, _b.length);\n        copy(d, getPtr(_c), cPosition, _c.length * 32); // 1 word per address\n    }\n\n    function abiLength(bytes memory _a) internal pure returns (uint256) {\n        // 1 for length +\n        // memory words + 1 if not divisible for 32 to offset word\n        return 1 + (_a.length / 32) + (_a.length % 32 > 0 ? 1 : 0);\n    }\n\n    function abiLength(address[] _a) internal pure returns (uint256) {\n        // 1 for length + 1 per item\n        return 1 + _a.length;\n    }\n\n    function copy(bytes _d, uint256 _src, uint256 _pos, uint256 _length) internal pure {\n        uint dest;\n        assembly {\n            dest := add(add(_d, 0x20), _pos)\n        }\n        memcpy(dest, _src, _length + 32);\n    }\n\n    function getPtr(bytes memory _x) internal pure returns (uint256 ptr) {\n        assembly {\n            ptr := _x\n        }\n    }\n\n    function getPtr(address[] memory _x) internal pure returns (uint256 ptr) {\n        assembly {\n            ptr := _x\n        }\n    }\n\n    function getSpecId(bytes _script) internal pure returns (uint32) {\n        return uint32At(_script, 0);\n    }\n\n    function uint256At(bytes _data, uint256 _location) internal pure returns (uint256 result) {\n        assembly {\n            result := mload(add(_data, add(0x20, _location)))\n        }\n    }\n\n    function bytes32At(bytes _data, uint256 _location) internal pure returns (bytes32 result) {\n        assembly {\n            result := mload(add(_data, add(0x20, _location)))\n        }\n    }\n\n    function addressAt(bytes _data, uint256 _location) internal pure returns (address result) {\n        uint256 word = uint256At(_data, _location);\n\n        assembly {\n            result := div(and(word, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000),\n            0x1000000000000000000000000)\n        }\n    }\n\n    function uint32At(bytes _data, uint256 _location) internal pure returns (uint32 result) {\n        uint256 word = uint256At(_data, _location);\n\n        assembly {\n            result := div(and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000),\n            0x100000000000000000000000000000000000000000000000000000000)\n        }\n    }\n\n    function locationOf(bytes _data, uint256 _location) internal pure returns (uint256 result) {\n        assembly {\n            result := add(_data, add(0x20, _location))\n        }\n    }\n\n    function toBytes(bytes4 _sig) internal pure returns (bytes) {\n        bytes memory payload = new bytes(4);\n        assembly { mstore(add(payload, 0x20), _sig) }\n        return payload;\n    }\n\n    function memcpy(uint _dest, uint _src, uint _len) internal pure {\n        uint256 src = _src;\n        uint256 dest = _dest;\n        uint256 len = _len;\n\n        // Copy word-length chunks while possible\n        for (; len >= 32; len -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        // Copy remaining bytes\n        uint mask = 256 ** (32 - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n}"
    },
    "contracts/tps/shared/test-helpers/contracts/common/IForwarder.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ninterface IForwarder {\n    function isForwarder() external pure returns (bool);\n\n    // TODO: this should be external\n    // See https://github.com/ethereum/solidity/issues/4832\n    function canForward(address sender, bytes evmCallScript) public view returns (bool);\n\n    // TODO: this should be external\n    // See https://github.com/ethereum/solidity/issues/4832\n    function forward(bytes evmCallScript) public;\n}\n"
    },
    "contracts/misc/import.sol": {
      "content": "pragma solidity ^0.4.24;\n\nimport \"@aragon/os/contracts/factory/ENSFactory.sol\";\nimport \"@aragon/os/contracts/apm/APMRegistry.sol\";\nimport \"@aragon/id/contracts/FIFSResolvingRegistrar.sol\";"
    },
    "@aragon/os/contracts/factory/ENSFactory.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"../lib/ens/ENS.sol\";\nimport \"../lib/ens/PublicResolver.sol\";\nimport \"../ens/ENSConstants.sol\";\n\n\n// WARNING: This is an incredibly trustful ENS deployment, do NOT use in production!\n// This contract is NOT meant to be deployed to a live network.\n// Its only purpose is to easily create ENS instances for testing aragonPM.\ncontract ENSFactory is ENSConstants {\n    event DeployENS(address ens);\n\n    /**\n    * @notice Create a new ENS and set `_owner` as the owner of the top level domain.\n    * @param _owner Owner of .eth\n    * @return ENS\n    */\n    function newENS(address _owner) public returns (ENS) {\n        ENS ens = new ENS();\n\n        // Setup .eth TLD\n        ens.setSubnodeOwner(ENS_ROOT, ETH_TLD_LABEL, this);\n\n        // Setup public resolver\n        PublicResolver resolver = new PublicResolver(ens);\n        ens.setSubnodeOwner(ETH_TLD_NODE, PUBLIC_RESOLVER_LABEL, this);\n        ens.setResolver(PUBLIC_RESOLVER_NODE, resolver);\n        resolver.setAddr(PUBLIC_RESOLVER_NODE, resolver);\n\n        ens.setOwner(ETH_TLD_NODE, _owner);\n        ens.setOwner(ENS_ROOT, _owner);\n\n        emit DeployENS(ens);\n\n        return ens;\n    }\n}\n"
    },
    "@aragon/os/contracts/ens/ENSConstants.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ncontract ENSConstants {\n    /* Hardcoded constants to save gas\n    bytes32 internal constant ENS_ROOT = bytes32(0);\n    bytes32 internal constant ETH_TLD_LABEL = keccak256(\"eth\");\n    bytes32 internal constant ETH_TLD_NODE = keccak256(abi.encodePacked(ENS_ROOT, ETH_TLD_LABEL));\n    bytes32 internal constant PUBLIC_RESOLVER_LABEL = keccak256(\"resolver\");\n    bytes32 internal constant PUBLIC_RESOLVER_NODE = keccak256(abi.encodePacked(ETH_TLD_NODE, PUBLIC_RESOLVER_LABEL));\n    */\n    bytes32 internal constant ENS_ROOT = bytes32(0);\n    bytes32 internal constant ETH_TLD_LABEL = 0x4f5b812789fc606be1b3b16908db13fc7a9adf7ca72641f84d75b47069d3d7f0;\n    bytes32 internal constant ETH_TLD_NODE = 0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae;\n    bytes32 internal constant PUBLIC_RESOLVER_LABEL = 0x329539a1d23af1810c48a07fe7fc66a3b34fbc8b37e9b3cdb97bb88ceab7e4bf;\n    bytes32 internal constant PUBLIC_RESOLVER_NODE = 0xfdd5d5de6dd63db72bbc2d487944ba13bf775b50a80805fe6fcaba9b0fba88f5;\n}\n"
    },
    "@aragon/os/contracts/apm/APMRegistry.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"../lib/ens/AbstractENS.sol\";\nimport \"../ens/ENSSubdomainRegistrar.sol\";\nimport \"../factory/AppProxyFactory.sol\";\nimport \"../apps/AragonApp.sol\";\nimport \"../acl/ACL.sol\";\nimport \"./Repo.sol\";\n\n\ncontract APMInternalAppNames {\n    string internal constant APM_APP_NAME = \"apm-registry\";\n    string internal constant REPO_APP_NAME = \"apm-repo\";\n    string internal constant ENS_SUB_APP_NAME = \"apm-enssub\";\n}\n\n\ncontract APMRegistry is AragonApp, AppProxyFactory, APMInternalAppNames {\n    /* Hardcoded constants to save gas\n    bytes32 public constant CREATE_REPO_ROLE = keccak256(\"CREATE_REPO_ROLE\");\n    */\n    bytes32 public constant CREATE_REPO_ROLE = 0x2a9494d64846c9fdbf0158785aa330d8bc9caf45af27fa0e8898eb4d55adcea6;\n\n    string private constant ERROR_INIT_PERMISSIONS = \"APMREG_INIT_PERMISSIONS\";\n    string private constant ERROR_EMPTY_NAME = \"APMREG_EMPTY_NAME\";\n\n    AbstractENS public ens;\n    ENSSubdomainRegistrar public registrar;\n\n    event NewRepo(bytes32 id, string name, address repo);\n\n    /**\n    * NEEDS CREATE_NAME_ROLE and POINT_ROOTNODE_ROLE permissions on registrar\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized\n    * @notice Initialize this APMRegistry instance and set `_registrar` as the ENS subdomain registrar\n    * @param _registrar ENSSubdomainRegistrar instance that holds registry root node ownership\n    */\n    function initialize(ENSSubdomainRegistrar _registrar) public onlyInit {\n        initialized();\n\n        registrar = _registrar;\n        ens = registrar.ens();\n\n        registrar.pointRootNode(this);\n\n        // Check APM has all permissions it needss\n        ACL acl = ACL(kernel().acl());\n        require(acl.hasPermission(this, registrar, registrar.CREATE_NAME_ROLE()), ERROR_INIT_PERMISSIONS);\n        require(acl.hasPermission(this, acl, acl.CREATE_PERMISSIONS_ROLE()), ERROR_INIT_PERMISSIONS);\n    }\n\n    /**\n    * @notice Create new repo in registry with `_name`\n    * @param _name Repo name, must be ununsed\n    * @param _dev Address that will be given permission to create versions\n    */\n    function newRepo(string _name, address _dev) public auth(CREATE_REPO_ROLE) returns (Repo) {\n        return _newRepo(_name, _dev);\n    }\n\n    /**\n    * @notice Create new repo in registry with `_name` and publish a first version with contract `_contractAddress` and content `@fromHex(_contentURI)`\n    * @param _name Repo name\n    * @param _dev Address that will be given permission to create versions\n    * @param _initialSemanticVersion Semantic version for new repo version\n    * @param _contractAddress address for smart contract logic for version (if set to 0, it uses last versions' contractAddress)\n    * @param _contentURI External URI for fetching new version's content\n    */\n    function newRepoWithVersion(\n        string _name,\n        address _dev,\n        uint16[3] _initialSemanticVersion,\n        address _contractAddress,\n        bytes _contentURI\n    ) public auth(CREATE_REPO_ROLE) returns (Repo)\n    {\n        Repo repo = _newRepo(_name, this); // need to have permissions to create version\n        repo.newVersion(_initialSemanticVersion, _contractAddress, _contentURI);\n\n        // Give permissions to _dev\n        ACL acl = ACL(kernel().acl());\n        acl.revokePermission(this, repo, repo.CREATE_VERSION_ROLE());\n        acl.grantPermission(_dev, repo, repo.CREATE_VERSION_ROLE());\n        acl.setPermissionManager(_dev, repo, repo.CREATE_VERSION_ROLE());\n        return repo;\n    }\n\n    function _newRepo(string _name, address _dev) internal returns (Repo) {\n        require(bytes(_name).length > 0, ERROR_EMPTY_NAME);\n\n        Repo repo = newClonedRepo();\n\n        ACL(kernel().acl()).createPermission(_dev, repo, repo.CREATE_VERSION_ROLE(), _dev);\n\n        // Creates [name] subdomain in the rootNode and sets registry as resolver\n        // This will fail if repo name already exists\n        bytes32 node = registrar.createNameAndPoint(keccak256(abi.encodePacked(_name)), repo);\n\n        emit NewRepo(node, _name, repo);\n\n        return repo;\n    }\n\n    function newClonedRepo() internal returns (Repo repo) {\n        repo = Repo(newAppProxy(kernel(), repoAppId()));\n        repo.initialize();\n    }\n\n    function repoAppId() internal view returns (bytes32) {\n        return keccak256(abi.encodePacked(registrar.rootNode(), keccak256(abi.encodePacked(REPO_APP_NAME))));\n    }\n}\n"
    },
    "@aragon/os/contracts/ens/ENSSubdomainRegistrar.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"../lib/ens/AbstractENS.sol\";\nimport \"../lib/ens/PublicResolver.sol\";\nimport \"./ENSConstants.sol\";\n\nimport \"../apps/AragonApp.sol\";\n\n\n/* solium-disable function-order */\n// Allow public initialize() to be first\ncontract ENSSubdomainRegistrar is AragonApp, ENSConstants {\n    /* Hardcoded constants to save gas\n    bytes32 public constant CREATE_NAME_ROLE = keccak256(\"CREATE_NAME_ROLE\");\n    bytes32 public constant DELETE_NAME_ROLE = keccak256(\"DELETE_NAME_ROLE\");\n    bytes32 public constant POINT_ROOTNODE_ROLE = keccak256(\"POINT_ROOTNODE_ROLE\");\n    */\n    bytes32 public constant CREATE_NAME_ROLE = 0xf86bc2abe0919ab91ef714b2bec7c148d94f61fdb069b91a6cfe9ecdee1799ba;\n    bytes32 public constant DELETE_NAME_ROLE = 0x03d74c8724218ad4a99859bcb2d846d39999449fd18013dd8d69096627e68622;\n    bytes32 public constant POINT_ROOTNODE_ROLE = 0x9ecd0e7bddb2e241c41b595a436c4ea4fd33c9fa0caa8056acf084fc3aa3bfbe;\n\n    string private constant ERROR_NO_NODE_OWNERSHIP = \"ENSSUB_NO_NODE_OWNERSHIP\";\n    string private constant ERROR_NAME_EXISTS = \"ENSSUB_NAME_EXISTS\";\n    string private constant ERROR_NAME_DOESNT_EXIST = \"ENSSUB_DOESNT_EXIST\";\n\n    AbstractENS public ens;\n    bytes32 public rootNode;\n\n    event NewName(bytes32 indexed node, bytes32 indexed label);\n    event DeleteName(bytes32 indexed node, bytes32 indexed label);\n\n    /**\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized. This contract must be the owner of the `_rootNode` node so that it can create subdomains.\n    * @notice Initialize this ENSSubdomainRegistrar instance with `_ens` as the root ENS registry and `_rootNode` as the node to allocate subdomains under\n    * @param _ens Address of ENS registry\n    * @param _rootNode Node to allocate subdomains under\n    */\n    function initialize(AbstractENS _ens, bytes32 _rootNode) public onlyInit {\n        initialized();\n\n        // We need ownership to create subnodes\n        require(_ens.owner(_rootNode) == address(this), ERROR_NO_NODE_OWNERSHIP);\n\n        ens = _ens;\n        rootNode = _rootNode;\n    }\n\n    /**\n    * @notice Create a new ENS subdomain record for `_label` and assign ownership to `_owner`\n    * @param _label Label of new subdomain\n    * @param _owner Owner of new subdomain\n    * @return node Hash of created node\n    */\n    function createName(bytes32 _label, address _owner) external auth(CREATE_NAME_ROLE) returns (bytes32 node) {\n        return _createName(_label, _owner);\n    }\n\n    /**\n    * @notice Create a new ENS subdomain record for `_label` that resolves to `_target` and is owned by this ENSSubdomainRegistrar\n    * @param _label Label of new subdomain\n    * @param _target Ethereum address this new subdomain label will point to\n    * @return node Hash of created node\n    */\n    function createNameAndPoint(bytes32 _label, address _target) external auth(CREATE_NAME_ROLE) returns (bytes32 node) {\n        node = _createName(_label, this);\n        _pointToResolverAndResolve(node, _target);\n    }\n\n    /**\n    * @notice Deregister ENS subdomain record for `_label`\n    * @param _label Label of subdomain to deregister\n    */\n    function deleteName(bytes32 _label) external auth(DELETE_NAME_ROLE) {\n        bytes32 node = getNodeForLabel(_label);\n\n        address currentOwner = ens.owner(node);\n\n        require(currentOwner != address(0), ERROR_NAME_DOESNT_EXIST); // fail if deleting unset name\n\n        if (currentOwner != address(this)) { // needs to reclaim ownership so it can set resolver\n            ens.setSubnodeOwner(rootNode, _label, this);\n        }\n\n        ens.setResolver(node, address(0)); // remove resolver so it ends resolving\n        ens.setOwner(node, address(0));\n\n        emit DeleteName(node, _label);\n    }\n\n    /**\n    * @notice Resolve this ENSSubdomainRegistrar's root node to `_target`\n    * @param _target Ethereum address root node will point to\n    */\n    function pointRootNode(address _target) external auth(POINT_ROOTNODE_ROLE) {\n        _pointToResolverAndResolve(rootNode, _target);\n    }\n\n    function _createName(bytes32 _label, address _owner) internal returns (bytes32 node) {\n        node = getNodeForLabel(_label);\n        require(ens.owner(node) == address(0), ERROR_NAME_EXISTS); // avoid name reset\n\n        ens.setSubnodeOwner(rootNode, _label, _owner);\n\n        emit NewName(node, _label);\n\n        return node;\n    }\n\n    function _pointToResolverAndResolve(bytes32 _node, address _target) internal {\n        address publicResolver = getAddr(PUBLIC_RESOLVER_NODE);\n        ens.setResolver(_node, publicResolver);\n\n        PublicResolver(publicResolver).setAddr(_node, _target);\n    }\n\n    function getAddr(bytes32 node) internal view returns (address) {\n        address resolver = ens.resolver(node);\n        return PublicResolver(resolver).addr(node);\n    }\n\n    function getNodeForLabel(bytes32 _label) internal view returns (bytes32) {\n        return keccak256(abi.encodePacked(rootNode, _label));\n    }\n}\n"
    },
    "@aragon/id/contracts/FIFSResolvingRegistrar.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"@aragon/os/contracts/lib/ens/AbstractENS.sol\";\nimport \"./ens/IPublicResolver.sol\";\nimport \"./IFIFSResolvingRegistrar.sol\";\n\n\n/**\n * A registrar that allocates subdomains and sets resolvers to the first person to claim them.\n *\n * Adapted from ENS' FIFSRegistrar:\n *   https://github.com/ethereum/ens/blob/master/contracts/FIFSRegistrar.sol\n */\ncontract FIFSResolvingRegistrar is IFIFSResolvingRegistrar {\n    bytes32 public rootNode;\n    AbstractENS internal ens;\n    IPublicResolver internal defaultResolver;\n\n    bytes4 private constant ADDR_INTERFACE_ID = 0x3b3b57de;\n\n    event ClaimSubdomain(bytes32 indexed subnode, address indexed owner, address indexed resolver);\n\n    /**\n     * Constructor.\n     * @param _ensAddr The address of the ENS registry.\n     * @param _defaultResolver The address of the default resolver to use for subdomains.\n     * @param _node The node that this registrar administers.\n     */\n    constructor(AbstractENS _ensAddr, IPublicResolver _defaultResolver, bytes32 _node)\n        public\n    {\n        ens = _ensAddr;\n        defaultResolver = _defaultResolver;\n        rootNode = _node;\n    }\n\n    /**\n     * Register a subdomain with the default resolver if it hasn't been claimed yet.\n     * @param _subnode The hash of the label to register.\n     * @param _owner The address of the new owner.\n     */\n    function register(bytes32 _subnode, address _owner) external {\n        registerWithResolver(_subnode, _owner, defaultResolver);\n    }\n\n    /**\n     * Register a subdomain if it hasn't been claimed yet.\n     * @param _subnode The hash of the label to register.\n     * @param _owner The address of the new owner.\n     * @param _resolver The address of the resolver.\n     *                  If the resolver supports the address interface, the subdomain's address will\n     *                  be set to the new owner.\n     */\n    function registerWithResolver(bytes32 _subnode, address _owner, IPublicResolver _resolver) public {\n        bytes32 node = keccak256(rootNode, _subnode);\n        address currentOwner = ens.owner(node);\n        require(currentOwner == address(0));\n\n        ens.setSubnodeOwner(rootNode, _subnode, address(this));\n        ens.setResolver(node, _resolver);\n        if (_resolver.supportsInterface(ADDR_INTERFACE_ID)) {\n            _resolver.setAddr(node, _owner);\n        }\n\n        // Give ownership to the claimer\n        ens.setOwner(node, _owner);\n\n        emit ClaimSubdomain(_subnode, _owner, address(_resolver));\n    }\n}\n"
    },
    "contracts/tps/Projects.sol": {
      "content": "pragma solidity ^0.4.24;\n\nimport \"@aragon/os/contracts/apps/AragonApp.sol\";\nimport \"@aragon/os/contracts/lib/math/SafeMath.sol\";\nimport \"@aragon/apps-vault/contracts/Vault.sol\";\nimport \"@aragon/os/contracts/common/IsContract.sol\";\n\n\n/*******************************************************************************\n    Copyright 2018, That Planning Suite\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*******************************************************************************/\n/*******************************************************************************\n* @title Projects Contract\n* @author Kevin Siegler\n* @dev This contract defines a registry for Github issues in addition to\n* applying bounties in bulk and accepting fulfillment via this contract\n*******************************************************************************/\ninterface Bounties {\n\n    function issueBounty(\n        address _issuer,\n        uint _deadline,\n        string _data,\n        uint256 _fulfillmentAmount,\n        address _arbiter,\n        bool _paysTokens,\n        address _tokenContract\n    ) external returns (uint);\n\n    function activateBounty(\n        uint _bountyId,\n        uint _value\n    ) external payable;\n\n    function fulfillBounty(\n        uint _bountyId,\n        string _data\n    ) public;\n\n    function acceptFulfillment(\n        uint _bountyId,\n        uint _fulfillmentId\n    ) external;\n\n\n  function getBounty(uint _bountyId)\n      external\n      view\n      returns (address, uint, uint, bool, uint, uint);\n\n    function getBountyToken(uint _bountyId)\n      external\n      view\n      returns (address);\n\n    function getBountyData(uint _bountyId)\n      external\n      view\n      returns (string);\n}\n\ninterface TokenApproval {\n    function approve(address _spender, uint256 _value) external returns (bool success);\n}\n\n\ncontract Projects is IsContract, AragonApp {\n    using SafeMath for uint256;\n    Bounties public bounties;\n    BountySettings public settings;\n    Vault public vault;\n    //holds all work submissions\n    WorkSubmission[] workSubmissions;\n    // Auth roles\n    bytes32 public constant FUND_ISSUES_ROLE =  keccak256(\"FUND_ISSUES_ROLE\");\n    bytes32 public constant ADD_REPO_ROLE = keccak256(\"ADD_REPO_ROLE\");\n    bytes32 public constant CHANGE_SETTINGS_ROLE =  keccak256(\"CHANGE_SETTINGS_ROLE\");\n    bytes32 public constant CURATE_ISSUES_ROLE = keccak256(\"CURATE_ISSUES_ROLE\");\n    bytes32 public constant REMOVE_REPO_ROLE =  keccak256(\"REMOVE_REPO_ROLE\");\n    bytes32 public constant REVIEW_APPLICATION_ROLE = keccak256(\"REVIEW_APPLICATION_ROLE\");\n    bytes32 public constant WORK_REVIEW_ROLE = keccak256(\"WORK_REVIEW_ROLE\");\n    string private constant ERROR_VAULT_NOT_CONTRACT = \"PROJECTS_VAULT_NOT_CONTRACT\";\n    string private constant ERROR_STANDARD_BOUNTIES_NOT_CONTRACT = \"STANDARD_BOUNTIES_NOT_CONTRACT\";\n\n    // The entries in the repos registry.\n    mapping(bytes32 => GithubRepo) private repos;\n    // Gives us a repos array so we can actually iterate\n    bytes32[] private repoIndex;\n    enum SubmissionStatus { Unreviewed, Accepted, Rejected }  // 0: unreviewed 1: Accepted 2: Rejected\n\n    // Structs\n    struct BountySettings {\n        uint256[] expMultipliers;\n        bytes32[] expLevels;\n        uint256 baseRate;\n        uint256 bountyDeadline;\n        address bountyCurrency;\n        address bountyAllocator;\n        //address bountyArbiter;\n    }\n\n    struct GithubRepo {\n        mapping(uint256 => GithubIssue) issues;\n        uint index;\n    }\n\n\n    struct WorkSubmission {\n        SubmissionStatus status;\n        string submissionHash; //IPFS hash of the Pull Request\n        uint256 fulfillmentId; // Standard Bounties Fulfillment ID\n        address submitter;\n    }\n\n    struct AssignmentRequest {\n        SubmissionStatus status;\n        string requestHash; //IPFS hash of the application data\n        bool exists;\n    }\n\n    struct GithubIssue {\n        bytes32 repo;  // This is the internal repo identifier\n        uint256 number; // May be redundant tracking this\n        bool hasBounty;\n        bool fulfilled;\n        uint256 bountySize;\n        uint256 priority;\n        address bountyWallet; // Not sure if we'll have a way to \"retrieve\" this value from status open bounties\n        uint standardBountyId;\n        address assignee;\n        address[] applicants;\n        //uint256 submissionQty;\n        uint256[] submissionIndices;\n        mapping(address => AssignmentRequest) assignmentRequests;\n        //mapping(address => WorkSubmission) workSubmissions;\n    }\n\n    // Fired when a repository is added to the registry.\n    event RepoAdded(bytes32 indexed repoId, uint index);\n    // Fired when a repository is removed from the registry.\n    event RepoRemoved(bytes32 indexed repoId, uint index);\n    // Fired when a repo is updated in the registry\n    event RepoUpdated(bytes32 indexed repoId, uint newIndex);\n    // Fired when a bounty is added to a repo\n    event BountyAdded(bytes32 repoId, uint256 issueNumber, uint256 bountySize);\n    // Fired when an issue is curated\n    event IssueCurated(bytes32 repoId);\n    // Fired when settings are changed\n    event BountySettingsChanged();\n    // Fired when user requests issue assignment\n    event AssignmentRequested(bytes32 indexed repoId, uint256 issueNumber);\n    // Fired when Task Manager approves assignment request\n    event AssignmentApproved(address applicant, bytes32 indexed repoId, uint256 issueNumber);\n    // Fired when a user submits work towards an issue\n    event WorkSubmitted(bytes32 repoId, uint256 issueNumber);\n    // Fired when a reviewer accepts accepts a submission\n    event SubmissionAccepted(uint256 submissionNumber, bytes32 repoId, uint256 issueNumber);\n    // Fired when a reviewer rejects a submission\n    event SubmissionRejected(uint256 submissionNumber, bytes32 repoId, uint256 issueNumber);\n\n////////////////\n// Constructor\n////////////////\n    function initialize(address _bountiesAddr, Vault _vault, address _defaultToken)\n    external onlyInit // solium-disable-line visibility-first\n    {\n        initialized();\n\n        require(isContract(_vault), ERROR_VAULT_NOT_CONTRACT);\n\n        vault = _vault;\n\n        bounties = Bounties(_bountiesAddr); // Standard Bounties instance\n\n        _addExperienceLevel(100, bytes32(\"Beginner\"));\n        _addExperienceLevel(300, bytes32(\"Intermediate\"));\n        _addExperienceLevel(500, bytes32(\"Advanced\"));\n\n        _changeBountySettings(\n            100, // baseRate\n            336, // bountyDeadline\n            _defaultToken, // bountyCurrency\n            _bountiesAddr // bountyAllocator\n            //0x0000000000000000000000000000000000000000 //bountyArbiter\n        );\n    }\n\n///////////////////////\n// Set state functions\n///////////////////////\n\n\n    /**\n     * @notice Update settings for the Projects app\n     */\n    function changeBountySettings(\n        uint256[] _expMultipliers,\n        bytes32[] _expLevels,\n        uint256 _baseRate,\n        uint256 _bountyDeadline,\n        address _bountyCurrency,\n        address _bountyAllocator\n    ) external auth(CHANGE_SETTINGS_ROLE)\n    {\n        require(_expMultipliers.length == _expLevels.length, \"experience level arrays lengths must match\");\n        settings.expLevels.length = 0;\n        settings.expMultipliers.length = 0;\n        for (uint i = 0; i < _expLevels.length; i++) {\n            _addExperienceLevel(_expMultipliers[i], _expLevels[i]);\n        }\n        _changeBountySettings(_baseRate, _bountyDeadline, _bountyCurrency, _bountyAllocator);\n    }\n\n///////////////////////\n// View state functions\n///////////////////////\n\n    /**\n     * @notice Get issue data from the registry.\n     * @param _repoId The id of the Github repo in the projects registry\n     */\n    function getIssue(bytes32 _repoId, uint256 _issueNumber) external view\n    returns(bool hasBounty, uint standardBountyId, bool fulfilled, uint balance, address token, string dataHash, address assignee)\n    {\n        GithubIssue storage issue = repos[_repoId].issues[_issueNumber];\n        hasBounty = issue.hasBounty;\n        fulfilled = issue.fulfilled;\n        standardBountyId = issue.standardBountyId;\n        balance = issue.bountySize;\n        dataHash = bounties.getBountyData(standardBountyId);\n        token = bounties.getBountyToken(standardBountyId);\n        assignee = issue.assignee;\n    }\n\n    /**\n     * @notice Get registry size.\n     */\n    function getReposCount() external view returns (uint count) {\n        return repoIndex.length;\n    }\n\n    /**\n     * @notice Get an entry from the registry.\n     * @param _repoId The id of the Github repo in the projects registry\n     * @return index the Github repo registry index\n     */\n    function getRepo(bytes32 _repoId) external view returns (uint index) {\n        require(isRepoAdded(_repoId), \"REPO_NOT_ADDED\");\n        return(repos[_repoId].index);\n    }\n\n    /**\n     * @notice Get general settings.\n     * @return BountySettings\n     */\n\n    function getSettings() external view returns (\n        uint256[] expMultipliers,\n        bytes32[] expLevels,\n        uint256 baseRate,\n        uint256 bountyDeadline,\n        address bountyCurrency,\n        address bountyAllocator\n        //address bountyArbiter\n    )\n    {\n        return (\n            settings.expMultipliers,\n            settings.expLevels,\n            settings.baseRate,\n            settings.bountyDeadline,\n            settings.bountyCurrency,\n            settings.bountyAllocator\n            //settings.bountyArbiter\n        );\n    }\n\n///////////////////////\n// Repository functions\n///////////////////////\n    /**\n     * @notice Add repository to the Projects app\n     * @param _repoId Github id of the repo to add\n     * @return index for the added repo at the registry\n     */\n    function addRepo(\n        bytes32 _repoId\n    ) external auth(ADD_REPO_ROLE) returns (uint index)\n    {\n        require(!isRepoAdded(_repoId), \"REPO_ALREADY_ADDED\");\n        repos[_repoId].index = repoIndex.push(_repoId) - 1;\n        emit RepoAdded(_repoId, repos[_repoId].index);\n        return repoIndex.length - 1;\n    }\n\n    /**\n     * @notice Remove repository from the Projects app\n     * @param _repoId The id of the Github repo in the projects registry\n     */\n    function removeRepo(\n        bytes32 _repoId\n    ) external auth(REMOVE_REPO_ROLE) returns (bool success)\n    {\n        require(isRepoAdded(_repoId), \"REPO_NOT_ADDED\");\n        uint rowToDelete = repos[_repoId].index;\n\n        if (repoIndex.length != 1) {\n            bytes32 repoToMove = repoIndex[repoIndex.length - 1];\n            repoIndex[rowToDelete] = repoToMove;\n            repos[repoToMove].index = rowToDelete;\n        }\n\n        repoIndex.length--;\n        emit RepoRemoved(_repoId, rowToDelete);\n        return true;\n    }\n\n///////////////////\n// Bounty functions\n///////////////////\n\n    /**\n     * @notice Request assignment for issue `_issueNumber`\n     * @param _repoId the github repo id of the issue\n     * @param _issueNumber the github issue up for assignment\n     * @param _application IPFS hash for the applicant's proposed timeline and strategy\n     */\n    function requestAssignment(\n        bytes32 _repoId,\n        uint256 _issueNumber,\n        string _application\n    ) external isInitialized\n    {\n        GithubIssue storage issue = repos[_repoId].issues[_issueNumber];\n        require(issue.assignmentRequests[msg.sender].exists == false, \"User already applied for this issue\");\n        issue.applicants.push(msg.sender);\n        issue.assignmentRequests[msg.sender] = AssignmentRequest(\n            SubmissionStatus.Unreviewed,\n            _application,\n            true\n        );\n        emit AssignmentRequested(_repoId, _issueNumber);\n    }\n\n    /**\n     * @notice Approve assignment for issue `_issueNumber`\n     * @param _repoId the github repo id of the issue\n     * @param _issueNumber the github issue up for assignment\n     * @param _requestor address of user that will be assigned the issue\n     * @param _updatedApplication IPFS hash of the application containing optional feedback\n     */\n    function reviewApplication(\n        bytes32 _repoId,\n        uint256 _issueNumber,\n        address _requestor,\n        string _updatedApplication,\n        bool _approved\n    ) external auth(REVIEW_APPLICATION_ROLE)\n    {\n        GithubIssue storage issue = repos[_repoId].issues[_issueNumber];\n        require(issue.assignmentRequests[_requestor].exists == true, \"User has not applied for this issue\");\n        issue.assignee = _requestor;\n        issue.assignmentRequests[_requestor].requestHash = _updatedApplication;\n\n        if (_approved) {\n            issue.assignmentRequests[_requestor].status = SubmissionStatus.Accepted;\n        } else {\n            issue.assignmentRequests[_requestor].status = SubmissionStatus.Rejected;\n        }\n        emit AssignmentApproved(_requestor, _repoId, _issueNumber);\n    }\n\n    /**\n     * @notice Submit work for issue `_issueNumber`\n     * @dev add a submission to local state after it's been added to StandardBounties.sol\n     * @param _repoId the github repo id of the issue\n     * @param _issueNumber the github issue up for assignment\n     * @param _submissionAddress IPFS hash of the Pull Request\n     * //param _fulfillmentId retrieved from event after the work is submitted to the bounties contract externally\n     */\n    function submitWork(\n        bytes32 _repoId,\n        uint256 _issueNumber,\n        string _submissionAddress\n        //uint256 _fulfillmentId\n    ) external isInitialized\n    {\n        GithubIssue storage issue = repos[_repoId].issues[_issueNumber];\n        require(!issue.fulfilled,\"BOUNTY_FULFILLED\");\n        require(msg.sender == issue.assignee, \"USER_NOT_ASSIGNED\");\n        bounties.fulfillBounty(issue.standardBountyId, _submissionAddress);\n        issue.submissionIndices.push(\n            workSubmissions.push(\n                WorkSubmission(\n                    SubmissionStatus.Unreviewed,\n                    _submissionAddress,\n                    issue.submissionIndices.length,\n                    issue.assignee\n                )\n            ) - 1 // push returns array length so we need to subtract 1 to get the index value\n        );\n\n        emit WorkSubmitted(_repoId, _issueNumber);\n    }\n\n    /**\n     * @notice Review work for issue `_issueNumber`\n     * @dev add a submission to local state after it's been added to StandardBounties.sol\n     * @param _repoId the github repo id of the issue\n     * @param _issueNumber the github issue up for resolution\n     * @param _submissionNumber submission index of the submitted work for review\n     * @param _approved decision to accept the contribution\n     * @param _updatedSubmissionHash IPFS hash of the submission containing optional feedback\n     */\n    function reviewSubmission(\n        bytes32 _repoId,\n        uint256 _issueNumber,\n        uint256 _submissionNumber,\n        bool _approved,\n        string _updatedSubmissionHash\n    ) external auth(WORK_REVIEW_ROLE)\n    {\n        GithubIssue storage issue = repos[_repoId].issues[_issueNumber];\n\n        require(!issue.fulfilled,\"BOUNTY_FULFILLED\");\n\n        WorkSubmission storage submission = workSubmissions[issue.submissionIndices[_submissionNumber]];\n        submission.submissionHash = _updatedSubmissionHash;\n\n        if (_approved) {\n            bounties.acceptFulfillment(issue.standardBountyId, submission.fulfillmentId);\n            issue.fulfilled = true;\n            submission.status = SubmissionStatus.Accepted;\n            emit SubmissionAccepted(_submissionNumber, _repoId, _issueNumber);\n        } else {\n            submission.status = SubmissionStatus.Rejected;\n            emit SubmissionRejected(_submissionNumber, _repoId, _issueNumber);\n        }\n    }\n\n    /**\n     * @notice Fund issues: `_description`\n     * @param _repoIds The ids of the Github repos in the projects registry\n     * @param _issueNumbers an array of bounty indexes\n     * @param _bountySizes an array of bounty sizes\n     * @param _deadlines an array of bounty deadlines\n     * @param _tokenBounties an array of token bounties\n     * @param _tokenContracts an array of token contracts\n     * @param _ipfsAddresses a string of ipfs addresses\n     * @param _description a string describing the bounties\n     */\n    function addBounties(\n        bytes32[] _repoIds,\n        uint256[] _issueNumbers,\n        uint256[] _bountySizes,\n        uint256[] _deadlines,\n        bool[] _tokenBounties,\n        address[] _tokenContracts,\n        string _ipfsAddresses,\n        string _description\n    ) public payable auth(FUND_ISSUES_ROLE)\n    {\n        // ensure the transvalue passed equals transaction value\n        //checkTransValueEqualsMessageValue(msg.value, _bountySizes,_tokenBounties);\n        string memory ipfsHash;\n        uint standardBountyId;\n        // submit the bounty to the StandardBounties contract\n        for (uint i = 0; i < _bountySizes.length; i++) {\n            ipfsHash = getHash(_ipfsAddresses, i);\n\n            standardBountyId = bounties.issueBounty(\n                this,                           //    address _issuer\n                _deadlines[i],                  //    uint256 _deadlines\n                ipfsHash,                       //    parse input to get ipfs hash\n                _bountySizes[i],                //    uint256 _fulfillmentAmount\n                address(0),                     //    address _arbiter\n                _tokenBounties[i],              //    bool _paysTokens\n                _tokenContracts[i]              //    address _tokenContract\n            );\n\n            _activateBounty(\n                _tokenBounties[i],\n                _tokenContracts[i],\n                _bountySizes[i],\n                standardBountyId\n            );\n\n            //Add bounty to local registry\n            _addBounty(\n                _repoIds[i],\n                _issueNumbers[i],\n                standardBountyId,\n                _bountySizes[i]\n            );\n        }\n    }\n\n    /**\n     * @notice Issue curation: `description`\n     * @param description The description of the issue curation\n     */\n    function curateIssues(\n        address[] /*unused_Addresses*/,\n        uint256[] issuePriorities,\n        uint256[] issueDescriptionIndices,\n        string /* unused_issueDescriptions*/,\n        string description,\n        uint256[] issueRepos,\n        uint256[] issueNumbers,\n        uint256 /* unused_curationId */\n    ) public auth(CURATE_ISSUES_ROLE)\n    {\n        bytes32 repoId;\n        uint256 issueLength = issuePriorities.length;\n        //require(issuePriorities.length == unusedAddresses.length, \"length mismatch: issuePriorites and unusedAddresses\");\n        require(issueLength == issueDescriptionIndices.length, \"length mismatch: issuePriorites and issueDescriptionIdx\");\n        require(issueLength == issueRepos.length, \"length mismatch: issuePriorites and issueRepos\");\n        require(issueLength == issueNumbers.length, \"length mismatch: issuePriorites and issueNumbers\");\n\n        for (uint256 i = 0; i < issueLength; i++) {\n            repoId = bytes32(issueRepos[i]);\n            repos[repoId].issues[uint256(issueNumbers[i])].priority = issuePriorities[i];\n            emit IssueCurated(repoId);\n        }\n    }\n\n///////////////////////\n// Public utility functions\n///////////////////////\n\n    /**\n     * @notice Checks if a repo exists in the registry\n     * @param _repoId the github repo id to check\n     * @return _repoId Id for newly added repo\n     */\n    function isRepoAdded(bytes32 _repoId) public view returns(bool isAdded) {\n        uint256 repoIdxVal = repos[_repoId].index;\n        if (repoIndex.length == 0)\n            return false;\n        if (repoIdxVal >= repoIndex.length)\n            return false;\n        return (repoIndex[repos[_repoId].index] == _repoId);\n    }\n\n    /**\n     * @notice Returns Applicant array length\n     * @param _repoId the github repo id of the issue\n     * @param _issueNumber the github issue up for assignmen\n     * @return  array length of the applicants array\n     */\n    function getApplicantsLength(\n        bytes32 _repoId,\n        uint256 _issueNumber\n    ) public view returns(uint256 applicantQty)\n    {\n        applicantQty = repos[_repoId].issues[_issueNumber].applicants.length;\n    }\n\n    /**\n     * @notice Returns Applicant Address\n     * @param _repoId the github repo id of the issue\n     * @param _issueNumber the github issue up for assignment\n     * @param _idx the applicant's position in the array\n     * @return  applicant address\n     */\n    function getApplicant(\n        bytes32 _repoId,\n        uint256 _issueNumber,\n        uint256 _idx\n    ) public view returns(address applicant, string application, SubmissionStatus status)\n    {\n        GithubIssue storage issue = repos[_repoId].issues[_issueNumber];\n        applicant = issue.applicants[_idx];\n        application = issue.assignmentRequests[applicant].requestHash;\n        status = issue.assignmentRequests[applicant].status;\n    }\n\n        /**\n     * @notice Returns Applicant array length\n     * @param _repoId the github repo id of the issue\n     * @param _issueNumber the github issue up for assignmen\n     * @return  array length of the applicants array\n     */\n    function getSubmissionsLength(\n        bytes32 _repoId,\n        uint256 _issueNumber\n    ) public view returns(uint256 applicantQty)\n    {\n        applicantQty = repos[_repoId].issues[_issueNumber].submissionIndices.length;\n    }\n\n    /**\n     * @notice Returns contributor's work submission\n     * @param _repoId the github repo id of the issue\n     * @param _issueNumber the github issue being worked on\n     * @param _submissionNumber the index of the contribution in the submissions Array\n     * @return  application IPFS hash for the applicant's proposed timeline and strategy\n     */\n    function getSubmission(\n        bytes32 _repoId,\n        uint256 _issueNumber,\n        uint256 _submissionNumber\n    ) public view returns(string submissionHash, uint256 fulfillmentId, SubmissionStatus status, address submitter)\n    {\n        WorkSubmission memory submission = workSubmissions[repos[_repoId].issues[_issueNumber].submissionIndices[_submissionNumber]];\n        submissionHash = submission.submissionHash;\n        fulfillmentId = submission.fulfillmentId;\n        status = submission.status;\n        submitter = submission.submitter;\n    }\n\n///////////////////////\n// Internal functions\n///////////////////////\n\n    function _changeBountySettings(\n        uint256 _baseRate,\n        uint256 _bountyDeadline,\n        address _bountyCurrency,\n        address _bountyAllocator\n    ) internal\n    {\n        settings.baseRate = _baseRate;\n        settings.bountyDeadline = _bountyDeadline;\n        settings.bountyCurrency = _bountyCurrency;\n        settings.bountyAllocator = _bountyAllocator;\n\n        emit BountySettingsChanged();\n    }\n\n    function _addExperienceLevel(\n        uint _multiplier,\n        bytes32 _description\n    ) internal\n    {\n        settings.expMultipliers.push(_multiplier);\n        settings.expLevels.push(_description);\n    }\n\n    function _activateBounty(\n        bool _tokenBounty,\n        address _tokenCountract,\n        uint _bountySize,\n        uint _standardBountyId\n    ) internal\n    {\n        if (_tokenBounty) {\n            vault.transfer(_tokenCountract, this, _bountySize);\n            TokenApproval(_tokenCountract).approve(bounties, _bountySize);\n            // Activate the bounty so it can be fulfilled\n            bounties.activateBounty(_standardBountyId, _bountySize);\n        } else {\n            bounties.activateBounty.value(_bountySize)(_standardBountyId, _bountySize);\n        }\n    }\n\n    function _addBounty(\n        bytes32 _repoId,\n        uint256 _issueNumber,\n        uint _standardBountyId,\n        uint256 _bountySize\n    ) internal\n    {\n        address[] memory emptyAddressArray = new address[](0);\n        uint256[] memory emptySubmissionIndexArray = new uint256[](0);\n        repos[_repoId].issues[_issueNumber] = GithubIssue(\n            _repoId,\n            _issueNumber,\n            true,\n            false,\n            _bountySize,\n            999,\n            address(0),\n            _standardBountyId,\n            address(0),\n            emptyAddressArray,\n            //address(0),\n            //0,\n            emptySubmissionIndexArray\n        );\n        emit BountyAdded(\n            _repoId,\n            _issueNumber,\n            _bountySize\n        );\n    }\n\n    function getHash(\n        string _str,\n        uint256 _hashIndex\n    ) internal pure returns (string)\n    {\n        // first char is at location 0\n        //IPFS addresses span from 0 (startindex) to 46 (endIndex)\n        uint256 startIndex = _hashIndex * 46;\n        uint256 endIndex = startIndex + 46;\n        bytes memory strBytes = bytes(_str);\n        bytes memory result = new bytes(endIndex-startIndex);\n        uint256 length = endIndex - startIndex;\n        uint256 dest;\n        uint256 src;\n        assembly {\n          dest := add(result,0x20)\n          src := add(strBytes,add(0x20,startIndex))\n          mstore(dest, mload(src))\n        }\n        src += 32;\n        dest += 32;\n        length -= 32;\n        uint mask = 256 ** (32 - length) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n\n        return string(result);\n    }\n\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ],
        "": [
          "id",
          "ast"
        ]
      }
    }
  }
}